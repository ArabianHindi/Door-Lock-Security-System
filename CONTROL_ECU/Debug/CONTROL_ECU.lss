
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000030e4  00003178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080006c  0080006c  00003184  2**0
                  ALLOC
  3 .stab         00003420  00000000  00000000  00003184  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000302c  00000000  00000000  000065a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000095d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000098bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b904  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ca05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d988  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000db08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ddca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__vector_4>
      14:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__vector_9>
      28:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_10>
      2c:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <main>
      8a:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <USART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the USART.
 * 3. Setup the USART baud rate.
 */
void USART_init(const USART_ConfigType * const a_usartConfigPtr){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <USART_init+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <USART_init+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9c 83       	std	Y+4, r25	; 0x04
     cac:	8b 83       	std	Y+3, r24	; 0x03
	uint16 reg_UBRR_value = 0;
     cae:	1a 82       	std	Y+2, r1	; 0x02
     cb0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     cb2:	eb e2       	ldi	r30, 0x2B	; 43
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	80 83       	st	Z, r24
	 * TXEN  = 1 Transmitter Enable
	 * RXEN  = 1 Receiver Enable
	 * UCSZ2 = 1/0 For 9/other data bit mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = ((a_usartConfigPtr->usart_bit_mode & 0x04)) | (1<<TXEN) | (1<<RXEN);
     cba:	aa e2       	ldi	r26, 0x2A	; 42
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	eb 81       	ldd	r30, Y+3	; 0x03
     cc0:	fc 81       	ldd	r31, Y+4	; 0x04
     cc2:	84 81       	ldd	r24, Z+4	; 0x04
     cc4:	84 70       	andi	r24, 0x04	; 4
     cc6:	88 61       	ori	r24, 0x18	; 24
     cc8:	8c 93       	st	X, r24
	 * UMSEL   = 0/1 Async/Sync Operation
	 * UPM1:0   (parity bit configuration)
	 * USBS    = 0/1 One/Two stop bit(s)
	 * UCSZ1:0  (data bits mode config.)
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (a_usartConfigPtr->usart_mode << UMSEL) | (a_usartConfigPtr->usart_parity << UPM0)\
     cca:	a0 e4       	ldi	r26, 0x40	; 64
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	eb 81       	ldd	r30, Y+3	; 0x03
     cd0:	fc 81       	ldd	r31, Y+4	; 0x04
     cd2:	86 81       	ldd	r24, Z+6	; 0x06
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	00 24       	eor	r0, r0
     cda:	96 95       	lsr	r25
     cdc:	87 95       	ror	r24
     cde:	07 94       	ror	r0
     ce0:	96 95       	lsr	r25
     ce2:	87 95       	ror	r24
     ce4:	07 94       	ror	r0
     ce6:	98 2f       	mov	r25, r24
     ce8:	80 2d       	mov	r24, r0
     cea:	28 2f       	mov	r18, r24
     cec:	20 68       	ori	r18, 0x80	; 128
     cee:	eb 81       	ldd	r30, Y+3	; 0x03
     cf0:	fc 81       	ldd	r31, Y+4	; 0x04
     cf2:	87 81       	ldd	r24, Z+7	; 0x07
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	82 95       	swap	r24
     cfa:	92 95       	swap	r25
     cfc:	90 7f       	andi	r25, 0xF0	; 240
     cfe:	98 27       	eor	r25, r24
     d00:	80 7f       	andi	r24, 0xF0	; 240
     d02:	98 27       	eor	r25, r24
     d04:	28 2b       	or	r18, r24
     d06:	eb 81       	ldd	r30, Y+3	; 0x03
     d08:	fc 81       	ldd	r31, Y+4	; 0x04
     d0a:	85 81       	ldd	r24, Z+5	; 0x05
     d0c:	88 2f       	mov	r24, r24
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	28 2b       	or	r18, r24
     d1e:	eb 81       	ldd	r30, Y+3	; 0x03
     d20:	fc 81       	ldd	r31, Y+4	; 0x04
     d22:	84 81       	ldd	r24, Z+4	; 0x04
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	83 70       	andi	r24, 0x03	; 3
     d2a:	90 70       	andi	r25, 0x00	; 0
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	82 2b       	or	r24, r18
     d32:	8c 93       	st	X, r24
			| ( a_usartConfigPtr->usart_stop_bits << USBS) | ((a_usartConfigPtr->usart_bit_mode & 0x03) << UCSZ0);

	if(a_usartConfigPtr->usart_mode == SYNCHRONOUS){
     d34:	eb 81       	ldd	r30, Y+3	; 0x03
     d36:	fc 81       	ldd	r31, Y+4	; 0x04
     d38:	86 81       	ldd	r24, Z+6	; 0x06
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	51 f4       	brne	.+20     	; 0xd52 <USART_init+0xb4>
		/* UCPOL   	(clock configuration for Async. mode)*/
		UCSRC |= (a_usartConfigPtr->usart_clock_config << UCPOL);
     d3e:	a0 e4       	ldi	r26, 0x40	; 64
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e0 e4       	ldi	r30, 0x40	; 64
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	90 81       	ld	r25, Z
     d48:	eb 81       	ldd	r30, Y+3	; 0x03
     d4a:	fc 81       	ldd	r31, Y+4	; 0x04
     d4c:	80 85       	ldd	r24, Z+8	; 0x08
     d4e:	89 2b       	or	r24, r25
     d50:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	reg_UBRR_value = (uint16)( ( F_CPU / (8UL * a_usartConfigPtr->usart_baud_rate) ) - 1 );
     d52:	eb 81       	ldd	r30, Y+3	; 0x03
     d54:	fc 81       	ldd	r31, Y+4	; 0x04
     d56:	80 81       	ld	r24, Z
     d58:	91 81       	ldd	r25, Z+1	; 0x01
     d5a:	a2 81       	ldd	r26, Z+2	; 0x02
     d5c:	b3 81       	ldd	r27, Z+3	; 0x03
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	aa 1f       	adc	r26, r26
     d64:	bb 1f       	adc	r27, r27
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	aa 1f       	adc	r26, r26
     d6c:	bb 1f       	adc	r27, r27
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	aa 1f       	adc	r26, r26
     d74:	bb 1f       	adc	r27, r27
     d76:	9c 01       	movw	r18, r24
     d78:	ad 01       	movw	r20, r26
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	92 e1       	ldi	r25, 0x12	; 18
     d7e:	aa e7       	ldi	r26, 0x7A	; 122
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	bc 01       	movw	r22, r24
     d84:	cd 01       	movw	r24, r26
     d86:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
     d8a:	da 01       	movw	r26, r20
     d8c:	c9 01       	movw	r24, r18
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01

	/*Clear URSEL to write in UBRRH Register*/
	CLEAR_BIT(UBRRH,URSEL);
     d94:	a0 e4       	ldi	r26, 0x40	; 64
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e0 e4       	ldi	r30, 0x40	; 64
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8f 77       	andi	r24, 0x7F	; 127
     da0:	8c 93       	st	X, r24
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (uint8)   (reg_UBRR_value >> 8) ;
     da2:	e0 e4       	ldi	r30, 0x40	; 64
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	89 2f       	mov	r24, r25
     dac:	99 27       	eor	r25, r25
     dae:	80 83       	st	Z, r24
	UBRRL = (uint8)   (reg_UBRR_value & 0x00FF);
     db0:	e9 e2       	ldi	r30, 0x29	; 41
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	80 83       	st	Z, r24
}
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <USART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void USART_sendByte(uint8 a_data){
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	0f 92       	push	r0
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	89 83       	std	Y+1, r24	; 0x01

	/*Wait until the uart transmitter buffer is ready to recieve a new data*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
     dd2:	eb e2       	ldi	r30, 0x2B	; 43
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	80 72       	andi	r24, 0x20	; 32
     dde:	90 70       	andi	r25, 0x00	; 0
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	b9 f3       	breq	.-18     	; 0xdd2 <USART_sendByte+0xc>

	/*Write data to UDR register (in transmission buffer) to be sent*/
	UDR = a_data;
     de4:	ec e2       	ldi	r30, 0x2C	; 44
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	80 83       	st	Z, r24
}
     dec:	0f 90       	pop	r0
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <USART_receiveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 USART_receiveByte(void){
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	/*Wait until data is recieved and the RXC flag is raised*/
	while(BIT_IS_CLEAR(UCSRA,RXC));
     dfc:	eb e2       	ldi	r30, 0x2B	; 43
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	88 23       	and	r24, r24
     e04:	dc f7       	brge	.-10     	; 0xdfc <USART_receiveByte+0x8>

	/*return data in the recieve buffer*/
	return UDR; /*RXC is cleared after reading*/
     e06:	ec e2       	ldi	r30, 0x2C	; 44
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
}
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <USART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(const uint8 * a_txStrPtr){
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	00 d0       	rcall	.+0      	; 0xe18 <USART_sendString+0x6>
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	9b 83       	std	Y+3, r25	; 0x03
     e20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     e22:	19 82       	std	Y+1, r1	; 0x01
     e24:	0e c0       	rjmp	.+28     	; 0xe42 <USART_sendString+0x30>

	/* Send the string (without null terminator char) */
	while(a_txStrPtr[i] != '\0'){
		USART_sendByte(a_txStrPtr[i]);
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	fc 01       	movw	r30, r24
     e32:	e2 0f       	add	r30, r18
     e34:	f3 1f       	adc	r31, r19
     e36:	80 81       	ld	r24, Z
     e38:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <USART_sendByte>
		i++;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	89 83       	std	Y+1, r24	; 0x01
 */
void USART_sendString(const uint8 * a_txStrPtr){
	uint8 i=0;

	/* Send the string (without null terminator char) */
	while(a_txStrPtr[i] != '\0'){
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	9b 81       	ldd	r25, Y+3	; 0x03
     e4c:	fc 01       	movw	r30, r24
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	80 81       	ld	r24, Z
     e54:	88 23       	and	r24, r24
     e56:	39 f7       	brne	.-50     	; 0xe26 <USART_sendString+0x14>
		USART_sendByte(a_txStrPtr[i]);
		i++;
	}
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <USART_receiveString>:

/*
 * Description :
 * Receive the required string until the terminator symbol.
 */
void USART_receiveString(uint8 * const a_rxStrPtr){
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <USART_receiveString+0xa>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <USART_receiveString+0xc>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9b 83       	std	Y+3, r25	; 0x03
     e76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     e78:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the whole string until the defined terminator char */
	do{
		a_rxStrPtr[i] = USART_receiveByte();
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	9b 81       	ldd	r25, Y+3	; 0x03
     e84:	8c 01       	movw	r16, r24
     e86:	02 0f       	add	r16, r18
     e88:	13 1f       	adc	r17, r19
     e8a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <USART_receiveByte>
     e8e:	f8 01       	movw	r30, r16
     e90:	80 83       	st	Z, r24
	}
	while(a_rxStrPtr[i++] != USART_TERMINATOR_CHARACTER);
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	9b 81       	ldd	r25, Y+3	; 0x03
     e9c:	fc 01       	movw	r30, r24
     e9e:	e2 0f       	add	r30, r18
     ea0:	f3 1f       	adc	r31, r19
     ea2:	80 81       	ld	r24, Z
     ea4:	1c 82       	std	Y+4, r1	; 0x04
     ea6:	83 32       	cpi	r24, 0x23	; 35
     ea8:	11 f0       	breq	.+4      	; 0xeae <USART_receiveString+0x4a>
     eaa:	f1 e0       	ldi	r31, 0x01	; 1
     eac:	fc 83       	std	Y+4, r31	; 0x04
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	88 23       	and	r24, r24
     eb8:	01 f7       	brne	.-64     	; 0xe7a <USART_receiveString+0x16>

	/*replacing  the retminator character with a null terminator*/
	a_rxStrPtr[i-1] = '\0';
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	9c 01       	movw	r18, r24
     ec2:	21 50       	subi	r18, 0x01	; 1
     ec4:	30 40       	sbci	r19, 0x00	; 0
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	fc 01       	movw	r30, r24
     ecc:	e2 0f       	add	r30, r18
     ece:	f3 1f       	adc	r31, r19
     ed0:	10 82       	st	Z, r1
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	08 95       	ret

00000ee4 <__vector_11>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect){
     ee4:	1f 92       	push	r1
     ee6:	0f 92       	push	r0
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	0f 92       	push	r0
     eec:	11 24       	eor	r1, r1
     eee:	2f 93       	push	r18
     ef0:	3f 93       	push	r19
     ef2:	4f 93       	push	r20
     ef4:	5f 93       	push	r21
     ef6:	6f 93       	push	r22
     ef8:	7f 93       	push	r23
     efa:	8f 93       	push	r24
     efc:	9f 93       	push	r25
     efe:	af 93       	push	r26
     f00:	bf 93       	push	r27
     f02:	ef 93       	push	r30
     f04:	ff 93       	push	r31
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
     f0e:	80 91 6c 00 	lds	r24, 0x006C
     f12:	90 91 6d 00 	lds	r25, 0x006D
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	29 f0       	breq	.+10     	; 0xf24 <__vector_11+0x40>
		(*g_timer0CallBackPtr)();
     f1a:	e0 91 6c 00 	lds	r30, 0x006C
     f1e:	f0 91 6d 00 	lds	r31, 0x006D
     f22:	09 95       	icall
	}
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <__vector_10>:

ISR(TIMER0_COMP_vect){
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	5f 93       	push	r21
     f5c:	6f 93       	push	r22
     f5e:	7f 93       	push	r23
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	af 93       	push	r26
     f66:	bf 93       	push	r27
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
     f74:	80 91 6c 00 	lds	r24, 0x006C
     f78:	90 91 6d 00 	lds	r25, 0x006D
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	29 f0       	breq	.+10     	; 0xf8a <__vector_10+0x40>
		(*g_timer0CallBackPtr)();
     f80:	e0 91 6c 00 	lds	r30, 0x006C
     f84:	f0 91 6d 00 	lds	r31, 0x006D
     f88:	09 95       	icall
	}
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	ff 91       	pop	r31
     f90:	ef 91       	pop	r30
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <__vector_9>:

ISR(TIMER1_OVF_vect){
     fb0:	1f 92       	push	r1
     fb2:	0f 92       	push	r0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	0f 92       	push	r0
     fb8:	11 24       	eor	r1, r1
     fba:	2f 93       	push	r18
     fbc:	3f 93       	push	r19
     fbe:	4f 93       	push	r20
     fc0:	5f 93       	push	r21
     fc2:	6f 93       	push	r22
     fc4:	7f 93       	push	r23
     fc6:	8f 93       	push	r24
     fc8:	9f 93       	push	r25
     fca:	af 93       	push	r26
     fcc:	bf 93       	push	r27
     fce:	ef 93       	push	r30
     fd0:	ff 93       	push	r31
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR){
     fda:	80 91 6e 00 	lds	r24, 0x006E
     fde:	90 91 6f 00 	lds	r25, 0x006F
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	29 f0       	breq	.+10     	; 0xff0 <__vector_9+0x40>
		(*g_timer1CallBackPtr)();
     fe6:	e0 91 6e 00 	lds	r30, 0x006E
     fea:	f0 91 6f 00 	lds	r31, 0x006F
     fee:	09 95       	icall
	}

}
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	7f 91       	pop	r23
    1002:	6f 91       	pop	r22
    1004:	5f 91       	pop	r21
    1006:	4f 91       	pop	r20
    1008:	3f 91       	pop	r19
    100a:	2f 91       	pop	r18
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <__vector_7>:

ISR(TIMER1_COMPA_vect){
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	2f 93       	push	r18
    1022:	3f 93       	push	r19
    1024:	4f 93       	push	r20
    1026:	5f 93       	push	r21
    1028:	6f 93       	push	r22
    102a:	7f 93       	push	r23
    102c:	8f 93       	push	r24
    102e:	9f 93       	push	r25
    1030:	af 93       	push	r26
    1032:	bf 93       	push	r27
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR){
    1040:	80 91 6e 00 	lds	r24, 0x006E
    1044:	90 91 6f 00 	lds	r25, 0x006F
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	29 f0       	breq	.+10     	; 0x1056 <__vector_7+0x40>
		(*g_timer1CallBackPtr)();
    104c:	e0 91 6e 00 	lds	r30, 0x006E
    1050:	f0 91 6f 00 	lds	r31, 0x006F
    1054:	09 95       	icall
	}
}
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__vector_5>:


ISR(TIMER2_OVF_vect){
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	11 24       	eor	r1, r1
    1086:	2f 93       	push	r18
    1088:	3f 93       	push	r19
    108a:	4f 93       	push	r20
    108c:	5f 93       	push	r21
    108e:	6f 93       	push	r22
    1090:	7f 93       	push	r23
    1092:	8f 93       	push	r24
    1094:	9f 93       	push	r25
    1096:	af 93       	push	r26
    1098:	bf 93       	push	r27
    109a:	ef 93       	push	r30
    109c:	ff 93       	push	r31
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR){
    10a6:	80 91 70 00 	lds	r24, 0x0070
    10aa:	90 91 71 00 	lds	r25, 0x0071
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	29 f0       	breq	.+10     	; 0x10bc <__vector_5+0x40>
		(*g_timer2CallBackPtr)();
    10b2:	e0 91 70 00 	lds	r30, 0x0070
    10b6:	f0 91 71 00 	lds	r31, 0x0071
    10ba:	09 95       	icall
	}
}
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	ff 91       	pop	r31
    10c2:	ef 91       	pop	r30
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <__vector_4>:

ISR(TIMER2_COMP_vect){
    10e2:	1f 92       	push	r1
    10e4:	0f 92       	push	r0
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	0f 92       	push	r0
    10ea:	11 24       	eor	r1, r1
    10ec:	2f 93       	push	r18
    10ee:	3f 93       	push	r19
    10f0:	4f 93       	push	r20
    10f2:	5f 93       	push	r21
    10f4:	6f 93       	push	r22
    10f6:	7f 93       	push	r23
    10f8:	8f 93       	push	r24
    10fa:	9f 93       	push	r25
    10fc:	af 93       	push	r26
    10fe:	bf 93       	push	r27
    1100:	ef 93       	push	r30
    1102:	ff 93       	push	r31
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR){
    110c:	80 91 70 00 	lds	r24, 0x0070
    1110:	90 91 71 00 	lds	r25, 0x0071
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	29 f0       	breq	.+10     	; 0x1122 <__vector_4+0x40>
		(*g_timer2CallBackPtr)();
    1118:	e0 91 70 00 	lds	r30, 0x0070
    111c:	f0 91 71 00 	lds	r31, 0x0071
    1120:	09 95       	icall
	}
}
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <TIMER_init>:
/*******************************************************************************
 *                    	  Functions Definitions                                *
 *******************************************************************************/


void TIMER_init(TIMER_ConfigType * a_timerConfig){
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <TIMER_init+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <TIMER_init+0x8>
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerConfig->timer_id){
    1158:	e9 81       	ldd	r30, Y+1	; 0x01
    115a:	fa 81       	ldd	r31, Y+2	; 0x02
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3c 83       	std	Y+4, r19	; 0x04
    1164:	2b 83       	std	Y+3, r18	; 0x03
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	71 f0       	breq	.+28     	; 0x118c <TIMER_init+0x44>
    1170:	2b 81       	ldd	r18, Y+3	; 0x03
    1172:	3c 81       	ldd	r19, Y+4	; 0x04
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	71 f0       	breq	.+28     	; 0x1196 <TIMER_init+0x4e>
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	71 f4       	brne	.+28     	; 0x119e <TIMER_init+0x56>
	case TIMER0_ID:
		TIMER0_init(a_timerConfig);
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	0e 94 1e 0a 	call	0x143c	; 0x143c <TIMER0_init>
    118a:	09 c0       	rjmp	.+18     	; 0x119e <TIMER_init+0x56>
		break;
	case TIMER1_ID:
		TIMER1_init(a_timerConfig);
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	0e 94 c0 0a 	call	0x1580	; 0x1580 <TIMER1_init>
    1194:	04 c0       	rjmp	.+8      	; 0x119e <TIMER_init+0x56>
		break;
	case TIMER2_ID:
		TIMER2_init(a_timerConfig);
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <TIMER2_init>
		break;
	}
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <TIMER_deInit>:

void TIMER_deInit(TIMER_ID a_timerId){
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <TIMER_deInit+0x6>
    11b2:	0f 92       	push	r0
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerId){
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	3b 83       	std	Y+3, r19	; 0x03
    11c2:	2a 83       	std	Y+2, r18	; 0x02
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	9b 81       	ldd	r25, Y+3	; 0x03
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	91 05       	cpc	r25, r1
    11cc:	61 f0       	breq	.+24     	; 0x11e6 <TIMER_deInit+0x3a>
    11ce:	2a 81       	ldd	r18, Y+2	; 0x02
    11d0:	3b 81       	ldd	r19, Y+3	; 0x03
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	51 f0       	breq	.+20     	; 0x11ec <TIMER_deInit+0x40>
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	9b 81       	ldd	r25, Y+3	; 0x03
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	41 f4       	brne	.+16     	; 0x11f0 <TIMER_deInit+0x44>
	case TIMER0_ID:
		TIMER0_deInit();
    11e0:	0e 94 77 0c 	call	0x18ee	; 0x18ee <TIMER0_deInit>
    11e4:	05 c0       	rjmp	.+10     	; 0x11f0 <TIMER_deInit+0x44>
		break;
	case TIMER1_ID:
		TIMER1_deInit();
    11e6:	0e 94 95 0c 	call	0x192a	; 0x192a <TIMER1_deInit>
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <TIMER_deInit+0x44>
		break;
	case TIMER2_ID:
		TIMER2_deInit();
    11ec:	0e 94 c7 0c 	call	0x198e	; 0x198e <TIMER2_deInit>
		break;
	}
}
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <TIMER_setCallBackFunc>:

void TIMER_setCallBackFunc(TIMER_ID a_timerId, void volatile (*a_functionAddressPtr) (void)){
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	00 d0       	rcall	.+0      	; 0x1202 <TIMER_setCallBackFunc+0x6>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <TIMER_setCallBackFunc+0x8>
    1204:	0f 92       	push	r0
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	7b 83       	std	Y+3, r23	; 0x03
    120e:	6a 83       	std	Y+2, r22	; 0x02
	switch(a_timerId){
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3d 83       	std	Y+5, r19	; 0x05
    1218:	2c 83       	std	Y+4, r18	; 0x04
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	91 05       	cpc	r25, r1
    1222:	81 f0       	breq	.+32     	; 0x1244 <TIMER_setCallBackFunc+0x48>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	91 f0       	breq	.+36     	; 0x1252 <TIMER_setCallBackFunc+0x56>
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	9d 81       	ldd	r25, Y+5	; 0x05
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	a1 f4       	brne	.+40     	; 0x125e <TIMER_setCallBackFunc+0x62>
	case TIMER0_ID:
		g_timer0CallBackPtr = a_functionAddressPtr;
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	9b 81       	ldd	r25, Y+3	; 0x03
    123a:	90 93 6d 00 	sts	0x006D, r25
    123e:	80 93 6c 00 	sts	0x006C, r24
    1242:	0d c0       	rjmp	.+26     	; 0x125e <TIMER_setCallBackFunc+0x62>
		break;
	case TIMER1_ID:
		g_timer1CallBackPtr = a_functionAddressPtr;
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	9b 81       	ldd	r25, Y+3	; 0x03
    1248:	90 93 6f 00 	sts	0x006F, r25
    124c:	80 93 6e 00 	sts	0x006E, r24
    1250:	06 c0       	rjmp	.+12     	; 0x125e <TIMER_setCallBackFunc+0x62>
		break;
	case TIMER2_ID:
		g_timer2CallBackPtr = a_functionAddressPtr;
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	9b 81       	ldd	r25, Y+3	; 0x03
    1256:	90 93 71 00 	sts	0x0071, r25
    125a:	80 93 70 00 	sts	0x0070, r24
		break;
	}
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <TIMER_changeCompareValue>:

void TIMER_changeCompareValue(TIMER_ID a_timerId, uint16 a_new_vlaue){
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <TIMER_changeCompareValue+0x6>
    1274:	00 d0       	rcall	.+0      	; 0x1276 <TIMER_changeCompareValue+0x8>
    1276:	0f 92       	push	r0
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	7b 83       	std	Y+3, r23	; 0x03
    1280:	6a 83       	std	Y+2, r22	; 0x02
	switch(a_timerId){
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	3d 83       	std	Y+5, r19	; 0x05
    128a:	2c 83       	std	Y+4, r18	; 0x04
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	91 05       	cpc	r25, r1
    1294:	71 f0       	breq	.+28     	; 0x12b2 <TIMER_changeCompareValue+0x44>
    1296:	2c 81       	ldd	r18, Y+4	; 0x04
    1298:	3d 81       	ldd	r19, Y+5	; 0x05
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	81 f0       	breq	.+32     	; 0x12c0 <TIMER_changeCompareValue+0x52>
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	81 f4       	brne	.+32     	; 0x12c8 <TIMER_changeCompareValue+0x5a>
	case TIMER0_ID:
		OCR0 = (uint8) a_new_vlaue;
    12a8:	ec e5       	ldi	r30, 0x5C	; 92
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	80 83       	st	Z, r24
    12b0:	0b c0       	rjmp	.+22     	; 0x12c8 <TIMER_changeCompareValue+0x5a>
		break;
	case TIMER1_ID:
		OCR1A =  a_new_vlaue;
    12b2:	ea e4       	ldi	r30, 0x4A	; 74
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	91 83       	std	Z+1, r25	; 0x01
    12bc:	80 83       	st	Z, r24
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <TIMER_changeCompareValue+0x5a>
		break;
	case TIMER2_ID:
		OCR2 = (uint8) a_new_vlaue;
    12c0:	e3 e4       	ldi	r30, 0x43	; 67
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	80 83       	st	Z, r24
		break;
	}
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <TIMER_changeDutyCycle>:

void TIMER_changeDutyCycle(TIMER_ConfigType * a_timerConfig){
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <TIMER_changeDutyCycle+0xa>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <TIMER_changeDutyCycle+0xc>
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	9a 83       	std	Y+2, r25	; 0x02
    12ea:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerConfig->timer_id){
    12ec:	e9 81       	ldd	r30, Y+1	; 0x01
    12ee:	fa 81       	ldd	r31, Y+2	; 0x02
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3c 83       	std	Y+4, r19	; 0x04
    12f8:	2b 83       	std	Y+3, r18	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	51 f1       	breq	.+84     	; 0x1358 <TIMER_changeDutyCycle+0x80>
    1304:	eb 81       	ldd	r30, Y+3	; 0x03
    1306:	fc 81       	ldd	r31, Y+4	; 0x04
    1308:	e2 30       	cpi	r30, 0x02	; 2
    130a:	f1 05       	cpc	r31, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <TIMER_changeDutyCycle+0x38>
    130e:	70 c0       	rjmp	.+224    	; 0x13f0 <TIMER_changeDutyCycle+0x118>
    1310:	2b 81       	ldd	r18, Y+3	; 0x03
    1312:	3c 81       	ldd	r19, Y+4	; 0x04
    1314:	21 15       	cp	r18, r1
    1316:	31 05       	cpc	r19, r1
    1318:	09 f0       	breq	.+2      	; 0x131c <TIMER_changeDutyCycle+0x44>
    131a:	87 c0       	rjmp	.+270    	; 0x142a <TIMER_changeDutyCycle+0x152>
	case TIMER0_ID:
		OCR0 = (((uint16)a_timerConfig->mode_data.pwm_duty_cycle * TIMER0_MAX_COUNT)/100);
    131c:	0c e5       	ldi	r16, 0x5C	; 92
    131e:	10 e0       	ldi	r17, 0x00	; 0
    1320:	e9 81       	ldd	r30, Y+1	; 0x01
    1322:	fa 81       	ldd	r31, Y+2	; 0x02
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	ca 01       	movw	r24, r20
    132c:	9c 01       	movw	r18, r24
    132e:	22 0f       	add	r18, r18
    1330:	33 1f       	adc	r19, r19
    1332:	c9 01       	movw	r24, r18
    1334:	96 95       	lsr	r25
    1336:	98 2f       	mov	r25, r24
    1338:	88 27       	eor	r24, r24
    133a:	97 95       	ror	r25
    133c:	87 95       	ror	r24
    133e:	82 1b       	sub	r24, r18
    1340:	93 0b       	sbc	r25, r19
    1342:	84 0f       	add	r24, r20
    1344:	95 1f       	adc	r25, r21
    1346:	24 e6       	ldi	r18, 0x64	; 100
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	b9 01       	movw	r22, r18
    134c:	0e 94 03 18 	call	0x3006	; 0x3006 <__udivmodhi4>
    1350:	cb 01       	movw	r24, r22
    1352:	f8 01       	movw	r30, r16
    1354:	80 83       	st	Z, r24
    1356:	69 c0       	rjmp	.+210    	; 0x142a <TIMER_changeDutyCycle+0x152>
		break;

	case TIMER1_ID:
		if(a_timerConfig->timer1_pwm_pin_select == PIN_OC1A){
    1358:	e9 81       	ldd	r30, Y+1	; 0x01
    135a:	fa 81       	ldd	r31, Y+2	; 0x02
    135c:	86 81       	ldd	r24, Z+6	; 0x06
    135e:	88 23       	and	r24, r24
    1360:	09 f5       	brne	.+66     	; 0x13a4 <TIMER_changeDutyCycle+0xcc>
			OCR1A = (((uint32)a_timerConfig->mode_data.pwm_duty_cycle * TOP_VALUE)/100);
    1362:	0a e4       	ldi	r16, 0x4A	; 74
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	e9 81       	ldd	r30, Y+1	; 0x01
    1368:	fa 81       	ldd	r31, Y+2	; 0x02
    136a:	80 81       	ld	r24, Z
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a0 e0       	ldi	r26, 0x00	; 0
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	2f ea       	ldi	r18, 0xAF	; 175
    1376:	32 e1       	ldi	r19, 0x12	; 18
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__mulsi3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	24 e6       	ldi	r18, 0x64	; 100
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	bc 01       	movw	r22, r24
    1392:	cd 01       	movw	r24, r26
    1394:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
    1398:	da 01       	movw	r26, r20
    139a:	c9 01       	movw	r24, r18
    139c:	f8 01       	movw	r30, r16
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
    13a2:	43 c0       	rjmp	.+134    	; 0x142a <TIMER_changeDutyCycle+0x152>
		}
		else if(a_timerConfig->timer1_pwm_pin_select == PIN_OC1B){
    13a4:	e9 81       	ldd	r30, Y+1	; 0x01
    13a6:	fa 81       	ldd	r31, Y+2	; 0x02
    13a8:	86 81       	ldd	r24, Z+6	; 0x06
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	f1 f5       	brne	.+124    	; 0x142a <TIMER_changeDutyCycle+0x152>
			OCR1B = (((uint32)a_timerConfig->mode_data.pwm_duty_cycle * TOP_VALUE)/100);
    13ae:	08 e4       	ldi	r16, 0x48	; 72
    13b0:	10 e0       	ldi	r17, 0x00	; 0
    13b2:	e9 81       	ldd	r30, Y+1	; 0x01
    13b4:	fa 81       	ldd	r31, Y+2	; 0x02
    13b6:	80 81       	ld	r24, Z
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a0 e0       	ldi	r26, 0x00	; 0
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	2f ea       	ldi	r18, 0xAF	; 175
    13c2:	32 e1       	ldi	r19, 0x12	; 18
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__mulsi3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	24 e6       	ldi	r18, 0x64	; 100
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	bc 01       	movw	r22, r24
    13de:	cd 01       	movw	r24, r26
    13e0:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
    13e4:	da 01       	movw	r26, r20
    13e6:	c9 01       	movw	r24, r18
    13e8:	f8 01       	movw	r30, r16
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	80 83       	st	Z, r24
    13ee:	1d c0       	rjmp	.+58     	; 0x142a <TIMER_changeDutyCycle+0x152>
		}
		break;

	case TIMER2_ID:
		OCR2 = (((uint16)a_timerConfig->mode_data.pwm_duty_cycle * TIMER2_MAX_COUNT)/100);
    13f0:	03 e4       	ldi	r16, 0x43	; 67
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	e9 81       	ldd	r30, Y+1	; 0x01
    13f6:	fa 81       	ldd	r31, Y+2	; 0x02
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	ca 01       	movw	r24, r20
    1400:	9c 01       	movw	r18, r24
    1402:	22 0f       	add	r18, r18
    1404:	33 1f       	adc	r19, r19
    1406:	c9 01       	movw	r24, r18
    1408:	96 95       	lsr	r25
    140a:	98 2f       	mov	r25, r24
    140c:	88 27       	eor	r24, r24
    140e:	97 95       	ror	r25
    1410:	87 95       	ror	r24
    1412:	82 1b       	sub	r24, r18
    1414:	93 0b       	sbc	r25, r19
    1416:	84 0f       	add	r24, r20
    1418:	95 1f       	adc	r25, r21
    141a:	24 e6       	ldi	r18, 0x64	; 100
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	b9 01       	movw	r22, r18
    1420:	0e 94 03 18 	call	0x3006	; 0x3006 <__udivmodhi4>
    1424:	cb 01       	movw	r24, r22
    1426:	f8 01       	movw	r30, r16
    1428:	80 83       	st	Z, r24
		break;
	}
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	08 95       	ret

0000143c <TIMER0_init>:

static void TIMER0_init(TIMER_ConfigType * a_timerConfig){
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <TIMER0_init+0xa>
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    144e:	e2 e5       	ldi	r30, 0x52	; 82
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	10 82       	st	Z, r1

	if(a_timerConfig->mode == PWM_MODE){
    1454:	e9 81       	ldd	r30, Y+1	; 0x01
    1456:	fa 81       	ldd	r31, Y+2	; 0x02
    1458:	83 81       	ldd	r24, Z+3	; 0x03
    145a:	83 30       	cpi	r24, 0x03	; 3
    145c:	29 f5       	brne	.+74     	; 0x14a8 <TIMER0_init+0x6c>
		OCR0 = (((uint16)a_timerConfig->mode_data.pwm_duty_cycle * TIMER0_MAX_COUNT)/100);
    145e:	0c e5       	ldi	r16, 0x5C	; 92
    1460:	10 e0       	ldi	r17, 0x00	; 0
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	ca 01       	movw	r24, r20
    146e:	9c 01       	movw	r18, r24
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	c9 01       	movw	r24, r18
    1476:	96 95       	lsr	r25
    1478:	98 2f       	mov	r25, r24
    147a:	88 27       	eor	r24, r24
    147c:	97 95       	ror	r25
    147e:	87 95       	ror	r24
    1480:	82 1b       	sub	r24, r18
    1482:	93 0b       	sbc	r25, r19
    1484:	84 0f       	add	r24, r20
    1486:	95 1f       	adc	r25, r21
    1488:	24 e6       	ldi	r18, 0x64	; 100
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	b9 01       	movw	r22, r18
    148e:	0e 94 03 18 	call	0x3006	; 0x3006 <__udivmodhi4>
    1492:	cb 01       	movw	r24, r22
    1494:	f8 01       	movw	r30, r16
    1496:	80 83       	st	Z, r24
		DDRB  = DDRB | (1<<OC0); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1498:	a7 e3       	ldi	r26, 0x37	; 55
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e7 e3       	ldi	r30, 0x37	; 55
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	88 60       	ori	r24, 0x08	; 8
    14a4:	8c 93       	st	X, r24
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <TIMER0_init+0x7a>
	}
	else{
		SET_BIT(TCCR0,FOC0);
    14a8:	a3 e5       	ldi	r26, 0x53	; 83
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e3 e5       	ldi	r30, 0x53	; 83
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	80 68       	ori	r24, 0x80	; 128
    14b4:	8c 93       	st	X, r24
	}

	if(a_timerConfig->mode == OVERFLOW_MODE){
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	83 81       	ldd	r24, Z+3	; 0x03
    14bc:	88 23       	and	r24, r24
    14be:	81 f4       	brne	.+32     	; 0x14e0 <TIMER0_init+0xa4>
		SET_BIT(TIMSK,TOIE0);
    14c0:	a9 e5       	ldi	r26, 0x59	; 89
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e9 e5       	ldi	r30, 0x59	; 89
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	81 60       	ori	r24, 0x01	; 1
    14cc:	8c 93       	st	X, r24
		TCNT0 = a_timerConfig->mode_data.ovf_initial_value & 0x0F; //Set Timer Initial value
    14ce:	a2 e5       	ldi	r26, 0x52	; 82
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e9 81       	ldd	r30, Y+1	; 0x01
    14d4:	fa 81       	ldd	r31, Y+2	; 0x02
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
    14da:	8f 70       	andi	r24, 0x0F	; 15
    14dc:	8c 93       	st	X, r24
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <TIMER0_init+0xca>
	}
	else if(a_timerConfig->mode == COMPARE_MODE){
    14e0:	e9 81       	ldd	r30, Y+1	; 0x01
    14e2:	fa 81       	ldd	r31, Y+2	; 0x02
    14e4:	83 81       	ldd	r24, Z+3	; 0x03
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	71 f4       	brne	.+28     	; 0x1506 <TIMER0_init+0xca>
		OCR0 = a_timerConfig->mode_data.ctc_compare_value;
    14ea:	ac e5       	ldi	r26, 0x5C	; 92
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e9 81       	ldd	r30, Y+1	; 0x01
    14f0:	fa 81       	ldd	r31, Y+2	; 0x02
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE0);
    14f8:	a9 e5       	ldi	r26, 0x59	; 89
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e9 e5       	ldi	r30, 0x59	; 89
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	82 60       	ori	r24, 0x02	; 2
    1504:	8c 93       	st	X, r24
	}

	TCCR0 = ((a_timerConfig->mode & 0x01) << WGM00) |(a_timerConfig->ocx_pin_behavior << COM00)\
    1506:	a3 e5       	ldi	r26, 0x53	; 83
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e9 81       	ldd	r30, Y+1	; 0x01
    150c:	fa 81       	ldd	r31, Y+2	; 0x02
    150e:	83 81       	ldd	r24, Z+3	; 0x03
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	81 70       	andi	r24, 0x01	; 1
    1516:	90 70       	andi	r25, 0x00	; 0
    1518:	00 24       	eor	r0, r0
    151a:	96 95       	lsr	r25
    151c:	87 95       	ror	r24
    151e:	07 94       	ror	r0
    1520:	96 95       	lsr	r25
    1522:	87 95       	ror	r24
    1524:	07 94       	ror	r0
    1526:	98 2f       	mov	r25, r24
    1528:	80 2d       	mov	r24, r0
    152a:	28 2f       	mov	r18, r24
    152c:	e9 81       	ldd	r30, Y+1	; 0x01
    152e:	fa 81       	ldd	r31, Y+2	; 0x02
    1530:	85 81       	ldd	r24, Z+5	; 0x05
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	82 95       	swap	r24
    1538:	92 95       	swap	r25
    153a:	90 7f       	andi	r25, 0xF0	; 240
    153c:	98 27       	eor	r25, r24
    153e:	80 7f       	andi	r24, 0xF0	; 240
    1540:	98 27       	eor	r25, r24
    1542:	28 2b       	or	r18, r24
    1544:	e9 81       	ldd	r30, Y+1	; 0x01
    1546:	fa 81       	ldd	r31, Y+2	; 0x02
    1548:	83 81       	ldd	r24, Z+3	; 0x03
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	82 70       	andi	r24, 0x02	; 2
    1550:	90 70       	andi	r25, 0x00	; 0
    1552:	95 95       	asr	r25
    1554:	87 95       	ror	r24
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	92 2f       	mov	r25, r18
    1564:	98 2b       	or	r25, r24
    1566:	e9 81       	ldd	r30, Y+1	; 0x01
    1568:	fa 81       	ldd	r31, Y+2	; 0x02
    156a:	84 81       	ldd	r24, Z+4	; 0x04
    156c:	87 70       	andi	r24, 0x07	; 7
    156e:	89 2b       	or	r24, r25
    1570:	8c 93       	st	X, r24
			| (GET_BIT(a_timerConfig->mode,1)<<WGM01) | ((a_timerConfig->prescaler.timer0 & 0x07) << CS00);

}
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	08 95       	ret

00001580 <TIMER1_init>:

static void TIMER1_init(TIMER_ConfigType * a_timerConfig){
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <TIMER1_init+0xa>
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = 0;
    1592:	ec e4       	ldi	r30, 0x4C	; 76
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	11 82       	std	Z+1, r1	; 0x01
    1598:	10 82       	st	Z, r1
	ICR1 = TOP_VALUE;
    159a:	e6 e4       	ldi	r30, 0x46	; 70
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8f ea       	ldi	r24, 0xAF	; 175
    15a0:	92 e1       	ldi	r25, 0x12	; 18
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	80 83       	st	Z, r24

	if(a_timerConfig->mode == PWM_MODE){
    15a6:	e9 81       	ldd	r30, Y+1	; 0x01
    15a8:	fa 81       	ldd	r31, Y+2	; 0x02
    15aa:	83 81       	ldd	r24, Z+3	; 0x03
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <TIMER1_init+0x32>
    15b0:	84 c0       	rjmp	.+264    	; 0x16ba <TIMER1_init+0x13a>
		if(a_timerConfig->timer1_pwm_pin_select == PIN_OC1A){
    15b2:	e9 81       	ldd	r30, Y+1	; 0x01
    15b4:	fa 81       	ldd	r31, Y+2	; 0x02
    15b6:	86 81       	ldd	r24, Z+6	; 0x06
    15b8:	88 23       	and	r24, r24
    15ba:	f1 f5       	brne	.+124    	; 0x1638 <TIMER1_init+0xb8>
			OCR1A = (((uint32)a_timerConfig->mode_data.pwm_duty_cycle * TOP_VALUE)/100);
    15bc:	0a e4       	ldi	r16, 0x4A	; 74
    15be:	10 e0       	ldi	r17, 0x00	; 0
    15c0:	e9 81       	ldd	r30, Y+1	; 0x01
    15c2:	fa 81       	ldd	r31, Y+2	; 0x02
    15c4:	80 81       	ld	r24, Z
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a0 e0       	ldi	r26, 0x00	; 0
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	2f ea       	ldi	r18, 0xAF	; 175
    15d0:	32 e1       	ldi	r19, 0x12	; 18
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	bc 01       	movw	r22, r24
    15d8:	cd 01       	movw	r24, r26
    15da:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__mulsi3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	24 e6       	ldi	r18, 0x64	; 100
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	bc 01       	movw	r22, r24
    15ec:	cd 01       	movw	r24, r26
    15ee:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
    15f2:	da 01       	movw	r26, r20
    15f4:	c9 01       	movw	r24, r18
    15f6:	f8 01       	movw	r30, r16
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
			TCCR1A |= (a_timerConfig->ocx_pin_behavior << COM1A0);
    15fc:	af e4       	ldi	r26, 0x4F	; 79
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	ef e4       	ldi	r30, 0x4F	; 79
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	28 2f       	mov	r18, r24
    1608:	e9 81       	ldd	r30, Y+1	; 0x01
    160a:	fa 81       	ldd	r31, Y+2	; 0x02
    160c:	85 81       	ldd	r24, Z+5	; 0x05
    160e:	88 2f       	mov	r24, r24
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	00 24       	eor	r0, r0
    1614:	96 95       	lsr	r25
    1616:	87 95       	ror	r24
    1618:	07 94       	ror	r0
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	07 94       	ror	r0
    1620:	98 2f       	mov	r25, r24
    1622:	80 2d       	mov	r24, r0
    1624:	82 2b       	or	r24, r18
    1626:	8c 93       	st	X, r24
			DDRD  |= (1 << OC1A);
    1628:	a1 e3       	ldi	r26, 0x31	; 49
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e1 e3       	ldi	r30, 0x31	; 49
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	80 62       	ori	r24, 0x20	; 32
    1634:	8c 93       	st	X, r24
    1636:	4f c0       	rjmp	.+158    	; 0x16d6 <TIMER1_init+0x156>
		}
		else if(a_timerConfig->timer1_pwm_pin_select == PIN_OC1B){
    1638:	e9 81       	ldd	r30, Y+1	; 0x01
    163a:	fa 81       	ldd	r31, Y+2	; 0x02
    163c:	86 81       	ldd	r24, Z+6	; 0x06
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	09 f0       	breq	.+2      	; 0x1644 <TIMER1_init+0xc4>
    1642:	49 c0       	rjmp	.+146    	; 0x16d6 <TIMER1_init+0x156>
			OCR1B = (((uint32)a_timerConfig->mode_data.pwm_duty_cycle * TOP_VALUE)/100);
    1644:	08 e4       	ldi	r16, 0x48	; 72
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	e9 81       	ldd	r30, Y+1	; 0x01
    164a:	fa 81       	ldd	r31, Y+2	; 0x02
    164c:	80 81       	ld	r24, Z
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a0 e0       	ldi	r26, 0x00	; 0
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	2f ea       	ldi	r18, 0xAF	; 175
    1658:	32 e1       	ldi	r19, 0x12	; 18
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	bc 01       	movw	r22, r24
    1660:	cd 01       	movw	r24, r26
    1662:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__mulsi3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	24 e6       	ldi	r18, 0x64	; 100
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	0e 94 17 18 	call	0x302e	; 0x302e <__udivmodsi4>
    167a:	da 01       	movw	r26, r20
    167c:	c9 01       	movw	r24, r18
    167e:	f8 01       	movw	r30, r16
    1680:	91 83       	std	Z+1, r25	; 0x01
    1682:	80 83       	st	Z, r24
			TCCR1A |= (a_timerConfig->ocx_pin_behavior << COM1B0);
    1684:	af e4       	ldi	r26, 0x4F	; 79
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	ef e4       	ldi	r30, 0x4F	; 79
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	28 2f       	mov	r18, r24
    1690:	e9 81       	ldd	r30, Y+1	; 0x01
    1692:	fa 81       	ldd	r31, Y+2	; 0x02
    1694:	85 81       	ldd	r24, Z+5	; 0x05
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	82 95       	swap	r24
    169c:	92 95       	swap	r25
    169e:	90 7f       	andi	r25, 0xF0	; 240
    16a0:	98 27       	eor	r25, r24
    16a2:	80 7f       	andi	r24, 0xF0	; 240
    16a4:	98 27       	eor	r25, r24
    16a6:	82 2b       	or	r24, r18
    16a8:	8c 93       	st	X, r24
			DDRD  |= (1 << OC1B);
    16aa:	a1 e3       	ldi	r26, 0x31	; 49
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e1 e3       	ldi	r30, 0x31	; 49
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	80 61       	ori	r24, 0x10	; 16
    16b6:	8c 93       	st	X, r24
    16b8:	0e c0       	rjmp	.+28     	; 0x16d6 <TIMER1_init+0x156>
		}
	}
	else{
		SET_BIT(TCCR1A,FOC1A);
    16ba:	af e4       	ldi	r26, 0x4F	; 79
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ef e4       	ldi	r30, 0x4F	; 79
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	88 60       	ori	r24, 0x08	; 8
    16c6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    16c8:	af e4       	ldi	r26, 0x4F	; 79
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ef e4       	ldi	r30, 0x4F	; 79
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	84 60       	ori	r24, 0x04	; 4
    16d4:	8c 93       	st	X, r24
	}

	if(a_timerConfig->mode == OVERFLOW_MODE){
    16d6:	e9 81       	ldd	r30, Y+1	; 0x01
    16d8:	fa 81       	ldd	r31, Y+2	; 0x02
    16da:	83 81       	ldd	r24, Z+3	; 0x03
    16dc:	88 23       	and	r24, r24
    16de:	89 f4       	brne	.+34     	; 0x1702 <TIMER1_init+0x182>
		SET_BIT(TIMSK,TOIE1);
    16e0:	a9 e5       	ldi	r26, 0x59	; 89
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e9 e5       	ldi	r30, 0x59	; 89
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	84 60       	ori	r24, 0x04	; 4
    16ec:	8c 93       	st	X, r24
		TCNT1 = a_timerConfig->mode_data.ovf_initial_value; //Set Timer Initial value
    16ee:	ac e4       	ldi	r26, 0x4C	; 76
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e9 81       	ldd	r30, Y+1	; 0x01
    16f4:	fa 81       	ldd	r31, Y+2	; 0x02
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	11 96       	adiw	r26, 0x01	; 1
    16fc:	9c 93       	st	X, r25
    16fe:	8e 93       	st	-X, r24
    1700:	15 c0       	rjmp	.+42     	; 0x172c <TIMER1_init+0x1ac>
	}
	else if(a_timerConfig->mode == COMPARE_MODE){
    1702:	e9 81       	ldd	r30, Y+1	; 0x01
    1704:	fa 81       	ldd	r31, Y+2	; 0x02
    1706:	83 81       	ldd	r24, Z+3	; 0x03
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	81 f4       	brne	.+32     	; 0x172c <TIMER1_init+0x1ac>
		OCR1A = a_timerConfig->mode_data.ctc_compare_value;
    170c:	aa e4       	ldi	r26, 0x4A	; 74
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e9 81       	ldd	r30, Y+1	; 0x01
    1712:	fa 81       	ldd	r31, Y+2	; 0x02
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	11 96       	adiw	r26, 0x01	; 1
    171a:	9c 93       	st	X, r25
    171c:	8e 93       	st	-X, r24
		SET_BIT(TIMSK,OCIE1A);
    171e:	a9 e5       	ldi	r26, 0x59	; 89
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e9 e5       	ldi	r30, 0x59	; 89
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 61       	ori	r24, 0x10	; 16
    172a:	8c 93       	st	X, r24
	}

	TCCR1A |= (GET_BIT(a_timerConfig->mode,0) << WGM11);
    172c:	af e4       	ldi	r26, 0x4F	; 79
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	ef e4       	ldi	r30, 0x4F	; 79
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	28 2f       	mov	r18, r24
    1738:	e9 81       	ldd	r30, Y+1	; 0x01
    173a:	fa 81       	ldd	r31, Y+2	; 0x02
    173c:	83 81       	ldd	r24, Z+3	; 0x03
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	81 70       	andi	r24, 0x01	; 1
    1744:	90 70       	andi	r25, 0x00	; 0
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	82 2b       	or	r24, r18
    174c:	8c 93       	st	X, r24
	TCCR1B = (GET_BIT(a_timerConfig->mode,0) << WGM13) | (GET_BIT(a_timerConfig->mode,1) << WGM12)\
    174e:	ae e4       	ldi	r26, 0x4E	; 78
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e9 81       	ldd	r30, Y+1	; 0x01
    1754:	fa 81       	ldd	r31, Y+2	; 0x02
    1756:	83 81       	ldd	r24, Z+3	; 0x03
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	81 70       	andi	r24, 0x01	; 1
    175e:	90 70       	andi	r25, 0x00	; 0
    1760:	82 95       	swap	r24
    1762:	92 95       	swap	r25
    1764:	90 7f       	andi	r25, 0xF0	; 240
    1766:	98 27       	eor	r25, r24
    1768:	80 7f       	andi	r24, 0xF0	; 240
    176a:	98 27       	eor	r25, r24
    176c:	28 2f       	mov	r18, r24
    176e:	e9 81       	ldd	r30, Y+1	; 0x01
    1770:	fa 81       	ldd	r31, Y+2	; 0x02
    1772:	83 81       	ldd	r24, Z+3	; 0x03
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	82 70       	andi	r24, 0x02	; 2
    177a:	90 70       	andi	r25, 0x00	; 0
    177c:	95 95       	asr	r25
    177e:	87 95       	ror	r24
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	92 2f       	mov	r25, r18
    178e:	98 2b       	or	r25, r24
    1790:	e9 81       	ldd	r30, Y+1	; 0x01
    1792:	fa 81       	ldd	r31, Y+2	; 0x02
    1794:	84 81       	ldd	r24, Z+4	; 0x04
    1796:	87 70       	andi	r24, 0x07	; 7
    1798:	89 2b       	or	r24, r25
    179a:	8c 93       	st	X, r24
			| ( (a_timerConfig->prescaler.timer1 & 0x07) << CS10);

}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	08 95       	ret

000017aa <TIMER2_init>:

static void TIMER2_init(TIMER_ConfigType * a_timerConfig){
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <TIMER2_init+0xa>
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0;
    17bc:	e4 e4       	ldi	r30, 0x44	; 68
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	10 82       	st	Z, r1

	if(a_timerConfig->mode == PWM_MODE){
    17c2:	e9 81       	ldd	r30, Y+1	; 0x01
    17c4:	fa 81       	ldd	r31, Y+2	; 0x02
    17c6:	83 81       	ldd	r24, Z+3	; 0x03
    17c8:	83 30       	cpi	r24, 0x03	; 3
    17ca:	29 f5       	brne	.+74     	; 0x1816 <TIMER2_init+0x6c>
		OCR2 = (((uint16)a_timerConfig->mode_data.pwm_duty_cycle * TIMER2_MAX_COUNT)/100);
    17cc:	03 e4       	ldi	r16, 0x43	; 67
    17ce:	10 e0       	ldi	r17, 0x00	; 0
    17d0:	e9 81       	ldd	r30, Y+1	; 0x01
    17d2:	fa 81       	ldd	r31, Y+2	; 0x02
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	50 e0       	ldi	r21, 0x00	; 0
    17da:	ca 01       	movw	r24, r20
    17dc:	9c 01       	movw	r18, r24
    17de:	22 0f       	add	r18, r18
    17e0:	33 1f       	adc	r19, r19
    17e2:	c9 01       	movw	r24, r18
    17e4:	96 95       	lsr	r25
    17e6:	98 2f       	mov	r25, r24
    17e8:	88 27       	eor	r24, r24
    17ea:	97 95       	ror	r25
    17ec:	87 95       	ror	r24
    17ee:	82 1b       	sub	r24, r18
    17f0:	93 0b       	sbc	r25, r19
    17f2:	84 0f       	add	r24, r20
    17f4:	95 1f       	adc	r25, r21
    17f6:	24 e6       	ldi	r18, 0x64	; 100
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	b9 01       	movw	r22, r18
    17fc:	0e 94 03 18 	call	0x3006	; 0x3006 <__udivmodhi4>
    1800:	cb 01       	movw	r24, r22
    1802:	f8 01       	movw	r30, r16
    1804:	80 83       	st	Z, r24
		DDRD  |= (1<<OC2);
    1806:	a1 e3       	ldi	r26, 0x31	; 49
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e1 e3       	ldi	r30, 0x31	; 49
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 68       	ori	r24, 0x80	; 128
    1812:	8c 93       	st	X, r24
    1814:	07 c0       	rjmp	.+14     	; 0x1824 <TIMER2_init+0x7a>
	}
	else{
		SET_BIT(TCCR2,FOC2);
    1816:	a5 e4       	ldi	r26, 0x45	; 69
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e5 e4       	ldi	r30, 0x45	; 69
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 68       	ori	r24, 0x80	; 128
    1822:	8c 93       	st	X, r24
	}

	if(a_timerConfig->mode == OVERFLOW_MODE){
    1824:	e9 81       	ldd	r30, Y+1	; 0x01
    1826:	fa 81       	ldd	r31, Y+2	; 0x02
    1828:	83 81       	ldd	r24, Z+3	; 0x03
    182a:	88 23       	and	r24, r24
    182c:	81 f4       	brne	.+32     	; 0x184e <TIMER2_init+0xa4>
		SET_BIT(TIMSK,TOIE2);
    182e:	a9 e5       	ldi	r26, 0x59	; 89
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e9 e5       	ldi	r30, 0x59	; 89
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	80 64       	ori	r24, 0x40	; 64
    183a:	8c 93       	st	X, r24
		TCNT2 = a_timerConfig->mode_data.ovf_initial_value & 0x0F; //Set Timer Initial value
    183c:	a4 e4       	ldi	r26, 0x44	; 68
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e9 81       	ldd	r30, Y+1	; 0x01
    1842:	fa 81       	ldd	r31, Y+2	; 0x02
    1844:	80 81       	ld	r24, Z
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	8f 70       	andi	r24, 0x0F	; 15
    184a:	8c 93       	st	X, r24
    184c:	13 c0       	rjmp	.+38     	; 0x1874 <TIMER2_init+0xca>
	}
	else if(a_timerConfig->mode == COMPARE_MODE){
    184e:	e9 81       	ldd	r30, Y+1	; 0x01
    1850:	fa 81       	ldd	r31, Y+2	; 0x02
    1852:	83 81       	ldd	r24, Z+3	; 0x03
    1854:	82 30       	cpi	r24, 0x02	; 2
    1856:	71 f4       	brne	.+28     	; 0x1874 <TIMER2_init+0xca>
		OCR2 = a_timerConfig->mode_data.ctc_compare_value;
    1858:	a3 e4       	ldi	r26, 0x43	; 67
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e9 81       	ldd	r30, Y+1	; 0x01
    185e:	fa 81       	ldd	r31, Y+2	; 0x02
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE2);
    1866:	a9 e5       	ldi	r26, 0x59	; 89
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e9 e5       	ldi	r30, 0x59	; 89
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	80 68       	ori	r24, 0x80	; 128
    1872:	8c 93       	st	X, r24
	}

	TCCR2 = ((a_timerConfig->mode & 0x01) << WGM20) |(a_timerConfig->ocx_pin_behavior << COM20)\
    1874:	a5 e4       	ldi	r26, 0x45	; 69
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e9 81       	ldd	r30, Y+1	; 0x01
    187a:	fa 81       	ldd	r31, Y+2	; 0x02
    187c:	83 81       	ldd	r24, Z+3	; 0x03
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	81 70       	andi	r24, 0x01	; 1
    1884:	90 70       	andi	r25, 0x00	; 0
    1886:	00 24       	eor	r0, r0
    1888:	96 95       	lsr	r25
    188a:	87 95       	ror	r24
    188c:	07 94       	ror	r0
    188e:	96 95       	lsr	r25
    1890:	87 95       	ror	r24
    1892:	07 94       	ror	r0
    1894:	98 2f       	mov	r25, r24
    1896:	80 2d       	mov	r24, r0
    1898:	28 2f       	mov	r18, r24
    189a:	e9 81       	ldd	r30, Y+1	; 0x01
    189c:	fa 81       	ldd	r31, Y+2	; 0x02
    189e:	85 81       	ldd	r24, Z+5	; 0x05
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	82 95       	swap	r24
    18a6:	92 95       	swap	r25
    18a8:	90 7f       	andi	r25, 0xF0	; 240
    18aa:	98 27       	eor	r25, r24
    18ac:	80 7f       	andi	r24, 0xF0	; 240
    18ae:	98 27       	eor	r25, r24
    18b0:	28 2b       	or	r18, r24
    18b2:	e9 81       	ldd	r30, Y+1	; 0x01
    18b4:	fa 81       	ldd	r31, Y+2	; 0x02
    18b6:	83 81       	ldd	r24, Z+3	; 0x03
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	82 70       	andi	r24, 0x02	; 2
    18be:	90 70       	andi	r25, 0x00	; 0
    18c0:	95 95       	asr	r25
    18c2:	87 95       	ror	r24
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	92 2f       	mov	r25, r18
    18d2:	98 2b       	or	r25, r24
    18d4:	e9 81       	ldd	r30, Y+1	; 0x01
    18d6:	fa 81       	ldd	r31, Y+2	; 0x02
    18d8:	84 81       	ldd	r24, Z+4	; 0x04
    18da:	87 70       	andi	r24, 0x07	; 7
    18dc:	89 2b       	or	r24, r25
    18de:	8c 93       	st	X, r24
			| (GET_BIT(a_timerConfig->mode,1)<<WGM21) | ((a_timerConfig->prescaler.timer2 & 0x07) << CS20);

}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	08 95       	ret

000018ee <TIMER0_deInit>:

static void TIMER0_deInit(){
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    18f6:	e3 e5       	ldi	r30, 0x53	; 83
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	10 82       	st	Z, r1
	TCNT0 = 0;
    18fc:	e2 e5       	ldi	r30, 0x52	; 82
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	10 82       	st	Z, r1
	OCR0  = 0;
    1902:	ec e5       	ldi	r30, 0x5C	; 92
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    1908:	a9 e5       	ldi	r26, 0x59	; 89
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e9 e5       	ldi	r30, 0x59	; 89
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	8d 7f       	andi	r24, 0xFD	; 253
    1914:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    1916:	a9 e5       	ldi	r26, 0x59	; 89
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e9 e5       	ldi	r30, 0x59	; 89
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	8e 7f       	andi	r24, 0xFE	; 254
    1922:	8c 93       	st	X, r24
}
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <TIMER1_deInit>:

static void TIMER1_deInit(){
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1932:	ef e4       	ldi	r30, 0x4F	; 79
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	10 82       	st	Z, r1
	TCCR1B = 0;
    1938:	ee e4       	ldi	r30, 0x4E	; 78
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	10 82       	st	Z, r1
	TCNT1 = 0;
    193e:	ec e4       	ldi	r30, 0x4C	; 76
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	11 82       	std	Z+1, r1	; 0x01
    1944:	10 82       	st	Z, r1
	OCR1A = 0;
    1946:	ea e4       	ldi	r30, 0x4A	; 74
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	11 82       	std	Z+1, r1	; 0x01
    194c:	10 82       	st	Z, r1
	OCR1B = 0;
    194e:	e8 e4       	ldi	r30, 0x48	; 72
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	11 82       	std	Z+1, r1	; 0x01
    1954:	10 82       	st	Z, r1
	ICR1 = 0;
    1956:	e6 e4       	ldi	r30, 0x46	; 70
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	11 82       	std	Z+1, r1	; 0x01
    195c:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
    195e:	a9 e5       	ldi	r26, 0x59	; 89
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e9 e5       	ldi	r30, 0x59	; 89
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8f 7e       	andi	r24, 0xEF	; 239
    196a:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1B);
    196c:	a9 e5       	ldi	r26, 0x59	; 89
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e9 e5       	ldi	r30, 0x59	; 89
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	87 7f       	andi	r24, 0xF7	; 247
    1978:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    197a:	a9 e5       	ldi	r26, 0x59	; 89
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e9 e5       	ldi	r30, 0x59	; 89
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	8e 7f       	andi	r24, 0xFE	; 254
    1986:	8c 93       	st	X, r24
}
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <TIMER2_deInit>:

static void TIMER2_deInit(){
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    1996:	e5 e4       	ldi	r30, 0x45	; 69
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	10 82       	st	Z, r1
	TCNT2 = 0;
    199c:	e4 e4       	ldi	r30, 0x44	; 68
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	10 82       	st	Z, r1
	OCR2  = 0;
    19a2:	e3 e4       	ldi	r30, 0x43	; 67
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE2);
    19a8:	a9 e5       	ldi	r26, 0x59	; 89
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e9 e5       	ldi	r30, 0x59	; 89
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 77       	andi	r24, 0x7F	; 127
    19b4:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE2);
    19b6:	a9 e5       	ldi	r26, 0x59	; 89
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e9 e5       	ldi	r30, 0x59	; 89
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8f 7b       	andi	r24, 0xBF	; 191
    19c2:	8c 93       	st	X, r24
}
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <TWI_init>:
/*******************************************************************************
 *                     		 Functions Definitions                             *
 *******************************************************************************/

void TWI_init(TWI_ConfigType * a_twiConfig)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <TWI_init+0x6>
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
	TWSR = (a_twiConfig->twi_prescaler << TWPS0); 		/* configure the prescaler */
    19d8:	a1 e2       	ldi	r26, 0x21	; 33
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e9 81       	ldd	r30, Y+1	; 0x01
    19de:	fa 81       	ldd	r31, Y+2	; 0x02
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	8c 93       	st	X, r24
	TWBR = a_twiConfig->twi_bit_rate;					/* configure the bit rate */
    19e4:	a0 e2       	ldi	r26, 0x20	; 32
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ea:	fa 81       	ldd	r31, Y+2	; 0x02
    19ec:	81 81       	ldd	r24, Z+1	; 0x01
    19ee:	8c 93       	st	X, r24
	TWAR = (a_twiConfig->twi_slave_address << TWA0);	/* configure device slave address */
    19f0:	a2 e2       	ldi	r26, 0x22	; 34
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e9 81       	ldd	r30, Y+1	; 0x01
    19f6:	fa 81       	ldd	r31, Y+2	; 0x02
    19f8:	80 81       	ld	r24, Z
    19fa:	88 0f       	add	r24, r24
    19fc:	8c 93       	st	X, r24

	TWCR = (1<< TWEN);	 /* enable TWI */
    19fe:	e6 e5       	ldi	r30, 0x56	; 86
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	84 e0       	ldi	r24, 0x04	; 4
    1a04:	80 83       	st	Z, r24
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <TWI_start>:

void TWI_start(void)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1a18:	e6 e5       	ldi	r30, 0x56	; 86
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	84 ea       	ldi	r24, 0xA4	; 164
    1a1e:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1a20:	e6 e5       	ldi	r30, 0x56	; 86
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	88 23       	and	r24, r24
    1a28:	dc f7       	brge	.-10     	; 0x1a20 <TWI_start+0x10>
}
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <TWI_stop>:

void TWI_stop(void)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1a38:	e6 e5       	ldi	r30, 0x56	; 86
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	84 e9       	ldi	r24, 0x94	; 148
    1a3e:	80 83       	st	Z, r24
}
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	0f 92       	push	r0
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1a52:	e3 e2       	ldi	r30, 0x23	; 35
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1a5a:	e6 e5       	ldi	r30, 0x56	; 86
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	84 e8       	ldi	r24, 0x84	; 132
    1a60:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a62:	e6 e5       	ldi	r30, 0x56	; 86
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	88 23       	and	r24, r24
    1a6a:	dc f7       	brge	.-10     	; 0x1a62 <TWI_writeByte+0x1c>
}
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1a7c:	e6 e5       	ldi	r30, 0x56	; 86
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	84 ec       	ldi	r24, 0xC4	; 196
    1a82:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a84:	e6 e5       	ldi	r30, 0x56	; 86
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	88 23       	and	r24, r24
    1a8c:	dc f7       	brge	.-10     	; 0x1a84 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1a8e:	e3 e2       	ldi	r30, 0x23	; 35
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1aa2:	e6 e5       	ldi	r30, 0x56	; 86
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	84 e8       	ldi	r24, 0x84	; 132
    1aa8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1aaa:	e6 e5       	ldi	r30, 0x56	; 86
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	88 23       	and	r24, r24
    1ab2:	dc f7       	brge	.-10     	; 0x1aaa <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1ab4:	e3 e2       	ldi	r30, 0x23	; 35
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1aca:	e1 e2       	ldi	r30, 0x21	; 33
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 7f       	andi	r24, 0xF8	; 248
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, the function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <GPIO_setupPinDirection+0x6>
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <GPIO_setupPinDirection+0x8>
    1ae6:	0f 92       	push	r0
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	6a 83       	std	Y+2, r22	; 0x02
    1af0:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	84 30       	cpi	r24, 0x04	; 4
    1af6:	08 f0       	brcs	.+2      	; 0x1afa <GPIO_setupPinDirection+0x1c>
    1af8:	d5 c0       	rjmp	.+426    	; 0x1ca4 <GPIO_setupPinDirection+0x1c6>
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	89 30       	cpi	r24, 0x09	; 9
    1afe:	08 f0       	brcs	.+2      	; 0x1b02 <GPIO_setupPinDirection+0x24>
    1b00:	d1 c0       	rjmp	.+418    	; 0x1ca4 <GPIO_setupPinDirection+0x1c6>
		/*Do nothing if the pin or port numbers are greater than or equal the maximum allowed number */
	}
	else{
		/*Configure the specified pin as input/output*/
		switch(port_num){
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3d 83       	std	Y+5, r19	; 0x05
    1b0a:	2c 83       	std	Y+4, r18	; 0x04
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	91 05       	cpc	r25, r1
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <GPIO_setupPinDirection+0x3a>
    1b16:	43 c0       	rjmp	.+134    	; 0x1b9e <GPIO_setupPinDirection+0xc0>
    1b18:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1c:	22 30       	cpi	r18, 0x02	; 2
    1b1e:	31 05       	cpc	r19, r1
    1b20:	2c f4       	brge	.+10     	; 0x1b2c <GPIO_setupPinDirection+0x4e>
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	71 f0       	breq	.+28     	; 0x1b46 <GPIO_setupPinDirection+0x68>
    1b2a:	bc c0       	rjmp	.+376    	; 0x1ca4 <GPIO_setupPinDirection+0x1c6>
    1b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <GPIO_setupPinDirection+0x5a>
    1b36:	5f c0       	rjmp	.+190    	; 0x1bf6 <GPIO_setupPinDirection+0x118>
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	83 30       	cpi	r24, 0x03	; 3
    1b3e:	91 05       	cpc	r25, r1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <GPIO_setupPinDirection+0x66>
    1b42:	85 c0       	rjmp	.+266    	; 0x1c4e <GPIO_setupPinDirection+0x170>
    1b44:	af c0       	rjmp	.+350    	; 0x1ca4 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if(direction == PIN_OUTPUT){
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	a1 f4       	brne	.+40     	; 0x1b74 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    1b4c:	aa e3       	ldi	r26, 0x3A	; 58
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	ea e3       	ldi	r30, 0x3A	; 58
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	48 2f       	mov	r20, r24
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	02 2e       	mov	r0, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <GPIO_setupPinDirection+0x8c>
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	0a 94       	dec	r0
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <GPIO_setupPinDirection+0x88>
    1b6e:	84 2b       	or	r24, r20
    1b70:	8c 93       	st	X, r24
    1b72:	98 c0       	rjmp	.+304    	; 0x1ca4 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRA,pin_num);
    1b74:	aa e3       	ldi	r26, 0x3A	; 58
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	ea e3       	ldi	r30, 0x3A	; 58
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	48 2f       	mov	r20, r24
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	02 2e       	mov	r0, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <GPIO_setupPinDirection+0xb4>
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	0a 94       	dec	r0
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <GPIO_setupPinDirection+0xb0>
    1b96:	80 95       	com	r24
    1b98:	84 23       	and	r24, r20
    1b9a:	8c 93       	st	X, r24
    1b9c:	83 c0       	rjmp	.+262    	; 0x1ca4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT){
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	a1 f4       	brne	.+40     	; 0x1bcc <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    1ba4:	a7 e3       	ldi	r26, 0x37	; 55
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e7 e3       	ldi	r30, 0x37	; 55
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	48 2f       	mov	r20, r24
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	02 2e       	mov	r0, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <GPIO_setupPinDirection+0xe4>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	0a 94       	dec	r0
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <GPIO_setupPinDirection+0xe0>
    1bc6:	84 2b       	or	r24, r20
    1bc8:	8c 93       	st	X, r24
    1bca:	6c c0       	rjmp	.+216    	; 0x1ca4 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRB,pin_num);
    1bcc:	a7 e3       	ldi	r26, 0x37	; 55
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e7 e3       	ldi	r30, 0x37	; 55
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 2e       	mov	r0, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <GPIO_setupPinDirection+0x10c>
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	0a 94       	dec	r0
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <GPIO_setupPinDirection+0x108>
    1bee:	80 95       	com	r24
    1bf0:	84 23       	and	r24, r20
    1bf2:	8c 93       	st	X, r24
    1bf4:	57 c0       	rjmp	.+174    	; 0x1ca4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT){
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	a1 f4       	brne	.+40     	; 0x1c24 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    1bfc:	a4 e3       	ldi	r26, 0x34	; 52
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e4 e3       	ldi	r30, 0x34	; 52
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <GPIO_setupPinDirection+0x13c>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <GPIO_setupPinDirection+0x138>
    1c1e:	84 2b       	or	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	40 c0       	rjmp	.+128    	; 0x1ca4 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRC,pin_num);
    1c24:	a4 e3       	ldi	r26, 0x34	; 52
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e4 e3       	ldi	r30, 0x34	; 52
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <GPIO_setupPinDirection+0x164>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <GPIO_setupPinDirection+0x160>
    1c46:	80 95       	com	r24
    1c48:	84 23       	and	r24, r20
    1c4a:	8c 93       	st	X, r24
    1c4c:	2b c0       	rjmp	.+86     	; 0x1ca4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT){
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	a1 f4       	brne	.+40     	; 0x1c7c <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    1c54:	a1 e3       	ldi	r26, 0x31	; 49
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e1 e3       	ldi	r30, 0x31	; 49
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	48 2f       	mov	r20, r24
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 2e       	mov	r0, r18
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <GPIO_setupPinDirection+0x194>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	0a 94       	dec	r0
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <GPIO_setupPinDirection+0x190>
    1c76:	84 2b       	or	r24, r20
    1c78:	8c 93       	st	X, r24
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRD,pin_num);
    1c7c:	a1 e3       	ldi	r26, 0x31	; 49
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e1 e3       	ldi	r30, 0x31	; 49
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <GPIO_setupPinDirection+0x1bc>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <GPIO_setupPinDirection+0x1b8>
    1c9e:	80 95       	com	r24
    1ca0:	84 23       	and	r24, r20
    1ca2:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <GPIO_writePin+0x6>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <GPIO_writePin+0x8>
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	6a 83       	std	Y+2, r22	; 0x02
    1cc6:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num > NUM_OF_PINS_PER_PORT)){
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	84 30       	cpi	r24, 0x04	; 4
    1ccc:	08 f0       	brcs	.+2      	; 0x1cd0 <GPIO_writePin+0x1c>
    1cce:	d5 c0       	rjmp	.+426    	; 0x1e7a <GPIO_writePin+0x1c6>
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	89 30       	cpi	r24, 0x09	; 9
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <GPIO_writePin+0x24>
    1cd6:	d1 c0       	rjmp	.+418    	; 0x1e7a <GPIO_writePin+0x1c6>
		/*Do nothing if the pin or port numbers are greater than or equal the maximum allowed number */
	}
	else{
		/*Set/Clear the specified pin as required*/
		switch (port_num){
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3d 83       	std	Y+5, r19	; 0x05
    1ce0:	2c 83       	std	Y+4, r18	; 0x04
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	91 05       	cpc	r25, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <GPIO_writePin+0x3a>
    1cec:	43 c0       	rjmp	.+134    	; 0x1d74 <GPIO_writePin+0xc0>
    1cee:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf2:	22 30       	cpi	r18, 0x02	; 2
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	2c f4       	brge	.+10     	; 0x1d02 <GPIO_writePin+0x4e>
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	71 f0       	breq	.+28     	; 0x1d1c <GPIO_writePin+0x68>
    1d00:	bc c0       	rjmp	.+376    	; 0x1e7a <GPIO_writePin+0x1c6>
    1d02:	2c 81       	ldd	r18, Y+4	; 0x04
    1d04:	3d 81       	ldd	r19, Y+5	; 0x05
    1d06:	22 30       	cpi	r18, 0x02	; 2
    1d08:	31 05       	cpc	r19, r1
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <GPIO_writePin+0x5a>
    1d0c:	5f c0       	rjmp	.+190    	; 0x1dcc <GPIO_writePin+0x118>
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d10:	9d 81       	ldd	r25, Y+5	; 0x05
    1d12:	83 30       	cpi	r24, 0x03	; 3
    1d14:	91 05       	cpc	r25, r1
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <GPIO_writePin+0x66>
    1d18:	85 c0       	rjmp	.+266    	; 0x1e24 <GPIO_writePin+0x170>
    1d1a:	af c0       	rjmp	.+350    	; 0x1e7a <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value == LOGIC_HIGH){
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	a1 f4       	brne	.+40     	; 0x1d4a <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1d22:	ab e3       	ldi	r26, 0x3B	; 59
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	eb e3       	ldi	r30, 0x3B	; 59
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 2e       	mov	r0, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <GPIO_writePin+0x8c>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	0a 94       	dec	r0
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <GPIO_writePin+0x88>
    1d44:	84 2b       	or	r24, r20
    1d46:	8c 93       	st	X, r24
    1d48:	98 c0       	rjmp	.+304    	; 0x1e7a <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    1d4a:	ab e3       	ldi	r26, 0x3B	; 59
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	eb e3       	ldi	r30, 0x3B	; 59
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	48 2f       	mov	r20, r24
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 2e       	mov	r0, r18
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <GPIO_writePin+0xb4>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	0a 94       	dec	r0
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <GPIO_writePin+0xb0>
    1d6c:	80 95       	com	r24
    1d6e:	84 23       	and	r24, r20
    1d70:	8c 93       	st	X, r24
    1d72:	83 c0       	rjmp	.+262    	; 0x1e7a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH){
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	a1 f4       	brne	.+40     	; 0x1da2 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    1d7a:	a8 e3       	ldi	r26, 0x38	; 56
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e8 e3       	ldi	r30, 0x38	; 56
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	48 2f       	mov	r20, r24
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 2e       	mov	r0, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <GPIO_writePin+0xe4>
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	0a 94       	dec	r0
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <GPIO_writePin+0xe0>
    1d9c:	84 2b       	or	r24, r20
    1d9e:	8c 93       	st	X, r24
    1da0:	6c c0       	rjmp	.+216    	; 0x1e7a <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
    1da2:	a8 e3       	ldi	r26, 0x38	; 56
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e8 e3       	ldi	r30, 0x38	; 56
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <GPIO_writePin+0x10c>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <GPIO_writePin+0x108>
    1dc4:	80 95       	com	r24
    1dc6:	84 23       	and	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	57 c0       	rjmp	.+174    	; 0x1e7a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH){
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	a1 f4       	brne	.+40     	; 0x1dfa <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1dd2:	a5 e3       	ldi	r26, 0x35	; 53
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e5 e3       	ldi	r30, 0x35	; 53
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <GPIO_writePin+0x13c>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <GPIO_writePin+0x138>
    1df4:	84 2b       	or	r24, r20
    1df6:	8c 93       	st	X, r24
    1df8:	40 c0       	rjmp	.+128    	; 0x1e7a <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTC,pin_num);
    1dfa:	a5 e3       	ldi	r26, 0x35	; 53
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e5 e3       	ldi	r30, 0x35	; 53
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <GPIO_writePin+0x164>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <GPIO_writePin+0x160>
    1e1c:	80 95       	com	r24
    1e1e:	84 23       	and	r24, r20
    1e20:	8c 93       	st	X, r24
    1e22:	2b c0       	rjmp	.+86     	; 0x1e7a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH){
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	a1 f4       	brne	.+40     	; 0x1e52 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1e2a:	a2 e3       	ldi	r26, 0x32	; 50
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e2 e3       	ldi	r30, 0x32	; 50
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	48 2f       	mov	r20, r24
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 2e       	mov	r0, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <GPIO_writePin+0x194>
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	0a 94       	dec	r0
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <GPIO_writePin+0x190>
    1e4c:	84 2b       	or	r24, r20
    1e4e:	8c 93       	st	X, r24
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
    1e52:	a2 e3       	ldi	r26, 0x32	; 50
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e2 e3       	ldi	r30, 0x32	; 50
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <GPIO_writePin+0x1bc>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <GPIO_writePin+0x1b8>
    1e74:	80 95       	com	r24
    1e76:	84 23       	and	r24, r20
    1e78:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <GPIO_readPin+0x6>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <GPIO_readPin+0x8>
    1e92:	0f 92       	push	r0
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS) || (pin_num > NUM_OF_PINS_PER_PORT)){
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	84 30       	cpi	r24, 0x04	; 4
    1ea0:	18 f4       	brcc	.+6      	; 0x1ea8 <GPIO_readPin+0x1e>
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	89 30       	cpi	r24, 0x09	; 9
    1ea6:	10 f0       	brcs	.+4      	; 0x1eac <GPIO_readPin+0x22>
		/* return Logic low if the port number is greater than or equal the maximum allowed number */
	return LOGIC_LOW;
    1ea8:	1d 82       	std	Y+5, r1	; 0x05
    1eaa:	9b c0       	rjmp	.+310    	; 0x1fe2 <GPIO_readPin+0x158>
	}

	else{
		/* Read the pin value as required */
		switch(port_num)
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	3c 83       	std	Y+4, r19	; 0x04
    1eb4:	2b 83       	std	Y+3, r18	; 0x03
    1eb6:	4b 81       	ldd	r20, Y+3	; 0x03
    1eb8:	5c 81       	ldd	r21, Y+4	; 0x04
    1eba:	41 30       	cpi	r20, 0x01	; 1
    1ebc:	51 05       	cpc	r21, r1
    1ebe:	b1 f1       	breq	.+108    	; 0x1f2c <GPIO_readPin+0xa2>
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	34 f4       	brge	.+12     	; 0x1ed6 <GPIO_readPin+0x4c>
    1eca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ece:	21 15       	cp	r18, r1
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	71 f0       	breq	.+28     	; 0x1ef0 <GPIO_readPin+0x66>
    1ed4:	85 c0       	rjmp	.+266    	; 0x1fe0 <GPIO_readPin+0x156>
    1ed6:	4b 81       	ldd	r20, Y+3	; 0x03
    1ed8:	5c 81       	ldd	r21, Y+4	; 0x04
    1eda:	42 30       	cpi	r20, 0x02	; 2
    1edc:	51 05       	cpc	r21, r1
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <GPIO_readPin+0x58>
    1ee0:	43 c0       	rjmp	.+134    	; 0x1f68 <GPIO_readPin+0xde>
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	83 30       	cpi	r24, 0x03	; 3
    1ee8:	91 05       	cpc	r25, r1
    1eea:	09 f4       	brne	.+2      	; 0x1eee <GPIO_readPin+0x64>
    1eec:	5b c0       	rjmp	.+182    	; 0x1fa4 <GPIO_readPin+0x11a>
    1eee:	78 c0       	rjmp	.+240    	; 0x1fe0 <GPIO_readPin+0x156>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    1ef0:	e9 e3       	ldi	r30, 0x39	; 57
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <GPIO_readPin+0x80>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	2a 95       	dec	r18
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <GPIO_readPin+0x7c>
    1f0e:	9a 01       	movw	r18, r20
    1f10:	28 23       	and	r18, r24
    1f12:	39 23       	and	r19, r25
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a9 01       	movw	r20, r18
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <GPIO_readPin+0x98>
    1f1e:	55 95       	asr	r21
    1f20:	47 95       	ror	r20
    1f22:	8a 95       	dec	r24
    1f24:	e2 f7       	brpl	.-8      	; 0x1f1e <GPIO_readPin+0x94>
    1f26:	ca 01       	movw	r24, r20
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	5b c0       	rjmp	.+182    	; 0x1fe2 <GPIO_readPin+0x158>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    1f2c:	e6 e3       	ldi	r30, 0x36	; 54
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	48 2f       	mov	r20, r24
    1f34:	50 e0       	ldi	r21, 0x00	; 0
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <GPIO_readPin+0xbc>
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	2a 95       	dec	r18
    1f48:	e2 f7       	brpl	.-8      	; 0x1f42 <GPIO_readPin+0xb8>
    1f4a:	9a 01       	movw	r18, r20
    1f4c:	28 23       	and	r18, r24
    1f4e:	39 23       	and	r19, r25
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a9 01       	movw	r20, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <GPIO_readPin+0xd4>
    1f5a:	55 95       	asr	r21
    1f5c:	47 95       	ror	r20
    1f5e:	8a 95       	dec	r24
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <GPIO_readPin+0xd0>
    1f62:	ca 01       	movw	r24, r20
    1f64:	8d 83       	std	Y+5, r24	; 0x05
    1f66:	3d c0       	rjmp	.+122    	; 0x1fe2 <GPIO_readPin+0x158>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    1f68:	e3 e3       	ldi	r30, 0x33	; 51
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	50 e0       	ldi	r21, 0x00	; 0
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <GPIO_readPin+0xf8>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	2a 95       	dec	r18
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <GPIO_readPin+0xf4>
    1f86:	9a 01       	movw	r18, r20
    1f88:	28 23       	and	r18, r24
    1f8a:	39 23       	and	r19, r25
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a9 01       	movw	r20, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <GPIO_readPin+0x110>
    1f96:	55 95       	asr	r21
    1f98:	47 95       	ror	r20
    1f9a:	8a 95       	dec	r24
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <GPIO_readPin+0x10c>
    1f9e:	ca 01       	movw	r24, r20
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	1f c0       	rjmp	.+62     	; 0x1fe2 <GPIO_readPin+0x158>
		case PORTD_ID:
			return GET_BIT(PIND,pin_num);
    1fa4:	e0 e3       	ldi	r30, 0x30	; 48
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	48 2f       	mov	r20, r24
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <GPIO_readPin+0x134>
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	2a 95       	dec	r18
    1fc0:	e2 f7       	brpl	.-8      	; 0x1fba <GPIO_readPin+0x130>
    1fc2:	9a 01       	movw	r18, r20
    1fc4:	28 23       	and	r18, r24
    1fc6:	39 23       	and	r19, r25
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a9 01       	movw	r20, r18
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <GPIO_readPin+0x14c>
    1fd2:	55 95       	asr	r21
    1fd4:	47 95       	ror	r20
    1fd6:	8a 95       	dec	r24
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <GPIO_readPin+0x148>
    1fda:	ca 01       	movw	r24, r20
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <GPIO_readPin+0x158>
		}
	}
	return LOGIC_LOW;
    1fe0:	1d 82       	std	Y+5, r1	; 0x05
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PinDirectionType direction){
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <GPIO_setupPortDirection+0x6>
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <GPIO_setupPortDirection+0x8>
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS){
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	84 30       	cpi	r24, 0x04	; 4
    2008:	90 f5       	brcc	.+100    	; 0x206e <GPIO_setupPortDirection+0x7a>
		/*Do nothing if the port number is greater than or equal the maximum allowed number */
	}
	else{
		/* Setup the port direction as required */
		switch(port_num){
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	3c 83       	std	Y+4, r19	; 0x04
    2012:	2b 83       	std	Y+3, r18	; 0x03
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	91 05       	cpc	r25, r1
    201c:	d1 f0       	breq	.+52     	; 0x2052 <GPIO_setupPortDirection+0x5e>
    201e:	2b 81       	ldd	r18, Y+3	; 0x03
    2020:	3c 81       	ldd	r19, Y+4	; 0x04
    2022:	22 30       	cpi	r18, 0x02	; 2
    2024:	31 05       	cpc	r19, r1
    2026:	2c f4       	brge	.+10     	; 0x2032 <GPIO_setupPortDirection+0x3e>
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	61 f0       	breq	.+24     	; 0x2048 <GPIO_setupPortDirection+0x54>
    2030:	1e c0       	rjmp	.+60     	; 0x206e <GPIO_setupPortDirection+0x7a>
    2032:	2b 81       	ldd	r18, Y+3	; 0x03
    2034:	3c 81       	ldd	r19, Y+4	; 0x04
    2036:	22 30       	cpi	r18, 0x02	; 2
    2038:	31 05       	cpc	r19, r1
    203a:	81 f0       	breq	.+32     	; 0x205c <GPIO_setupPortDirection+0x68>
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	83 30       	cpi	r24, 0x03	; 3
    2042:	91 05       	cpc	r25, r1
    2044:	81 f0       	breq	.+32     	; 0x2066 <GPIO_setupPortDirection+0x72>
    2046:	13 c0       	rjmp	.+38     	; 0x206e <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    2048:	ea e3       	ldi	r30, 0x3A	; 58
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	80 83       	st	Z, r24
    2050:	0e c0       	rjmp	.+28     	; 0x206e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2052:	e7 e3       	ldi	r30, 0x37	; 55
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	80 83       	st	Z, r24
    205a:	09 c0       	rjmp	.+18     	; 0x206e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    205c:	e4 e3       	ldi	r30, 0x34	; 52
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	80 83       	st	Z, r24
    2064:	04 c0       	rjmp	.+8      	; 0x206e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2066:	e1 e3       	ldi	r30, 0x31	; 49
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	80 83       	st	Z, r24
			break;
		}
	}
}
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value){
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	00 d0       	rcall	.+0      	; 0x2082 <GPIO_writePort+0x6>
    2082:	00 d0       	rcall	.+0      	; 0x2084 <GPIO_writePort+0x8>
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	89 83       	std	Y+1, r24	; 0x01
    208a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>=NUM_OF_PORTS){
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	84 30       	cpi	r24, 0x04	; 4
    2090:	90 f5       	brcc	.+100    	; 0x20f6 <GPIO_writePort+0x7a>
		/*Do nothing if the port number is greater than or equal the maximum allowed number */
	}
	else{
		switch(port_num){
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	3c 83       	std	Y+4, r19	; 0x04
    209a:	2b 83       	std	Y+3, r18	; 0x03
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	9c 81       	ldd	r25, Y+4	; 0x04
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	91 05       	cpc	r25, r1
    20a4:	d1 f0       	breq	.+52     	; 0x20da <GPIO_writePort+0x5e>
    20a6:	2b 81       	ldd	r18, Y+3	; 0x03
    20a8:	3c 81       	ldd	r19, Y+4	; 0x04
    20aa:	22 30       	cpi	r18, 0x02	; 2
    20ac:	31 05       	cpc	r19, r1
    20ae:	2c f4       	brge	.+10     	; 0x20ba <GPIO_writePort+0x3e>
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	61 f0       	breq	.+24     	; 0x20d0 <GPIO_writePort+0x54>
    20b8:	1e c0       	rjmp	.+60     	; 0x20f6 <GPIO_writePort+0x7a>
    20ba:	2b 81       	ldd	r18, Y+3	; 0x03
    20bc:	3c 81       	ldd	r19, Y+4	; 0x04
    20be:	22 30       	cpi	r18, 0x02	; 2
    20c0:	31 05       	cpc	r19, r1
    20c2:	81 f0       	breq	.+32     	; 0x20e4 <GPIO_writePort+0x68>
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	9c 81       	ldd	r25, Y+4	; 0x04
    20c8:	83 30       	cpi	r24, 0x03	; 3
    20ca:	91 05       	cpc	r25, r1
    20cc:	81 f0       	breq	.+32     	; 0x20ee <GPIO_writePort+0x72>
    20ce:	13 c0       	rjmp	.+38     	; 0x20f6 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    20d0:	eb e3       	ldi	r30, 0x3B	; 59
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	80 83       	st	Z, r24
    20d8:	0e c0       	rjmp	.+28     	; 0x20f6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    20da:	e8 e3       	ldi	r30, 0x38	; 56
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	80 83       	st	Z, r24
    20e2:	09 c0       	rjmp	.+18     	; 0x20f6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    20e4:	e5 e3       	ldi	r30, 0x35	; 53
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	80 83       	st	Z, r24
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    20ee:	e2 e3       	ldi	r30, 0x32	; 50
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	80 83       	st	Z, r24
			break;
		}
	}
}
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	00 d0       	rcall	.+0      	; 0x210a <GPIO_readPort+0x6>
    210a:	00 d0       	rcall	.+0      	; 0x210c <GPIO_readPort+0x8>
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>=NUM_OF_PORTS){
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	84 30       	cpi	r24, 0x04	; 4
    2116:	98 f5       	brcc	.+102    	; 0x217e <GPIO_readPort+0x7a>
		/* return Logic low if the port number is greater than or equal the maximum allowed number */
	}
	else{
		switch(port_num){
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	3c 83       	std	Y+4, r19	; 0x04
    2120:	2b 83       	std	Y+3, r18	; 0x03
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	9c 81       	ldd	r25, Y+4	; 0x04
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	91 05       	cpc	r25, r1
    212a:	d1 f0       	breq	.+52     	; 0x2160 <GPIO_readPort+0x5c>
    212c:	2b 81       	ldd	r18, Y+3	; 0x03
    212e:	3c 81       	ldd	r19, Y+4	; 0x04
    2130:	22 30       	cpi	r18, 0x02	; 2
    2132:	31 05       	cpc	r19, r1
    2134:	2c f4       	brge	.+10     	; 0x2140 <GPIO_readPort+0x3c>
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	61 f0       	breq	.+24     	; 0x2156 <GPIO_readPort+0x52>
    213e:	1f c0       	rjmp	.+62     	; 0x217e <GPIO_readPort+0x7a>
    2140:	2b 81       	ldd	r18, Y+3	; 0x03
    2142:	3c 81       	ldd	r19, Y+4	; 0x04
    2144:	22 30       	cpi	r18, 0x02	; 2
    2146:	31 05       	cpc	r19, r1
    2148:	81 f0       	breq	.+32     	; 0x216a <GPIO_readPort+0x66>
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	83 30       	cpi	r24, 0x03	; 3
    2150:	91 05       	cpc	r25, r1
    2152:	81 f0       	breq	.+32     	; 0x2174 <GPIO_readPort+0x70>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <GPIO_readPort+0x7a>
		case PORTA_ID:
			return PINA;
    2156:	e9 e3       	ldi	r30, 0x39	; 57
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	90 81       	ld	r25, Z
    215c:	9a 83       	std	Y+2, r25	; 0x02
    215e:	10 c0       	rjmp	.+32     	; 0x2180 <GPIO_readPort+0x7c>
		case PORTB_ID:
			return PINB;
    2160:	e6 e3       	ldi	r30, 0x36	; 54
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	20 81       	ld	r18, Z
    2166:	2a 83       	std	Y+2, r18	; 0x02
    2168:	0b c0       	rjmp	.+22     	; 0x2180 <GPIO_readPort+0x7c>
		case PORTC_ID:
			return PINC;
    216a:	e3 e3       	ldi	r30, 0x33	; 51
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	30 81       	ld	r19, Z
    2170:	3a 83       	std	Y+2, r19	; 0x02
    2172:	06 c0       	rjmp	.+12     	; 0x2180 <GPIO_readPort+0x7c>
		case PORTD_ID:
			return PIND;
    2174:	e0 e3       	ldi	r30, 0x30	; 48
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8a 83       	std	Y+2, r24	; 0x02
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <GPIO_readPort+0x7c>
		}
	}
	return LOGIC_LOW;
    217e:	1a 82       	std	Y+2, r1	; 0x02
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <GPIO_setupNibbleDirection>:
 * If the direction value is PORT_INPUT all pins in the nibble of the port should be input pins.
 * If the direction value is PORT_OUTPUT all pins n the nibble of the port should be output pins.
 * The Nibble of a Port is chosen to the be most or the least significant nibble.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupNibbleDirection(uint8 port_num, GPIO_NibbleDirectionType direction, GPIO_NibbleSignificance nibble_choice){
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <GPIO_setupNibbleDirection+0x6>
    2196:	00 d0       	rcall	.+0      	; 0x2198 <GPIO_setupNibbleDirection+0x8>
    2198:	0f 92       	push	r0
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	6a 83       	std	Y+2, r22	; 0x02
    21a2:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS){
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	84 30       	cpi	r24, 0x04	; 4
    21a8:	08 f0       	brcs	.+2      	; 0x21ac <GPIO_setupNibbleDirection+0x1c>
    21aa:	22 c1       	rjmp	.+580    	; 0x23f0 <GPIO_setupNibbleDirection+0x260>
		/*Do nothing if the port number is greater than or equal the maximum allowed number */
	}
	else{
		/*Configure the specified pin as input/output*/
		switch(port_num){
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	3d 83       	std	Y+5, r19	; 0x05
    21b4:	2c 83       	std	Y+4, r18	; 0x04
    21b6:	8c 81       	ldd	r24, Y+4	; 0x04
    21b8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	91 05       	cpc	r25, r1
    21be:	09 f4       	brne	.+2      	; 0x21c2 <GPIO_setupNibbleDirection+0x32>
    21c0:	58 c0       	rjmp	.+176    	; 0x2272 <GPIO_setupNibbleDirection+0xe2>
    21c2:	ec 81       	ldd	r30, Y+4	; 0x04
    21c4:	fd 81       	ldd	r31, Y+5	; 0x05
    21c6:	e2 30       	cpi	r30, 0x02	; 2
    21c8:	f1 05       	cpc	r31, r1
    21ca:	34 f4       	brge	.+12     	; 0x21d8 <GPIO_setupNibbleDirection+0x48>
    21cc:	2c 81       	ldd	r18, Y+4	; 0x04
    21ce:	3d 81       	ldd	r19, Y+5	; 0x05
    21d0:	21 15       	cp	r18, r1
    21d2:	31 05       	cpc	r19, r1
    21d4:	71 f0       	breq	.+28     	; 0x21f2 <GPIO_setupNibbleDirection+0x62>
    21d6:	0c c1       	rjmp	.+536    	; 0x23f0 <GPIO_setupNibbleDirection+0x260>
    21d8:	8c 81       	ldd	r24, Y+4	; 0x04
    21da:	9d 81       	ldd	r25, Y+5	; 0x05
    21dc:	82 30       	cpi	r24, 0x02	; 2
    21de:	91 05       	cpc	r25, r1
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <GPIO_setupNibbleDirection+0x54>
    21e2:	87 c0       	rjmp	.+270    	; 0x22f2 <GPIO_setupNibbleDirection+0x162>
    21e4:	ec 81       	ldd	r30, Y+4	; 0x04
    21e6:	fd 81       	ldd	r31, Y+5	; 0x05
    21e8:	e3 30       	cpi	r30, 0x03	; 3
    21ea:	f1 05       	cpc	r31, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <GPIO_setupNibbleDirection+0x60>
    21ee:	c1 c0       	rjmp	.+386    	; 0x2372 <GPIO_setupNibbleDirection+0x1e2>
    21f0:	ff c0       	rjmp	.+510    	; 0x23f0 <GPIO_setupNibbleDirection+0x260>
		case PORTA_ID:
			if(direction == NIBBLE_OUTPUT){
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	a1 f4       	brne	.+40     	; 0x2220 <GPIO_setupNibbleDirection+0x90>
				SET_NIBBLE(DDRA,nibble_choice);
    21f8:	aa e3       	ldi	r26, 0x3A	; 58
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	ea e3       	ldi	r30, 0x3A	; 58
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	48 2f       	mov	r20, r24
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	8f e0       	ldi	r24, 0x0F	; 15
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	02 2e       	mov	r0, r18
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <GPIO_setupNibbleDirection+0x86>
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	0a 94       	dec	r0
    2218:	e2 f7       	brpl	.-8      	; 0x2212 <GPIO_setupNibbleDirection+0x82>
    221a:	84 2b       	or	r24, r20
    221c:	8c 93       	st	X, r24
    221e:	e8 c0       	rjmp	.+464    	; 0x23f0 <GPIO_setupNibbleDirection+0x260>
			}
			else{
				CLEAR_NIBBLE(DDRA,nibble_choice);
    2220:	aa e3       	ldi	r26, 0x3A	; 58
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	ea e3       	ldi	r30, 0x3A	; 58
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	50 81       	ld	r21, Z
    222a:	ea e3       	ldi	r30, 0x3A	; 58
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	60 81       	ld	r22, Z
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	80 ef       	ldi	r24, 0xF0	; 240
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <GPIO_setupNibbleDirection+0xb0>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	2a 95       	dec	r18
    2242:	e2 f7       	brpl	.-8      	; 0x223c <GPIO_setupNibbleDirection+0xac>
    2244:	48 2f       	mov	r20, r24
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	88 e0       	ldi	r24, 0x08	; 8
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	fc 01       	movw	r30, r24
    2252:	e2 1b       	sub	r30, r18
    2254:	f3 0b       	sbc	r31, r19
    2256:	9f 01       	movw	r18, r30
    2258:	80 ef       	ldi	r24, 0xF0	; 240
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	02 2e       	mov	r0, r18
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <GPIO_setupNibbleDirection+0xd4>
    2260:	96 95       	lsr	r25
    2262:	87 95       	ror	r24
    2264:	0a 94       	dec	r0
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <GPIO_setupNibbleDirection+0xd0>
    2268:	84 2b       	or	r24, r20
    226a:	86 23       	and	r24, r22
    226c:	85 23       	and	r24, r21
    226e:	8c 93       	st	X, r24
    2270:	bf c0       	rjmp	.+382    	; 0x23f0 <GPIO_setupNibbleDirection+0x260>
			}
			break;
		case PORTB_ID:
			if(direction == NIBBLE_OUTPUT){
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	81 30       	cpi	r24, 0x01	; 1
    2276:	a1 f4       	brne	.+40     	; 0x22a0 <GPIO_setupNibbleDirection+0x110>
				SET_NIBBLE(DDRB,nibble_choice);
    2278:	a7 e3       	ldi	r26, 0x37	; 55
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e7 e3       	ldi	r30, 0x37	; 55
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	48 2f       	mov	r20, r24
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	8f e0       	ldi	r24, 0x0F	; 15
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	02 2e       	mov	r0, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <GPIO_setupNibbleDirection+0x106>
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <GPIO_setupNibbleDirection+0x102>
    229a:	84 2b       	or	r24, r20
    229c:	8c 93       	st	X, r24
    229e:	a8 c0       	rjmp	.+336    	; 0x23f0 <GPIO_setupNibbleDirection+0x260>
			}
			else{
				CLEAR_NIBBLE(DDRB,nibble_choice);
    22a0:	a7 e3       	ldi	r26, 0x37	; 55
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e7 e3       	ldi	r30, 0x37	; 55
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	50 81       	ld	r21, Z
    22aa:	e7 e3       	ldi	r30, 0x37	; 55
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	60 81       	ld	r22, Z
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	80 ef       	ldi	r24, 0xF0	; 240
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <GPIO_setupNibbleDirection+0x130>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	2a 95       	dec	r18
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <GPIO_setupNibbleDirection+0x12c>
    22c4:	48 2f       	mov	r20, r24
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	88 e0       	ldi	r24, 0x08	; 8
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	fc 01       	movw	r30, r24
    22d2:	e2 1b       	sub	r30, r18
    22d4:	f3 0b       	sbc	r31, r19
    22d6:	9f 01       	movw	r18, r30
    22d8:	80 ef       	ldi	r24, 0xF0	; 240
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	02 2e       	mov	r0, r18
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <GPIO_setupNibbleDirection+0x154>
    22e0:	96 95       	lsr	r25
    22e2:	87 95       	ror	r24
    22e4:	0a 94       	dec	r0
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <GPIO_setupNibbleDirection+0x150>
    22e8:	84 2b       	or	r24, r20
    22ea:	86 23       	and	r24, r22
    22ec:	85 23       	and	r24, r21
    22ee:	8c 93       	st	X, r24
    22f0:	7f c0       	rjmp	.+254    	; 0x23f0 <GPIO_setupNibbleDirection+0x260>
			}
			break;
		case PORTC_ID:
			if(direction == NIBBLE_OUTPUT){
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	a1 f4       	brne	.+40     	; 0x2320 <GPIO_setupNibbleDirection+0x190>
				SET_NIBBLE(DDRC,nibble_choice);
    22f8:	a4 e3       	ldi	r26, 0x34	; 52
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	e4 e3       	ldi	r30, 0x34	; 52
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	48 2f       	mov	r20, r24
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	8f e0       	ldi	r24, 0x0F	; 15
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	02 2e       	mov	r0, r18
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <GPIO_setupNibbleDirection+0x186>
    2312:	88 0f       	add	r24, r24
    2314:	99 1f       	adc	r25, r25
    2316:	0a 94       	dec	r0
    2318:	e2 f7       	brpl	.-8      	; 0x2312 <GPIO_setupNibbleDirection+0x182>
    231a:	84 2b       	or	r24, r20
    231c:	8c 93       	st	X, r24
    231e:	68 c0       	rjmp	.+208    	; 0x23f0 <GPIO_setupNibbleDirection+0x260>
			}
			else{
				CLEAR_NIBBLE(DDRC,nibble_choice);
    2320:	a4 e3       	ldi	r26, 0x34	; 52
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e4 e3       	ldi	r30, 0x34	; 52
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	50 81       	ld	r21, Z
    232a:	e4 e3       	ldi	r30, 0x34	; 52
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	60 81       	ld	r22, Z
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	80 ef       	ldi	r24, 0xF0	; 240
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <GPIO_setupNibbleDirection+0x1b0>
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	2a 95       	dec	r18
    2342:	e2 f7       	brpl	.-8      	; 0x233c <GPIO_setupNibbleDirection+0x1ac>
    2344:	48 2f       	mov	r20, r24
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	88 e0       	ldi	r24, 0x08	; 8
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	fc 01       	movw	r30, r24
    2352:	e2 1b       	sub	r30, r18
    2354:	f3 0b       	sbc	r31, r19
    2356:	9f 01       	movw	r18, r30
    2358:	80 ef       	ldi	r24, 0xF0	; 240
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	02 2e       	mov	r0, r18
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <GPIO_setupNibbleDirection+0x1d4>
    2360:	96 95       	lsr	r25
    2362:	87 95       	ror	r24
    2364:	0a 94       	dec	r0
    2366:	e2 f7       	brpl	.-8      	; 0x2360 <GPIO_setupNibbleDirection+0x1d0>
    2368:	84 2b       	or	r24, r20
    236a:	86 23       	and	r24, r22
    236c:	85 23       	and	r24, r21
    236e:	8c 93       	st	X, r24
    2370:	3f c0       	rjmp	.+126    	; 0x23f0 <GPIO_setupNibbleDirection+0x260>
			}
			break;
		case PORTD_ID:
			if(direction == NIBBLE_OUTPUT){
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	a1 f4       	brne	.+40     	; 0x23a0 <GPIO_setupNibbleDirection+0x210>
				SET_NIBBLE(DDRD,nibble_choice);
    2378:	a1 e3       	ldi	r26, 0x31	; 49
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	e1 e3       	ldi	r30, 0x31	; 49
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	48 2f       	mov	r20, r24
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	8f e0       	ldi	r24, 0x0F	; 15
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	02 2e       	mov	r0, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <GPIO_setupNibbleDirection+0x206>
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	0a 94       	dec	r0
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <GPIO_setupNibbleDirection+0x202>
    239a:	84 2b       	or	r24, r20
    239c:	8c 93       	st	X, r24
    239e:	28 c0       	rjmp	.+80     	; 0x23f0 <GPIO_setupNibbleDirection+0x260>
			}
			else{
				CLEAR_NIBBLE(DDRD,nibble_choice);
    23a0:	a1 e3       	ldi	r26, 0x31	; 49
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e1 e3       	ldi	r30, 0x31	; 49
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	50 81       	ld	r21, Z
    23aa:	e1 e3       	ldi	r30, 0x31	; 49
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	60 81       	ld	r22, Z
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	80 ef       	ldi	r24, 0xF0	; 240
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <GPIO_setupNibbleDirection+0x230>
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	2a 95       	dec	r18
    23c2:	e2 f7       	brpl	.-8      	; 0x23bc <GPIO_setupNibbleDirection+0x22c>
    23c4:	48 2f       	mov	r20, r24
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	88 e0       	ldi	r24, 0x08	; 8
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	fc 01       	movw	r30, r24
    23d2:	e2 1b       	sub	r30, r18
    23d4:	f3 0b       	sbc	r31, r19
    23d6:	9f 01       	movw	r18, r30
    23d8:	80 ef       	ldi	r24, 0xF0	; 240
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	02 2e       	mov	r0, r18
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <GPIO_setupNibbleDirection+0x254>
    23e0:	96 95       	lsr	r25
    23e2:	87 95       	ror	r24
    23e4:	0a 94       	dec	r0
    23e6:	e2 f7       	brpl	.-8      	; 0x23e0 <GPIO_setupNibbleDirection+0x250>
    23e8:	84 2b       	or	r24, r20
    23ea:	86 23       	and	r24, r22
    23ec:	85 23       	and	r24, r21
    23ee:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <GPIO_writeNibble>:
 * Write the value on the required nibble of a specific port.
 * If any pin in the nibble is output pin the value will be written.
 * If any pin in the nibble is input pin this will activate/deactivate the internal pull-up resistor.
 * If the port number is not correct, The function will not handle the request.
 */
void GPIO_writeNibble(uint8 port_num, uint8 value, GPIO_NibbleSignificance nibble_choice){
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	00 d0       	rcall	.+0      	; 0x2406 <GPIO_writeNibble+0x6>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <GPIO_writeNibble+0x8>
    2408:	0f 92       	push	r0
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	6a 83       	std	Y+2, r22	; 0x02
    2412:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS){
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	84 30       	cpi	r24, 0x04	; 4
    2418:	08 f0       	brcs	.+2      	; 0x241c <GPIO_writeNibble+0x1c>
    241a:	1e c1       	rjmp	.+572    	; 0x2658 <GPIO_writeNibble+0x258>
		/*Do nothing if the port number is greater than or equal the maximum allowed number */
	}
	else{
		switch(port_num){
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	3d 83       	std	Y+5, r19	; 0x05
    2424:	2c 83       	std	Y+4, r18	; 0x04
    2426:	6c 81       	ldd	r22, Y+4	; 0x04
    2428:	7d 81       	ldd	r23, Y+5	; 0x05
    242a:	61 30       	cpi	r22, 0x01	; 1
    242c:	71 05       	cpc	r23, r1
    242e:	09 f4       	brne	.+2      	; 0x2432 <GPIO_writeNibble+0x32>
    2430:	57 c0       	rjmp	.+174    	; 0x24e0 <GPIO_writeNibble+0xe0>
    2432:	8c 81       	ldd	r24, Y+4	; 0x04
    2434:	9d 81       	ldd	r25, Y+5	; 0x05
    2436:	82 30       	cpi	r24, 0x02	; 2
    2438:	91 05       	cpc	r25, r1
    243a:	34 f4       	brge	.+12     	; 0x2448 <GPIO_writeNibble+0x48>
    243c:	2c 81       	ldd	r18, Y+4	; 0x04
    243e:	3d 81       	ldd	r19, Y+5	; 0x05
    2440:	21 15       	cp	r18, r1
    2442:	31 05       	cpc	r19, r1
    2444:	71 f0       	breq	.+28     	; 0x2462 <GPIO_writeNibble+0x62>
    2446:	08 c1       	rjmp	.+528    	; 0x2658 <GPIO_writeNibble+0x258>
    2448:	6c 81       	ldd	r22, Y+4	; 0x04
    244a:	7d 81       	ldd	r23, Y+5	; 0x05
    244c:	62 30       	cpi	r22, 0x02	; 2
    244e:	71 05       	cpc	r23, r1
    2450:	09 f4       	brne	.+2      	; 0x2454 <GPIO_writeNibble+0x54>
    2452:	85 c0       	rjmp	.+266    	; 0x255e <GPIO_writeNibble+0x15e>
    2454:	8c 81       	ldd	r24, Y+4	; 0x04
    2456:	9d 81       	ldd	r25, Y+5	; 0x05
    2458:	83 30       	cpi	r24, 0x03	; 3
    245a:	91 05       	cpc	r25, r1
    245c:	09 f4       	brne	.+2      	; 0x2460 <GPIO_writeNibble+0x60>
    245e:	be c0       	rjmp	.+380    	; 0x25dc <GPIO_writeNibble+0x1dc>
    2460:	fb c0       	rjmp	.+502    	; 0x2658 <GPIO_writeNibble+0x258>
		case PORTA_ID:
			WRTIE_NIBBLE(PORTA, value, nibble_choice);
    2462:	ab e3       	ldi	r26, 0x3B	; 59
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	eb e3       	ldi	r30, 0x3B	; 59
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	50 81       	ld	r21, Z
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	80 ef       	ldi	r24, 0xF0	; 240
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	02 c0       	rjmp	.+4      	; 0x247c <GPIO_writeNibble+0x7c>
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
    247c:	2a 95       	dec	r18
    247e:	e2 f7       	brpl	.-8      	; 0x2478 <GPIO_writeNibble+0x78>
    2480:	48 2f       	mov	r20, r24
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	88 e0       	ldi	r24, 0x08	; 8
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	bc 01       	movw	r22, r24
    248e:	62 1b       	sub	r22, r18
    2490:	73 0b       	sbc	r23, r19
    2492:	9b 01       	movw	r18, r22
    2494:	80 ef       	ldi	r24, 0xF0	; 240
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	02 c0       	rjmp	.+4      	; 0x249e <GPIO_writeNibble+0x9e>
    249a:	96 95       	lsr	r25
    249c:	87 95       	ror	r24
    249e:	2a 95       	dec	r18
    24a0:	e2 f7       	brpl	.-8      	; 0x249a <GPIO_writeNibble+0x9a>
    24a2:	84 2b       	or	r24, r20
    24a4:	58 23       	and	r21, r24
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	b9 01       	movw	r22, r18
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <GPIO_writeNibble+0xba>
    24b6:	66 0f       	add	r22, r22
    24b8:	77 1f       	adc	r23, r23
    24ba:	8a 95       	dec	r24
    24bc:	e2 f7       	brpl	.-8      	; 0x24b6 <GPIO_writeNibble+0xb6>
    24be:	cb 01       	movw	r24, r22
    24c0:	48 2f       	mov	r20, r24
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	8f e0       	ldi	r24, 0x0F	; 15
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	02 2e       	mov	r0, r18
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <GPIO_writeNibble+0xd4>
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	0a 94       	dec	r0
    24d6:	e2 f7       	brpl	.-8      	; 0x24d0 <GPIO_writeNibble+0xd0>
    24d8:	84 23       	and	r24, r20
    24da:	85 2b       	or	r24, r21
    24dc:	8c 93       	st	X, r24
    24de:	bc c0       	rjmp	.+376    	; 0x2658 <GPIO_writeNibble+0x258>
			break;
		case PORTB_ID:
			WRTIE_NIBBLE(PORTB, value, nibble_choice);
    24e0:	a8 e3       	ldi	r26, 0x38	; 56
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	e8 e3       	ldi	r30, 0x38	; 56
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	50 81       	ld	r21, Z
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	28 2f       	mov	r18, r24
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	80 ef       	ldi	r24, 0xF0	; 240
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <GPIO_writeNibble+0xfa>
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	2a 95       	dec	r18
    24fc:	e2 f7       	brpl	.-8      	; 0x24f6 <GPIO_writeNibble+0xf6>
    24fe:	48 2f       	mov	r20, r24
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	88 e0       	ldi	r24, 0x08	; 8
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	bc 01       	movw	r22, r24
    250c:	62 1b       	sub	r22, r18
    250e:	73 0b       	sbc	r23, r19
    2510:	9b 01       	movw	r18, r22
    2512:	80 ef       	ldi	r24, 0xF0	; 240
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	02 c0       	rjmp	.+4      	; 0x251c <GPIO_writeNibble+0x11c>
    2518:	96 95       	lsr	r25
    251a:	87 95       	ror	r24
    251c:	2a 95       	dec	r18
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <GPIO_writeNibble+0x118>
    2520:	84 2b       	or	r24, r20
    2522:	58 23       	and	r21, r24
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	88 2f       	mov	r24, r24
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	b9 01       	movw	r22, r18
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <GPIO_writeNibble+0x138>
    2534:	66 0f       	add	r22, r22
    2536:	77 1f       	adc	r23, r23
    2538:	8a 95       	dec	r24
    253a:	e2 f7       	brpl	.-8      	; 0x2534 <GPIO_writeNibble+0x134>
    253c:	cb 01       	movw	r24, r22
    253e:	48 2f       	mov	r20, r24
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	8f e0       	ldi	r24, 0x0F	; 15
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	02 2e       	mov	r0, r18
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <GPIO_writeNibble+0x152>
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	0a 94       	dec	r0
    2554:	e2 f7       	brpl	.-8      	; 0x254e <GPIO_writeNibble+0x14e>
    2556:	84 23       	and	r24, r20
    2558:	85 2b       	or	r24, r21
    255a:	8c 93       	st	X, r24
    255c:	7d c0       	rjmp	.+250    	; 0x2658 <GPIO_writeNibble+0x258>
			break;
		case PORTC_ID:
			WRTIE_NIBBLE(PORTC, value, nibble_choice);
    255e:	a5 e3       	ldi	r26, 0x35	; 53
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e5 e3       	ldi	r30, 0x35	; 53
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	50 81       	ld	r21, Z
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	80 ef       	ldi	r24, 0xF0	; 240
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <GPIO_writeNibble+0x178>
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	2a 95       	dec	r18
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <GPIO_writeNibble+0x174>
    257c:	48 2f       	mov	r20, r24
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	88 e0       	ldi	r24, 0x08	; 8
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	bc 01       	movw	r22, r24
    258a:	62 1b       	sub	r22, r18
    258c:	73 0b       	sbc	r23, r19
    258e:	9b 01       	movw	r18, r22
    2590:	80 ef       	ldi	r24, 0xF0	; 240
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	02 c0       	rjmp	.+4      	; 0x259a <GPIO_writeNibble+0x19a>
    2596:	96 95       	lsr	r25
    2598:	87 95       	ror	r24
    259a:	2a 95       	dec	r18
    259c:	e2 f7       	brpl	.-8      	; 0x2596 <GPIO_writeNibble+0x196>
    259e:	84 2b       	or	r24, r20
    25a0:	58 23       	and	r21, r24
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	b9 01       	movw	r22, r18
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <GPIO_writeNibble+0x1b6>
    25b2:	66 0f       	add	r22, r22
    25b4:	77 1f       	adc	r23, r23
    25b6:	8a 95       	dec	r24
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <GPIO_writeNibble+0x1b2>
    25ba:	cb 01       	movw	r24, r22
    25bc:	48 2f       	mov	r20, r24
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	8f e0       	ldi	r24, 0x0F	; 15
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	02 2e       	mov	r0, r18
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <GPIO_writeNibble+0x1d0>
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	0a 94       	dec	r0
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <GPIO_writeNibble+0x1cc>
    25d4:	84 23       	and	r24, r20
    25d6:	85 2b       	or	r24, r21
    25d8:	8c 93       	st	X, r24
    25da:	3e c0       	rjmp	.+124    	; 0x2658 <GPIO_writeNibble+0x258>
			break;
		case PORTD_ID:
			WRTIE_NIBBLE(PORTD, value, nibble_choice);
    25dc:	a2 e3       	ldi	r26, 0x32	; 50
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e2 e3       	ldi	r30, 0x32	; 50
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	50 81       	ld	r21, Z
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	80 ef       	ldi	r24, 0xF0	; 240
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <GPIO_writeNibble+0x1f6>
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	2a 95       	dec	r18
    25f8:	e2 f7       	brpl	.-8      	; 0x25f2 <GPIO_writeNibble+0x1f2>
    25fa:	48 2f       	mov	r20, r24
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	88 e0       	ldi	r24, 0x08	; 8
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	bc 01       	movw	r22, r24
    2608:	62 1b       	sub	r22, r18
    260a:	73 0b       	sbc	r23, r19
    260c:	9b 01       	movw	r18, r22
    260e:	80 ef       	ldi	r24, 0xF0	; 240
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <GPIO_writeNibble+0x218>
    2614:	96 95       	lsr	r25
    2616:	87 95       	ror	r24
    2618:	2a 95       	dec	r18
    261a:	e2 f7       	brpl	.-8      	; 0x2614 <GPIO_writeNibble+0x214>
    261c:	84 2b       	or	r24, r20
    261e:	58 23       	and	r21, r24
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	28 2f       	mov	r18, r24
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	b9 01       	movw	r22, r18
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <GPIO_writeNibble+0x234>
    2630:	66 0f       	add	r22, r22
    2632:	77 1f       	adc	r23, r23
    2634:	8a 95       	dec	r24
    2636:	e2 f7       	brpl	.-8      	; 0x2630 <GPIO_writeNibble+0x230>
    2638:	cb 01       	movw	r24, r22
    263a:	48 2f       	mov	r20, r24
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	8f e0       	ldi	r24, 0x0F	; 15
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	02 2e       	mov	r0, r18
    2648:	02 c0       	rjmp	.+4      	; 0x264e <GPIO_writeNibble+0x24e>
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	0a 94       	dec	r0
    2650:	e2 f7       	brpl	.-8      	; 0x264a <GPIO_writeNibble+0x24a>
    2652:	84 23       	and	r24, r20
    2654:	85 2b       	or	r24, r21
    2656:	8c 93       	st	X, r24
			break;
		}
	}
}
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <GPIO_readNibble>:
/*
 * Description :
 * Read and return the value of the required nibble.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readNibble(uint8 port_num, GPIO_NibbleSignificance nibble_choice ){
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	00 d0       	rcall	.+0      	; 0x266e <GPIO_readNibble+0x6>
    266e:	00 d0       	rcall	.+0      	; 0x2670 <GPIO_readNibble+0x8>
    2670:	0f 92       	push	r0
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>=NUM_OF_PORTS){
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	84 30       	cpi	r24, 0x04	; 4
    267e:	08 f0       	brcs	.+2      	; 0x2682 <GPIO_readNibble+0x1a>
    2680:	9a c0       	rjmp	.+308    	; 0x27b6 <GPIO_readNibble+0x14e>
		/* return Logic low if the port number is greater than or equal the maximum allowed number */
	}
	else{
		switch(port_num){
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	3d 83       	std	Y+5, r19	; 0x05
    268a:	2c 83       	std	Y+4, r18	; 0x04
    268c:	4c 81       	ldd	r20, Y+4	; 0x04
    268e:	5d 81       	ldd	r21, Y+5	; 0x05
    2690:	41 30       	cpi	r20, 0x01	; 1
    2692:	51 05       	cpc	r21, r1
    2694:	b1 f1       	breq	.+108    	; 0x2702 <GPIO_readNibble+0x9a>
    2696:	8c 81       	ldd	r24, Y+4	; 0x04
    2698:	9d 81       	ldd	r25, Y+5	; 0x05
    269a:	82 30       	cpi	r24, 0x02	; 2
    269c:	91 05       	cpc	r25, r1
    269e:	34 f4       	brge	.+12     	; 0x26ac <GPIO_readNibble+0x44>
    26a0:	2c 81       	ldd	r18, Y+4	; 0x04
    26a2:	3d 81       	ldd	r19, Y+5	; 0x05
    26a4:	21 15       	cp	r18, r1
    26a6:	31 05       	cpc	r19, r1
    26a8:	71 f0       	breq	.+28     	; 0x26c6 <GPIO_readNibble+0x5e>
    26aa:	85 c0       	rjmp	.+266    	; 0x27b6 <GPIO_readNibble+0x14e>
    26ac:	4c 81       	ldd	r20, Y+4	; 0x04
    26ae:	5d 81       	ldd	r21, Y+5	; 0x05
    26b0:	42 30       	cpi	r20, 0x02	; 2
    26b2:	51 05       	cpc	r21, r1
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <GPIO_readNibble+0x50>
    26b6:	43 c0       	rjmp	.+134    	; 0x273e <GPIO_readNibble+0xd6>
    26b8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ba:	9d 81       	ldd	r25, Y+5	; 0x05
    26bc:	83 30       	cpi	r24, 0x03	; 3
    26be:	91 05       	cpc	r25, r1
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <GPIO_readNibble+0x5c>
    26c2:	5b c0       	rjmp	.+182    	; 0x277a <GPIO_readNibble+0x112>
    26c4:	78 c0       	rjmp	.+240    	; 0x27b6 <GPIO_readNibble+0x14e>
		case PORTA_ID:
			return GET_NIBBLE(PORTA,nibble_choice);
    26c6:	eb e3       	ldi	r30, 0x3B	; 59
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	48 2f       	mov	r20, r24
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	8f e0       	ldi	r24, 0x0F	; 15
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	02 c0       	rjmp	.+4      	; 0x26e0 <GPIO_readNibble+0x78>
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	2a 95       	dec	r18
    26e2:	e2 f7       	brpl	.-8      	; 0x26dc <GPIO_readNibble+0x74>
    26e4:	9a 01       	movw	r18, r20
    26e6:	28 23       	and	r18, r24
    26e8:	39 23       	and	r19, r25
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a9 01       	movw	r20, r18
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <GPIO_readNibble+0x90>
    26f4:	56 95       	lsr	r21
    26f6:	47 95       	ror	r20
    26f8:	8a 95       	dec	r24
    26fa:	e2 f7       	brpl	.-8      	; 0x26f4 <GPIO_readNibble+0x8c>
    26fc:	ca 01       	movw	r24, r20
    26fe:	8b 83       	std	Y+3, r24	; 0x03
    2700:	5b c0       	rjmp	.+182    	; 0x27b8 <GPIO_readNibble+0x150>
		case PORTB_ID:
			return GET_NIBBLE(PORTB,nibble_choice);
    2702:	e8 e3       	ldi	r30, 0x38	; 56
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	48 2f       	mov	r20, r24
    270a:	50 e0       	ldi	r21, 0x00	; 0
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8f e0       	ldi	r24, 0x0F	; 15
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	02 c0       	rjmp	.+4      	; 0x271c <GPIO_readNibble+0xb4>
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	2a 95       	dec	r18
    271e:	e2 f7       	brpl	.-8      	; 0x2718 <GPIO_readNibble+0xb0>
    2720:	9a 01       	movw	r18, r20
    2722:	28 23       	and	r18, r24
    2724:	39 23       	and	r19, r25
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	a9 01       	movw	r20, r18
    272e:	02 c0       	rjmp	.+4      	; 0x2734 <GPIO_readNibble+0xcc>
    2730:	56 95       	lsr	r21
    2732:	47 95       	ror	r20
    2734:	8a 95       	dec	r24
    2736:	e2 f7       	brpl	.-8      	; 0x2730 <GPIO_readNibble+0xc8>
    2738:	ca 01       	movw	r24, r20
    273a:	8b 83       	std	Y+3, r24	; 0x03
    273c:	3d c0       	rjmp	.+122    	; 0x27b8 <GPIO_readNibble+0x150>
		case PORTC_ID:
			return GET_NIBBLE(PORTC,nibble_choice);
    273e:	e5 e3       	ldi	r30, 0x35	; 53
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	48 2f       	mov	r20, r24
    2746:	50 e0       	ldi	r21, 0x00	; 0
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	8f e0       	ldi	r24, 0x0F	; 15
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <GPIO_readNibble+0xf0>
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	2a 95       	dec	r18
    275a:	e2 f7       	brpl	.-8      	; 0x2754 <GPIO_readNibble+0xec>
    275c:	9a 01       	movw	r18, r20
    275e:	28 23       	and	r18, r24
    2760:	39 23       	and	r19, r25
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	88 2f       	mov	r24, r24
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a9 01       	movw	r20, r18
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <GPIO_readNibble+0x108>
    276c:	56 95       	lsr	r21
    276e:	47 95       	ror	r20
    2770:	8a 95       	dec	r24
    2772:	e2 f7       	brpl	.-8      	; 0x276c <GPIO_readNibble+0x104>
    2774:	ca 01       	movw	r24, r20
    2776:	8b 83       	std	Y+3, r24	; 0x03
    2778:	1f c0       	rjmp	.+62     	; 0x27b8 <GPIO_readNibble+0x150>
		case PORTD_ID:
			return GET_NIBBLE(PORTD,nibble_choice);
    277a:	e2 e3       	ldi	r30, 0x32	; 50
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	48 2f       	mov	r20, r24
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	8f e0       	ldi	r24, 0x0F	; 15
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <GPIO_readNibble+0x12c>
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	2a 95       	dec	r18
    2796:	e2 f7       	brpl	.-8      	; 0x2790 <GPIO_readNibble+0x128>
    2798:	9a 01       	movw	r18, r20
    279a:	28 23       	and	r18, r24
    279c:	39 23       	and	r19, r25
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a9 01       	movw	r20, r18
    27a6:	02 c0       	rjmp	.+4      	; 0x27ac <GPIO_readNibble+0x144>
    27a8:	56 95       	lsr	r21
    27aa:	47 95       	ror	r20
    27ac:	8a 95       	dec	r24
    27ae:	e2 f7       	brpl	.-8      	; 0x27a8 <GPIO_readNibble+0x140>
    27b0:	ca 01       	movw	r24, r20
    27b2:	8b 83       	std	Y+3, r24	; 0x03
    27b4:	01 c0       	rjmp	.+2      	; 0x27b8 <GPIO_readNibble+0x150>
		}
	}
	return LOGIC_LOW;
    27b6:	1b 82       	std	Y+3, r1	; 0x03
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <DcMotor_init>:
/*Description:
 * Function to Initialize the motor:
 * 1. Setup the direction for the two motor pins.
 * 2. Stop at the DC-Motor at the beginning
 * */
void DcMotor_init(){
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62

	/*Configure Motor pin directions as output pins*/
	GPIO_setupPinDirection(DC_MOTOR_EN_PORT_ID, DC_MOTOR_EN_PIN_ID, PIN_OUTPUT);
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	63 e0       	ldi	r22, 0x03	; 3
    27d6:	41 e0       	ldi	r20, 0x01	; 1
    27d8:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	41 e0       	ldi	r20, 0x01	; 1
    27e2:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	41 e0       	ldi	r20, 0x01	; 1
    27ec:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_setupPinDirection>

	/*Initially the motor is off */
	 DcMotor_off();
    27f0:	0e 94 41 14 	call	0x2882	; 0x2882 <DcMotor_off>
}
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <DcMotor_rotate>:

/*Description:
 * Rotate the DC Motor CW/ or A-CW or stop the motor.
 * Set the required duty cycle via PWM driver according to speed value.
 * */
void DcMotor_rotate(DcMotor_State state, uint8 speed, TIMER_ConfigType * a_timer0_configPtr){
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <DcMotor_rotate+0x6>
    2800:	00 d0       	rcall	.+0      	; 0x2802 <DcMotor_rotate+0x8>
    2802:	00 d0       	rcall	.+0      	; 0x2804 <DcMotor_rotate+0xa>
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	89 83       	std	Y+1, r24	; 0x01
    280a:	6a 83       	std	Y+2, r22	; 0x02
    280c:	5c 83       	std	Y+4, r21	; 0x04
    280e:	4b 83       	std	Y+3, r20	; 0x03
	/*configure timer0 duty cycle*/
	a_timer0_configPtr->mode_data.pwm_duty_cycle = speed; /*speed in percentage*/
    2810:	eb 81       	ldd	r30, Y+3	; 0x03
    2812:	fc 81       	ldd	r31, Y+4	; 0x04
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	80 83       	st	Z, r24
	TIMER_changeDutyCycle(a_timer0_configPtr);
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TIMER_changeDutyCycle>
	TIMER_init(&a_timer0_configPtr);
    2820:	ce 01       	movw	r24, r28
    2822:	03 96       	adiw	r24, 0x03	; 3
    2824:	0e 94 a4 08 	call	0x1148	; 0x1148 <TIMER_init>

	switch (state){
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	28 2f       	mov	r18, r24
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	3e 83       	std	Y+6, r19	; 0x06
    2830:	2d 83       	std	Y+5, r18	; 0x05
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	31 f0       	breq	.+12     	; 0x2846 <DcMotor_rotate+0x4c>
    283a:	2d 81       	ldd	r18, Y+5	; 0x05
    283c:	3e 81       	ldd	r19, Y+6	; 0x06
    283e:	21 30       	cpi	r18, 0x01	; 1
    2840:	31 05       	cpc	r19, r1
    2842:	61 f0       	breq	.+24     	; 0x285c <DcMotor_rotate+0x62>
    2844:	15 c0       	rjmp	.+42     	; 0x2870 <DcMotor_rotate+0x76>
	case CW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	61 e0       	ldi	r22, 0x01	; 1
    2854:	41 e0       	ldi	r20, 0x01	; 1
    2856:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_writePin>
    285a:	0a c0       	rjmp	.+20     	; 0x2870 <DcMotor_rotate+0x76>
		break;
	case ACW:
		GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	41 e0       	ldi	r20, 0x01	; 1
    2862:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	61 e0       	ldi	r22, 0x01	; 1
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_writePin>
		break;
	}
}
    2870:	26 96       	adiw	r28, 0x06	; 6
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <DcMotor_off>:

/*Description:
 * Function that turns off the Dc Motor
 * */
void DcMotor_off(void){
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(DC_MOTOR_IN1_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_IN2_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	61 e0       	ldi	r22, 0x01	; 1
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_writePin>
}
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <EEPROM_writeByte>:
/*******************************************************************************
 *                     		 Functions Definitions                             *
 *******************************************************************************/

uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data)
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <EEPROM_writeByte+0x6>
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <EEPROM_writeByte+0x8>
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	9a 83       	std	Y+2, r25	; 0x02
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    28b6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TWI_start>
	if(TWI_getStatus() != TWI_START)
    28ba:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_getStatus>
    28be:	88 30       	cpi	r24, 0x08	; 8
    28c0:	11 f0       	breq	.+4      	; 0x28c6 <EEPROM_writeByte+0x22>
	{
		return ERROR;
    28c2:	1c 82       	std	Y+4, r1	; 0x04
    28c4:	28 c0       	rjmp	.+80     	; 0x2916 <EEPROM_writeByte+0x72>
	}

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(((u16addr & 0x0700)>>7) | (0xA0)));
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	80 70       	andi	r24, 0x00	; 0
    28cc:	97 70       	andi	r25, 0x07	; 7
    28ce:	88 0f       	add	r24, r24
    28d0:	89 2f       	mov	r24, r25
    28d2:	88 1f       	adc	r24, r24
    28d4:	99 0b       	sbc	r25, r25
    28d6:	91 95       	neg	r25
    28d8:	80 6a       	ori	r24, 0xA0	; 160
    28da:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    28de:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_getStatus>
    28e2:	88 31       	cpi	r24, 0x18	; 24
    28e4:	11 f0       	breq	.+4      	; 0x28ea <EEPROM_writeByte+0x46>
	{
		return ERROR;
    28e6:	1c 82       	std	Y+4, r1	; 0x04
    28e8:	16 c0       	rjmp	.+44     	; 0x2916 <EEPROM_writeByte+0x72>
	}

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr & 0x00FF));
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    28f0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_getStatus>
    28f4:	88 32       	cpi	r24, 0x28	; 40
    28f6:	11 f0       	breq	.+4      	; 0x28fc <EEPROM_writeByte+0x58>
	{
		return ERROR;
    28f8:	1c 82       	std	Y+4, r1	; 0x04
    28fa:	0d c0       	rjmp	.+26     	; 0x2916 <EEPROM_writeByte+0x72>
	}

	/* write byte to eeprom */
	TWI_writeByte(u8data);
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    2902:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_getStatus>
    2906:	88 32       	cpi	r24, 0x28	; 40
    2908:	11 f0       	breq	.+4      	; 0x290e <EEPROM_writeByte+0x6a>
	{
		return ERROR;
    290a:	1c 82       	std	Y+4, r1	; 0x04
    290c:	04 c0       	rjmp	.+8      	; 0x2916 <EEPROM_writeByte+0x72>
	}

	/* Send the Stop Bit */
	TWI_stop();
    290e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <TWI_stop>

	return SUCCESS;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	8c 83       	std	Y+4, r24	; 0x04
    2916:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	cf 91       	pop	r28
    2922:	df 91       	pop	r29
    2924:	08 95       	ret

00002926 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data)
{
    2926:	df 93       	push	r29
    2928:	cf 93       	push	r28
    292a:	00 d0       	rcall	.+0      	; 0x292c <EEPROM_readByte+0x6>
    292c:	00 d0       	rcall	.+0      	; 0x292e <EEPROM_readByte+0x8>
    292e:	0f 92       	push	r0
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	9a 83       	std	Y+2, r25	; 0x02
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	7c 83       	std	Y+4, r23	; 0x04
    293a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    293c:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TWI_start>
	if(TWI_getStatus() != TWI_START)
    2940:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_getStatus>
    2944:	88 30       	cpi	r24, 0x08	; 8
    2946:	11 f0       	breq	.+4      	; 0x294c <EEPROM_readByte+0x26>
	{
		return ERROR;
    2948:	1d 82       	std	Y+5, r1	; 0x05
    294a:	44 c0       	rjmp	.+136    	; 0x29d4 <EEPROM_readByte+0xae>
	}

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(((u16addr & 0x0700)>>7) | (0xA0)));
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	9a 81       	ldd	r25, Y+2	; 0x02
    2950:	80 70       	andi	r24, 0x00	; 0
    2952:	97 70       	andi	r25, 0x07	; 7
    2954:	88 0f       	add	r24, r24
    2956:	89 2f       	mov	r24, r25
    2958:	88 1f       	adc	r24, r24
    295a:	99 0b       	sbc	r25, r25
    295c:	91 95       	neg	r25
    295e:	80 6a       	ori	r24, 0xA0	; 160
    2960:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2964:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_getStatus>
    2968:	88 31       	cpi	r24, 0x18	; 24
    296a:	11 f0       	breq	.+4      	; 0x2970 <EEPROM_readByte+0x4a>
	{
		return ERROR;
    296c:	1d 82       	std	Y+5, r1	; 0x05
    296e:	32 c0       	rjmp	.+100    	; 0x29d4 <EEPROM_readByte+0xae>
	}

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr & 0x00FF));
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    2976:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_getStatus>
    297a:	88 32       	cpi	r24, 0x28	; 40
    297c:	11 f0       	breq	.+4      	; 0x2982 <EEPROM_readByte+0x5c>
	{
		return ERROR;
    297e:	1d 82       	std	Y+5, r1	; 0x05
    2980:	29 c0       	rjmp	.+82     	; 0x29d4 <EEPROM_readByte+0xae>
	}

	/* Send the Repeated Start Bit */
	TWI_start();
    2982:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    2986:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_getStatus>
    298a:	80 31       	cpi	r24, 0x10	; 16
    298c:	11 f0       	breq	.+4      	; 0x2992 <EEPROM_readByte+0x6c>
	{
		return ERROR;
    298e:	1d 82       	std	Y+5, r1	; 0x05
    2990:	21 c0       	rjmp	.+66     	; 0x29d4 <EEPROM_readByte+0xae>
	}

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8)(((u16addr & 0x0700)>>7) | (0xA1)));
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	9a 81       	ldd	r25, Y+2	; 0x02
    2996:	80 70       	andi	r24, 0x00	; 0
    2998:	97 70       	andi	r25, 0x07	; 7
    299a:	88 0f       	add	r24, r24
    299c:	89 2f       	mov	r24, r25
    299e:	88 1f       	adc	r24, r24
    29a0:	99 0b       	sbc	r25, r25
    29a2:	91 95       	neg	r25
    29a4:	81 6a       	ori	r24, 0xA1	; 161
    29a6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_R_ACK)
    29aa:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_getStatus>
    29ae:	80 34       	cpi	r24, 0x40	; 64
    29b0:	11 f0       	breq	.+4      	; 0x29b6 <EEPROM_readByte+0x90>
	{
		return ERROR;
    29b2:	1d 82       	std	Y+5, r1	; 0x05
    29b4:	0f c0       	rjmp	.+30     	; 0x29d4 <EEPROM_readByte+0xae>
	}

	/* Read Byte from Memory without send ACK */
	*u8data = TWI_readByteWithNACK();
    29b6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <TWI_readByteWithNACK>
    29ba:	eb 81       	ldd	r30, Y+3	; 0x03
    29bc:	fc 81       	ldd	r31, Y+4	; 0x04
    29be:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    29c0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <TWI_getStatus>
    29c4:	88 35       	cpi	r24, 0x58	; 88
    29c6:	11 f0       	breq	.+4      	; 0x29cc <EEPROM_readByte+0xa6>
	{
		return ERROR;
    29c8:	1d 82       	std	Y+5, r1	; 0x05
    29ca:	04 c0       	rjmp	.+8      	; 0x29d4 <EEPROM_readByte+0xae>
	}

	/* Send the Stop Bit */
	TWI_stop();
    29cc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <TWI_stop>

	return SUCCESS;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	8d 83       	std	Y+5, r24	; 0x05
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	08 95       	ret

000029e6 <BUZZER_init>:

#include "../../MCAL/GPIO/gpio.h"
#include "buzzer.h"

void BUZZER_init(void)
{
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    29ee:	83 e0       	ldi	r24, 0x03	; 3
    29f0:	62 e0       	ldi	r22, 0x02	; 2
    29f2:	41 e0       	ldi	r20, 0x01	; 1
    29f4:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    29f8:	83 e0       	ldi	r24, 0x03	; 3
    29fa:	62 e0       	ldi	r22, 0x02	; 2
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_writePin>
}
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <BUZZER_start>:

void BUZZER_start(void)
{
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    2a10:	83 e0       	ldi	r24, 0x03	; 3
    2a12:	62 e0       	ldi	r22, 0x02	; 2
    2a14:	41 e0       	ldi	r20, 0x01	; 1
    2a16:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_writePin>
}
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <BUZZER_stop>:

void BUZZER_stop(void)
{
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    2a28:	83 e0       	ldi	r24, 0x03	; 3
    2a2a:	62 e0       	ldi	r22, 0x02	; 2
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_writePin>
}
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <APP_receivePassword>:
 * Description:
 * A function that receive a password string from the HMI ECU.
 * The password is stored in a given password buffer.
 */
static void APP_receivePassword(uint8 * const a_password)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <APP_receivePassword+0x6>
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	89 83       	std	Y+1, r24	; 0x01

	/*Acknowledge that receiver (CONTROL ECU) is ready to receive password value */
	USART_sendByte(USART_RECEIVER_READY_BYTE);
    2a46:	86 e6       	ldi	r24, 0x66	; 102
    2a48:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <USART_sendByte>

	while( USART_receiveByte() != USART_SENDER_READY_BYTE && USART_receiveByte() != ALARM_COMMAND )
    2a4c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <USART_receiveByte>
    2a50:	86 36       	cpi	r24, 0x66	; 102
    2a52:	21 f0       	breq	.+8      	; 0x2a5c <APP_receivePassword+0x24>
    2a54:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <USART_receiveByte>
    2a58:	82 31       	cpi	r24, 0x12	; 18
    2a5a:	c1 f7       	brne	.-16     	; 0x2a4c <APP_receivePassword+0x14>
	{
		; /*wait until the sender is (HMI ECU) ready to send the password*/
	}

	USART_receiveString(a_password); /*receive the password*/
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a60:	0e 94 32 07 	call	0xe64	; 0xe64 <USART_receiveString>
}
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret

00002a6e <APP_confirmPassword>:
 * 1- The re-entered password in case of password change/initialization
 * 2- The actual password stored in the EEPROM in case of a door access or password change.
 * the function sends back the status of the password to HMI ECU
 */
static APP_PasswordStatus APP_confirmPassword(const uint8 * const a_password1, const uint8 * const a_password2)
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <APP_confirmPassword+0x6>
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <APP_confirmPassword+0x8>
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <APP_confirmPassword+0xa>
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	9c 83       	std	Y+4, r25	; 0x04
    2a7e:	8b 83       	std	Y+3, r24	; 0x03
    2a80:	7e 83       	std	Y+6, r23	; 0x06
    2a82:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i = 0;
    2a84:	1a 82       	std	Y+2, r1	; 0x02
	/*passwords are matching unless otherwise is proved*/
	APP_PasswordStatus status = MATCHING_PASSWORDS;
    2a86:	19 82       	std	Y+1, r1	; 0x01

	for (i = 0; i < PASSWORD_LENGTH; i++)
    2a88:	1a 82       	std	Y+2, r1	; 0x02
    2a8a:	16 c0       	rjmp	.+44     	; 0x2ab8 <APP_confirmPassword+0x4a>
	{
		if(g_receivedPassword[i] != g_passwordBuffer[i])
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	88 2f       	mov	r24, r24
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	fc 01       	movw	r30, r24
    2a94:	ee 58       	subi	r30, 0x8E	; 142
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	20 81       	ld	r18, Z
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	88 2f       	mov	r24, r24
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	e8 58       	subi	r30, 0x88	; 136
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 81       	ld	r24, Z
    2aa8:	28 17       	cp	r18, r24
    2aaa:	19 f0       	breq	.+6      	; 0x2ab2 <APP_confirmPassword+0x44>
		{
			status =  UNMATCHING_PASSWORDS;
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	06 c0       	rjmp	.+12     	; 0x2abe <APP_confirmPassword+0x50>
{
	uint8 i = 0;
	/*passwords are matching unless otherwise is proved*/
	APP_PasswordStatus status = MATCHING_PASSWORDS;

	for (i = 0; i < PASSWORD_LENGTH; i++)
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	8f 5f       	subi	r24, 0xFF	; 255
    2ab6:	8a 83       	std	Y+2, r24	; 0x02
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	85 30       	cpi	r24, 0x05	; 5
    2abc:	38 f3       	brcs	.-50     	; 0x2a8c <APP_confirmPassword+0x1e>
			break;
		}
	}

	/*Acknowledge that sender (CONTROL ECU) is ready */
	USART_sendByte(USART_SENDER_READY_BYTE);
    2abe:	86 e6       	ldi	r24, 0x66	; 102
    2ac0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <USART_sendByte>

	while( USART_receiveByte() != USART_RECEIVER_READY_BYTE){
    2ac4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <USART_receiveByte>
    2ac8:	86 36       	cpi	r24, 0x66	; 102
    2aca:	e1 f7       	brne	.-8      	; 0x2ac4 <APP_confirmPassword+0x56>
		; /*wait until the receiver (HMI ECU) is ready*/
	}

	if(status == MATCHING_PASSWORDS)
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	88 23       	and	r24, r24
    2ad0:	21 f4       	brne	.+8      	; 0x2ada <APP_confirmPassword+0x6c>
	{
		USART_sendByte(MATCHING_PASSWORD_BYTE);
    2ad2:	8f ef       	ldi	r24, 0xFF	; 255
    2ad4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <USART_sendByte>
    2ad8:	03 c0       	rjmp	.+6      	; 0x2ae0 <APP_confirmPassword+0x72>
	}
	else
	{
		USART_sendByte(UNMATCHING_PASSWORD_BYTE);
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <USART_sendByte>
	}

	return status ;
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ae2:	26 96       	adiw	r28, 0x06	; 6
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <APP_newPasswordConfirm>:
 * 1- The function confirms if the two received passwords match each other.
 * 2- In case of matching, it stores the password in the EEPROM.
 * 3- It return status in both of matching and non-matching cases.
 */
static APP_PasswordStatus APP_newPasswordConfirm(void)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	0f 92       	push	r0
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
	/*receive the password and it's confirmation and store it*/
	APP_receivePassword(g_receivedPassword);	/*the password*/
    2afe:	82 e7       	ldi	r24, 0x72	; 114
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <APP_receivePassword>
	APP_receivePassword(g_passwordBuffer);	/*the password confirmation*/
    2b06:	88 e7       	ldi	r24, 0x78	; 120
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <APP_receivePassword>

	/*compare the two passwords*/
	if(APP_confirmPassword(g_receivedPassword,g_passwordBuffer) == MATCHING_PASSWORDS)
    2b0e:	82 e7       	ldi	r24, 0x72	; 114
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	28 e7       	ldi	r18, 0x78	; 120
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	b9 01       	movw	r22, r18
    2b18:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <APP_confirmPassword>
    2b1c:	88 23       	and	r24, r24
    2b1e:	21 f4       	brne	.+8      	; 0x2b28 <APP_newPasswordConfirm+0x34>
	{
		APP_savePassword(); /*save the password in EEPROM*/
    2b20:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <APP_savePassword>
		return MATCHING_PASSWORDS;
    2b24:	19 82       	std	Y+1, r1	; 0x01
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <APP_newPasswordConfirm+0x38>
	}
	else
	{
		return UNMATCHING_PASSWORDS;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    2b2e:	0f 90       	pop	r0
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <APP_savePassword>:

/*
 * Description:
 * Save the received  password in EEPROM memory.
 * */
static void APP_savePassword(void){
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	0f 92       	push	r0
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0;
    2b40:	19 82       	std	Y+1, r1	; 0x01
	for( i =0; i<PASSWORD_LENGTH; i++){
    2b42:	19 82       	std	Y+1, r1	; 0x01
    2b44:	14 c0       	rjmp	.+40     	; 0x2b6e <APP_savePassword+0x38>
		EEPROM_writeByte(PASSWORD_BASE_ADDRESS+i, g_receivedPassword[i]);
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	88 2f       	mov	r24, r24
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	80 50       	subi	r24, 0x00	; 0
    2b4e:	9e 4f       	sbci	r25, 0xFE	; 254
    2b50:	ac 01       	movw	r20, r24
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	88 2f       	mov	r24, r24
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	fc 01       	movw	r30, r24
    2b5a:	ee 58       	subi	r30, 0x8E	; 142
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	20 81       	ld	r18, Z
    2b60:	ca 01       	movw	r24, r20
    2b62:	62 2f       	mov	r22, r18
    2b64:	0e 94 52 14 	call	0x28a4	; 0x28a4 <EEPROM_writeByte>
 * Description:
 * Save the received  password in EEPROM memory.
 * */
static void APP_savePassword(void){
	uint8 i = 0;
	for( i =0; i<PASSWORD_LENGTH; i++){
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	8f 5f       	subi	r24, 0xFF	; 255
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	85 30       	cpi	r24, 0x05	; 5
    2b72:	48 f3       	brcs	.-46     	; 0x2b46 <APP_savePassword+0x10>
		EEPROM_writeByte(PASSWORD_BASE_ADDRESS+i, g_receivedPassword[i]);
	}
}
    2b74:	0f 90       	pop	r0
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	08 95       	ret

00002b7c <APP_retrievePassword>:

static void APP_retrievePassword(void){
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	0f 92       	push	r0
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0;
    2b86:	19 82       	std	Y+1, r1	; 0x01
	for( i =0; i<PASSWORD_LENGTH; i++){
    2b88:	19 82       	std	Y+1, r1	; 0x01
    2b8a:	13 c0       	rjmp	.+38     	; 0x2bb2 <APP_retrievePassword+0x36>
		EEPROM_readByte(PASSWORD_BASE_ADDRESS + i, g_passwordBuffer + i);
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	88 2f       	mov	r24, r24
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	80 50       	subi	r24, 0x00	; 0
    2b94:	9e 4f       	sbci	r25, 0xFE	; 254
    2b96:	ac 01       	movw	r20, r24
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	88 2f       	mov	r24, r24
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9c 01       	movw	r18, r24
    2ba0:	28 58       	subi	r18, 0x88	; 136
    2ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba4:	ca 01       	movw	r24, r20
    2ba6:	b9 01       	movw	r22, r18
    2ba8:	0e 94 93 14 	call	0x2926	; 0x2926 <EEPROM_readByte>
	}
}

static void APP_retrievePassword(void){
	uint8 i = 0;
	for( i =0; i<PASSWORD_LENGTH; i++){
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	8f 5f       	subi	r24, 0xFF	; 255
    2bb0:	89 83       	std	Y+1, r24	; 0x01
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	85 30       	cpi	r24, 0x05	; 5
    2bb6:	50 f3       	brcs	.-44     	; 0x2b8c <APP_retrievePassword+0x10>
		EEPROM_readByte(PASSWORD_BASE_ADDRESS + i, g_passwordBuffer + i);
	}
}
    2bb8:	0f 90       	pop	r0
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <APP_doorOpenSequence>:
 * 1- rotates the motor CW for 15 seconds 	: Opens the Door
 * 2- turn off the motor for 3 seconds		: Hold the Door open
 * 3- rotates the motor ACW for 15 seconds 	: Closes the Door
 * */
void APP_doorOpenSequence(TIMER_ConfigType * const a_timer1_configPtr)
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <APP_doorOpenSequence+0x6>
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	9a 83       	std	Y+2, r25	; 0x02
    2bcc:	89 83       	std	Y+1, r24	; 0x01
	/*rotate the motor CW for 15 seconds*/
	DcMotor_rotate(CW, motor_speed_100, a_timer1_configPtr);
    2bce:	29 81       	ldd	r18, Y+1	; 0x01
    2bd0:	3a 81       	ldd	r19, Y+2	; 0x02
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	64 e6       	ldi	r22, 0x64	; 100
    2bd6:	a9 01       	movw	r20, r18
    2bd8:	0e 94 fd 13 	call	0x27fa	; 0x27fa <DcMotor_rotate>
	TIMER_init(a_timer1_configPtr);	/*initialize and configure timer 1*/
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	0e 94 a4 08 	call	0x1148	; 0x1148 <TIMER_init>
	while(g_timer1_tick < 2);
    2be4:	80 91 7f 00 	lds	r24, 0x007F
    2be8:	82 30       	cpi	r24, 0x02	; 2
    2bea:	e0 f3       	brcs	.-8      	; 0x2be4 <APP_doorOpenSequence+0x24>

	/*turn off the motor for 15 seconds*/
	DcMotor_off();
    2bec:	0e 94 41 14 	call	0x2882	; 0x2882 <DcMotor_off>
	TIMER_changeCompareValue(TIMER1_ID, TIMER1_COMPARE_VALUE_3SEC);
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	6e e8       	ldi	r22, 0x8E	; 142
    2bf4:	7b e5       	ldi	r23, 0x5B	; 91
    2bf6:	0e 94 37 09 	call	0x126e	; 0x126e <TIMER_changeCompareValue>
	while(g_timer1_tick < 3);
    2bfa:	80 91 7f 00 	lds	r24, 0x007F
    2bfe:	83 30       	cpi	r24, 0x03	; 3
    2c00:	e0 f3       	brcs	.-8      	; 0x2bfa <APP_doorOpenSequence+0x3a>

	/*rotate the motor ACW for 15 seconds*/
	DcMotor_rotate(ACW, motor_speed_100, a_timer1_configPtr);
    2c02:	29 81       	ldd	r18, Y+1	; 0x01
    2c04:	3a 81       	ldd	r19, Y+2	; 0x02
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	64 e6       	ldi	r22, 0x64	; 100
    2c0a:	a9 01       	movw	r20, r18
    2c0c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <DcMotor_rotate>
	TIMER_changeCompareValue(TIMER1_ID, TIMER1_COMPARE_VALUE_7SEC);
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	62 ee       	ldi	r22, 0xE2	; 226
    2c14:	74 ee       	ldi	r23, 0xE4	; 228
    2c16:	0e 94 37 09 	call	0x126e	; 0x126e <TIMER_changeCompareValue>
	while(g_timer1_tick < 5);
    2c1a:	80 91 7f 00 	lds	r24, 0x007F
    2c1e:	85 30       	cpi	r24, 0x05	; 5
    2c20:	e0 f3       	brcs	.-8      	; 0x2c1a <APP_doorOpenSequence+0x5a>

	/* turn off the timer and the motor*/
	TIMER_deInit(TIMER1_ID);
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	0e 94 d6 08 	call	0x11ac	; 0x11ac <TIMER_deInit>
	DcMotor_off();
    2c28:	0e 94 41 14 	call	0x2882	; 0x2882 <DcMotor_off>
	g_timer1_tick = 0;
    2c2c:	10 92 7f 00 	sts	0x007F, r1
}
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	cf 91       	pop	r28
    2c36:	df 91       	pop	r29
    2c38:	08 95       	ret

00002c3a <APP_changePassword>:
 * Description:
 * A function that changes the password.
 * The function is executed in case of a New password or changing an existing one.
 * */
void APP_changePassword(void)
{
    2c3a:	df 93       	push	r29
    2c3c:	cf 93       	push	r28
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
	while (APP_newPasswordConfirm() == UNMATCHING_PASSWORDS)
    2c42:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <APP_newPasswordConfirm>
    2c46:	81 30       	cpi	r24, 0x01	; 1
    2c48:	e1 f3       	breq	.-8      	; 0x2c42 <APP_changePassword+0x8>
	{
		; /*keep waiting until the two received passwords match*/
	}
}
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <APP_alarmSequence>:
/*
 * Description:
 * sets the buzzer for 1 minute.
 * */
void APP_alarmSequence(TIMER_ConfigType * const a_timer1_config)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <APP_alarmSequence+0x6>
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01
	/*starts the buzzer*/
	BUZZER_start();
    2c5e:	0e 94 04 15 	call	0x2a08	; 0x2a08 <BUZZER_start>
	/*configure timer1 to count for a minute*/
	a_timer1_config->mode_data.ctc_compare_value = TIMER1_COMPARE_VALUE_7SEC;
    2c62:	e9 81       	ldd	r30, Y+1	; 0x01
    2c64:	fa 81       	ldd	r31, Y+2	; 0x02
    2c66:	82 ee       	ldi	r24, 0xE2	; 226
    2c68:	94 ee       	ldi	r25, 0xE4	; 228
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
	TIMER_init(a_timer1_config);
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	9a 81       	ldd	r25, Y+2	; 0x02
    2c72:	0e 94 a4 08 	call	0x1148	; 0x1148 <TIMER_init>
	while(g_timer1_tick < 8);
    2c76:	80 91 7f 00 	lds	r24, 0x007F
    2c7a:	88 30       	cpi	r24, 0x08	; 8
    2c7c:	e0 f3       	brcs	.-8      	; 0x2c76 <APP_alarmSequence+0x26>

	BUZZER_stop(); /*stop the buzzer*/
    2c7e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <BUZZER_stop>

	/* de-initialize timer 1*/
	g_timer1_tick = 0;
    2c82:	10 92 7f 00 	sts	0x007F, r1
	TIMER_deInit(TIMER1_ID);
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	0e 94 d6 08 	call	0x11ac	; 0x11ac <TIMER_deInit>
}
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <APP_timerTickIncrement>:

/*
 * Description :
 * Callback function  that increments a global variable g_timer1_tick
 */
void APP_timerTickIncrement(void){
    2c96:	df 93       	push	r29
    2c98:	cf 93       	push	r28
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
	g_timer1_tick++;
    2c9e:	80 91 7f 00 	lds	r24, 0x007F
    2ca2:	8f 5f       	subi	r24, 0xFF	; 255
    2ca4:	80 93 7f 00 	sts	0x007F, r24
}
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <APP_receiveCommand>:
/*
 * Description:
 * Function that receives a command from HMI ECU.
 * It returns the given command or NO_COMMAND if non is received (wrong pass).
 * */
APP_Commands APP_receiveCommand(void){
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	0f 92       	push	r0
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
	/*receive password from HMI ECU to perform actions*/
	APP_receivePassword(g_receivedPassword);
    2cb8:	82 e7       	ldi	r24, 0x72	; 114
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <APP_receivePassword>

	/*get the password form memory and store it in a buffer to be compared with the received one*/
	APP_retrievePassword();
    2cc0:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <APP_retrievePassword>
	if(APP_confirmPassword(g_receivedPassword,g_passwordBuffer) == MATCHING_PASSWORDS)
    2cc4:	82 e7       	ldi	r24, 0x72	; 114
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	28 e7       	ldi	r18, 0x78	; 120
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	b9 01       	movw	r22, r18
    2cce:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <APP_confirmPassword>
    2cd2:	88 23       	and	r24, r24
    2cd4:	69 f4       	brne	.+26     	; 0x2cf0 <APP_receiveCommand+0x42>
	{
		/*reset the counter if a correct password is entered*/
		g_wrong_passwords = 0;
    2cd6:	10 92 7e 00 	sts	0x007E, r1

		/*Acknowledge that receiver (CONTROL ECU) is ready to receive command*/
		USART_sendByte(USART_RECEIVER_READY_BYTE);
    2cda:	86 e6       	ldi	r24, 0x66	; 102
    2cdc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <USART_sendByte>

		while( USART_receiveByte() != USART_SENDER_READY_BYTE)
    2ce0:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <USART_receiveByte>
    2ce4:	86 36       	cpi	r24, 0x66	; 102
    2ce6:	e1 f7       	brne	.-8      	; 0x2ce0 <APP_receiveCommand+0x32>
		{
			; /*wait until the sender is (HMI ECU) ready to send the password*/
		}
		return USART_receiveByte();
    2ce8:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <USART_receiveByte>
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	0d c0       	rjmp	.+26     	; 0x2d0a <APP_receiveCommand+0x5c>
	}
	else
	{
		g_wrong_passwords++;
    2cf0:	80 91 7e 00 	lds	r24, 0x007E
    2cf4:	8f 5f       	subi	r24, 0xFF	; 255
    2cf6:	80 93 7e 00 	sts	0x007E, r24
		if(g_wrong_passwords >= MAX_WRONG_PASSWORDS) /*the user has up to 3 trails*/
    2cfa:	80 91 7e 00 	lds	r24, 0x007E
    2cfe:	83 30       	cpi	r24, 0x03	; 3
    2d00:	18 f0       	brcs	.+6      	; 0x2d08 <APP_receiveCommand+0x5a>
		{
			return ALARM_COMMAND;
    2d02:	82 e1       	ldi	r24, 0x12	; 18
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	01 c0       	rjmp	.+2      	; 0x2d0a <APP_receiveCommand+0x5c>
		}
		else
		{
			return NO_COMMAND; /*no command is received for HMI ECU*/
    2d08:	19 82       	std	Y+1, r1	; 0x01
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
		}
	}
}
    2d0c:	0f 90       	pop	r0
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <main>:

#include "APP/app.h"
#include "util/delay.h"

int main()
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	ea 97       	sbiw	r28, 0x3a	; 58
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
			.usart_baud_rate = 9600,
			.usart_bit_mode = DATA_BITS_8,
			.usart_stop_bits = ONE_BIT,
			.usart_mode = ASYNCHRONOUS,
			.usart_parity = PARITY_DISABLED
	};
    2d28:	89 e0       	ldi	r24, 0x09	; 9
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	7a 96       	adiw	r30, 0x1a	; 26
    2d2e:	df 01       	movw	r26, r30
    2d30:	28 2f       	mov	r18, r24
    2d32:	1d 92       	st	X+, r1
    2d34:	2a 95       	dec	r18
    2d36:	e9 f7       	brne	.-6      	; 0x2d32 <main+0x1e>
    2d38:	80 e8       	ldi	r24, 0x80	; 128
    2d3a:	95 e2       	ldi	r25, 0x25	; 37
    2d3c:	a0 e0       	ldi	r26, 0x00	; 0
    2d3e:	b0 e0       	ldi	r27, 0x00	; 0
    2d40:	8a 8f       	std	Y+26, r24	; 0x1a
    2d42:	9b 8f       	std	Y+27, r25	; 0x1b
    2d44:	ac 8f       	std	Y+28, r26	; 0x1c
    2d46:	bd 8f       	std	Y+29, r27	; 0x1d
    2d48:	83 e0       	ldi	r24, 0x03	; 3
    2d4a:	8e 8f       	std	Y+30, r24	; 0x1e
			.timer_id = TIMER0_ID,
			.prescaler.timer0 = TIMER0_F_CPU_64,
			.mode = PWM_MODE,
			.ocx_pin_behavior = CLEAR_OCX,
			.mode_data.pwm_duty_cycle = motor_speed_100,
	};
    2d4c:	87 e0       	ldi	r24, 0x07	; 7
    2d4e:	fe 01       	movw	r30, r28
    2d50:	b3 96       	adiw	r30, 0x23	; 35
    2d52:	df 01       	movw	r26, r30
    2d54:	28 2f       	mov	r18, r24
    2d56:	1d 92       	st	X+, r1
    2d58:	2a 95       	dec	r18
    2d5a:	e9 f7       	brne	.-6      	; 0x2d56 <main+0x42>
    2d5c:	84 e6       	ldi	r24, 0x64	; 100
    2d5e:	8b a3       	std	Y+35, r24	; 0x23
    2d60:	83 e0       	ldi	r24, 0x03	; 3
    2d62:	8e a3       	std	Y+38, r24	; 0x26
    2d64:	83 e0       	ldi	r24, 0x03	; 3
    2d66:	8f a3       	std	Y+39, r24	; 0x27
    2d68:	82 e0       	ldi	r24, 0x02	; 2
    2d6a:	88 a7       	std	Y+40, r24	; 0x28
			.timer_id = TIMER1_ID,
			.mode = COMPARE_MODE,
			.mode_data.ctc_compare_value = TIMER1_COMPARE_VALUE_7SEC,
			.prescaler.timer1 = TIMER1_F_CPU_1024,
			.ocx_pin_behavior = DISCONNECT_OCX,
	};
    2d6c:	87 e0       	ldi	r24, 0x07	; 7
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ba 96       	adiw	r30, 0x2a	; 42
    2d72:	df 01       	movw	r26, r30
    2d74:	28 2f       	mov	r18, r24
    2d76:	1d 92       	st	X+, r1
    2d78:	2a 95       	dec	r18
    2d7a:	e9 f7       	brne	.-6      	; 0x2d76 <main+0x62>
    2d7c:	82 ee       	ldi	r24, 0xE2	; 226
    2d7e:	94 ee       	ldi	r25, 0xE4	; 228
    2d80:	9b a7       	std	Y+43, r25	; 0x2b
    2d82:	8a a7       	std	Y+42, r24	; 0x2a
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	8c a7       	std	Y+44, r24	; 0x2c
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	8d a7       	std	Y+45, r24	; 0x2d
    2d8c:	85 e0       	ldi	r24, 0x05	; 5
    2d8e:	8e a7       	std	Y+46, r24	; 0x2e
	TWI_ConfigType twi_config =
	{
			.twi_slave_address = 0x01,
			.twi_prescaler = twi_prescaler_1,
			.twi_bit_rate = 400
	};
    2d90:	ce 01       	movw	r24, r28
    2d92:	c1 96       	adiw	r24, 0x31	; 49
    2d94:	9f ab       	std	Y+55, r25	; 0x37
    2d96:	8e ab       	std	Y+54, r24	; 0x36
    2d98:	a8 e6       	ldi	r26, 0x68	; 104
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	b9 af       	std	Y+57, r27	; 0x39
    2d9e:	a8 af       	std	Y+56, r26	; 0x38
    2da0:	b3 e0       	ldi	r27, 0x03	; 3
    2da2:	ba af       	std	Y+58, r27	; 0x3a
    2da4:	e8 ad       	ldd	r30, Y+56	; 0x38
    2da6:	f9 ad       	ldd	r31, Y+57	; 0x39
    2da8:	00 80       	ld	r0, Z
    2daa:	28 ad       	ldd	r18, Y+56	; 0x38
    2dac:	39 ad       	ldd	r19, Y+57	; 0x39
    2dae:	2f 5f       	subi	r18, 0xFF	; 255
    2db0:	3f 4f       	sbci	r19, 0xFF	; 255
    2db2:	39 af       	std	Y+57, r19	; 0x39
    2db4:	28 af       	std	Y+56, r18	; 0x38
    2db6:	ae a9       	ldd	r26, Y+54	; 0x36
    2db8:	bf a9       	ldd	r27, Y+55	; 0x37
    2dba:	0c 92       	st	X, r0
    2dbc:	ee a9       	ldd	r30, Y+54	; 0x36
    2dbe:	ff a9       	ldd	r31, Y+55	; 0x37
    2dc0:	31 96       	adiw	r30, 0x01	; 1
    2dc2:	ff ab       	std	Y+55, r31	; 0x37
    2dc4:	ee ab       	std	Y+54, r30	; 0x36
    2dc6:	fa ad       	ldd	r31, Y+58	; 0x3a
    2dc8:	f1 50       	subi	r31, 0x01	; 1
    2dca:	fa af       	std	Y+58, r31	; 0x3a
    2dcc:	2a ad       	ldd	r18, Y+58	; 0x3a
    2dce:	22 23       	and	r18, r18
    2dd0:	49 f7       	brne	.-46     	; 0x2da4 <main+0x90>

	/*set timer1 call back function*/
	TIMER_setCallBackFunc(TIMER1_ID, APP_timerTickIncrement);
    2dd2:	2b e4       	ldi	r18, 0x4B	; 75
    2dd4:	36 e1       	ldi	r19, 0x16	; 22
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	b9 01       	movw	r22, r18
    2dda:	0e 94 fe 08 	call	0x11fc	; 0x11fc <TIMER_setCallBackFunc>

	/*enable global interrupt bit (I-bit)*/
	sei();
    2dde:	78 94       	sei

	/*Peripherals & Modules Initialization*/
	DcMotor_init();
    2de0:	0e 94 e5 13 	call	0x27ca	; 0x27ca <DcMotor_init>
	BUZZER_init();
    2de4:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <BUZZER_init>
	TIMER_init(&timer0_config);
    2de8:	ce 01       	movw	r24, r28
    2dea:	83 96       	adiw	r24, 0x23	; 35
    2dec:	0e 94 a4 08 	call	0x1148	; 0x1148 <TIMER_init>
	TWI_init(&twi_config);
    2df0:	ce 01       	movw	r24, r28
    2df2:	c1 96       	adiw	r24, 0x31	; 49
    2df4:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <TWI_init>
	USART_init(&uart_config);
    2df8:	ce 01       	movw	r24, r28
    2dfa:	4a 96       	adiw	r24, 0x1a	; 26
    2dfc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <USART_init>
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	a0 e8       	ldi	r26, 0x80	; 128
    2e06:	bf e3       	ldi	r27, 0x3F	; 63
    2e08:	8d 8b       	std	Y+21, r24	; 0x15
    2e0a:	9e 8b       	std	Y+22, r25	; 0x16
    2e0c:	af 8b       	std	Y+23, r26	; 0x17
    2e0e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e10:	6d 89       	ldd	r22, Y+21	; 0x15
    2e12:	7e 89       	ldd	r23, Y+22	; 0x16
    2e14:	8f 89       	ldd	r24, Y+23	; 0x17
    2e16:	98 8d       	ldd	r25, Y+24	; 0x18
    2e18:	2b ea       	ldi	r18, 0xAB	; 171
    2e1a:	3a ea       	ldi	r19, 0xAA	; 170
    2e1c:	4a e2       	ldi	r20, 0x2A	; 42
    2e1e:	50 e4       	ldi	r21, 0x40	; 64
    2e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	89 8b       	std	Y+17, r24	; 0x11
    2e2a:	9a 8b       	std	Y+18, r25	; 0x12
    2e2c:	ab 8b       	std	Y+19, r26	; 0x13
    2e2e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e30:	69 89       	ldd	r22, Y+17	; 0x11
    2e32:	7a 89       	ldd	r23, Y+18	; 0x12
    2e34:	8b 89       	ldd	r24, Y+19	; 0x13
    2e36:	9c 89       	ldd	r25, Y+20	; 0x14
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	40 e8       	ldi	r20, 0x80	; 128
    2e3e:	5f e3       	ldi	r21, 0x3F	; 63
    2e40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e44:	88 23       	and	r24, r24
    2e46:	1c f4       	brge	.+6      	; 0x2e4e <main+0x13a>
		__ticks = 1;
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	88 8b       	std	Y+16, r24	; 0x10
    2e4c:	91 c0       	rjmp	.+290    	; 0x2f70 <main+0x25c>
	else if (__tmp > 255)
    2e4e:	69 89       	ldd	r22, Y+17	; 0x11
    2e50:	7a 89       	ldd	r23, Y+18	; 0x12
    2e52:	8b 89       	ldd	r24, Y+19	; 0x13
    2e54:	9c 89       	ldd	r25, Y+20	; 0x14
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	4f e7       	ldi	r20, 0x7F	; 127
    2e5c:	53 e4       	ldi	r21, 0x43	; 67
    2e5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e62:	18 16       	cp	r1, r24
    2e64:	0c f0       	brlt	.+2      	; 0x2e68 <main+0x154>
    2e66:	7b c0       	rjmp	.+246    	; 0x2f5e <main+0x24a>
	{
		_delay_ms(__us / 1000.0);
    2e68:	6d 89       	ldd	r22, Y+21	; 0x15
    2e6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4a e7       	ldi	r20, 0x7A	; 122
    2e76:	54 e4       	ldi	r21, 0x44	; 68
    2e78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	8c 87       	std	Y+12, r24	; 0x0c
    2e82:	9d 87       	std	Y+13, r25	; 0x0d
    2e84:	ae 87       	std	Y+14, r26	; 0x0e
    2e86:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e88:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e8a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	4a ef       	ldi	r20, 0xFA	; 250
    2e96:	54 e4       	ldi	r21, 0x44	; 68
    2e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	88 87       	std	Y+8, r24	; 0x08
    2ea2:	99 87       	std	Y+9, r25	; 0x09
    2ea4:	aa 87       	std	Y+10, r26	; 0x0a
    2ea6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ea8:	68 85       	ldd	r22, Y+8	; 0x08
    2eaa:	79 85       	ldd	r23, Y+9	; 0x09
    2eac:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eae:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	40 e8       	ldi	r20, 0x80	; 128
    2eb6:	5f e3       	ldi	r21, 0x3F	; 63
    2eb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ebc:	88 23       	and	r24, r24
    2ebe:	2c f4       	brge	.+10     	; 0x2eca <main+0x1b6>
		__ticks = 1;
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	9f 83       	std	Y+7, r25	; 0x07
    2ec6:	8e 83       	std	Y+6, r24	; 0x06
    2ec8:	3f c0       	rjmp	.+126    	; 0x2f48 <main+0x234>
	else if (__tmp > 65535)
    2eca:	68 85       	ldd	r22, Y+8	; 0x08
    2ecc:	79 85       	ldd	r23, Y+9	; 0x09
    2ece:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ed0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	3f ef       	ldi	r19, 0xFF	; 255
    2ed6:	4f e7       	ldi	r20, 0x7F	; 127
    2ed8:	57 e4       	ldi	r21, 0x47	; 71
    2eda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ede:	18 16       	cp	r1, r24
    2ee0:	4c f5       	brge	.+82     	; 0x2f34 <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ee4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ee6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ee8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	40 e2       	ldi	r20, 0x20	; 32
    2ef0:	51 e4       	ldi	r21, 0x41	; 65
    2ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	bc 01       	movw	r22, r24
    2efc:	cd 01       	movw	r24, r26
    2efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	9f 83       	std	Y+7, r25	; 0x07
    2f08:	8e 83       	std	Y+6, r24	; 0x06
    2f0a:	0f c0       	rjmp	.+30     	; 0x2f2a <main+0x216>
    2f0c:	88 ec       	ldi	r24, 0xC8	; 200
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	9d 83       	std	Y+5, r25	; 0x05
    2f12:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f14:	8c 81       	ldd	r24, Y+4	; 0x04
    2f16:	9d 81       	ldd	r25, Y+5	; 0x05
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <main+0x204>
    2f1c:	9d 83       	std	Y+5, r25	; 0x05
    2f1e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f20:	8e 81       	ldd	r24, Y+6	; 0x06
    2f22:	9f 81       	ldd	r25, Y+7	; 0x07
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	9f 83       	std	Y+7, r25	; 0x07
    2f28:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f2c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f2e:	00 97       	sbiw	r24, 0x00	; 0
    2f30:	69 f7       	brne	.-38     	; 0x2f0c <main+0x1f8>
    2f32:	24 c0       	rjmp	.+72     	; 0x2f7c <main+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f34:	68 85       	ldd	r22, Y+8	; 0x08
    2f36:	79 85       	ldd	r23, Y+9	; 0x09
    2f38:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	9f 83       	std	Y+7, r25	; 0x07
    2f46:	8e 83       	std	Y+6, r24	; 0x06
    2f48:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f4c:	9b 83       	std	Y+3, r25	; 0x03
    2f4e:	8a 83       	std	Y+2, r24	; 0x02
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	9b 81       	ldd	r25, Y+3	; 0x03
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <main+0x240>
    2f58:	9b 83       	std	Y+3, r25	; 0x03
    2f5a:	8a 83       	std	Y+2, r24	; 0x02
    2f5c:	0f c0       	rjmp	.+30     	; 0x2f7c <main+0x268>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f5e:	69 89       	ldd	r22, Y+17	; 0x11
    2f60:	7a 89       	ldd	r23, Y+18	; 0x12
    2f62:	8b 89       	ldd	r24, Y+19	; 0x13
    2f64:	9c 89       	ldd	r25, Y+20	; 0x14
    2f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	88 8b       	std	Y+16, r24	; 0x10
    2f70:	88 89       	ldd	r24, Y+16	; 0x10
    2f72:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	8a 95       	dec	r24
    2f78:	f1 f7       	brne	.-4      	; 0x2f76 <main+0x262>
    2f7a:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(1); /*a small delay to initialize the peripherals*/

	/*Set a new password at the beginning of the program*/
	APP_changePassword();
    2f7c:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <APP_changePassword>

	while(1){

		/*receive command from HMI ECU*/
		command = APP_receiveCommand();
    2f80:	0e 94 57 16 	call	0x2cae	; 0x2cae <APP_receiveCommand>
    2f84:	89 8f       	std	Y+25, r24	; 0x19

		/*Execute the received command from HMI ECU*/
		switch(command){
    2f86:	89 8d       	ldd	r24, Y+25	; 0x19
    2f88:	a8 2f       	mov	r26, r24
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	bd ab       	std	Y+53, r27	; 0x35
    2f8e:	ac ab       	std	Y+52, r26	; 0x34
    2f90:	ec a9       	ldd	r30, Y+52	; 0x34
    2f92:	fd a9       	ldd	r31, Y+53	; 0x35
    2f94:	e1 31       	cpi	r30, 0x11	; 17
    2f96:	f1 05       	cpc	r31, r1
    2f98:	79 f0       	breq	.+30     	; 0x2fb8 <main+0x2a4>
    2f9a:	2c a9       	ldd	r18, Y+52	; 0x34
    2f9c:	3d a9       	ldd	r19, Y+53	; 0x35
    2f9e:	22 31       	cpi	r18, 0x12	; 18
    2fa0:	31 05       	cpc	r19, r1
    2fa2:	69 f0       	breq	.+26     	; 0x2fbe <main+0x2aa>
    2fa4:	8c a9       	ldd	r24, Y+52	; 0x34
    2fa6:	9d a9       	ldd	r25, Y+53	; 0x35
    2fa8:	80 31       	cpi	r24, 0x10	; 16
    2faa:	91 05       	cpc	r25, r1
    2fac:	49 f7       	brne	.-46     	; 0x2f80 <main+0x26c>

		case OPEN_DOOR_COMMAND:
			APP_doorOpenSequence(&timer1_config);
    2fae:	ce 01       	movw	r24, r28
    2fb0:	8a 96       	adiw	r24, 0x2a	; 42
    2fb2:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <APP_doorOpenSequence>
    2fb6:	e4 cf       	rjmp	.-56     	; 0x2f80 <main+0x26c>
			break;
		case CHANGE_PASSWORD_COMMAND:
			APP_changePassword();
    2fb8:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <APP_changePassword>
    2fbc:	e1 cf       	rjmp	.-62     	; 0x2f80 <main+0x26c>
			break;
		case ALARM_COMMAND:
			APP_alarmSequence(&timer1_config);
    2fbe:	ce 01       	movw	r24, r28
    2fc0:	8a 96       	adiw	r24, 0x2a	; 42
    2fc2:	0e 94 28 16 	call	0x2c50	; 0x2c50 <APP_alarmSequence>
    2fc6:	dc cf       	rjmp	.-72     	; 0x2f80 <main+0x26c>

00002fc8 <__mulsi3>:
    2fc8:	62 9f       	mul	r22, r18
    2fca:	d0 01       	movw	r26, r0
    2fcc:	73 9f       	mul	r23, r19
    2fce:	f0 01       	movw	r30, r0
    2fd0:	82 9f       	mul	r24, r18
    2fd2:	e0 0d       	add	r30, r0
    2fd4:	f1 1d       	adc	r31, r1
    2fd6:	64 9f       	mul	r22, r20
    2fd8:	e0 0d       	add	r30, r0
    2fda:	f1 1d       	adc	r31, r1
    2fdc:	92 9f       	mul	r25, r18
    2fde:	f0 0d       	add	r31, r0
    2fe0:	83 9f       	mul	r24, r19
    2fe2:	f0 0d       	add	r31, r0
    2fe4:	74 9f       	mul	r23, r20
    2fe6:	f0 0d       	add	r31, r0
    2fe8:	65 9f       	mul	r22, r21
    2fea:	f0 0d       	add	r31, r0
    2fec:	99 27       	eor	r25, r25
    2fee:	72 9f       	mul	r23, r18
    2ff0:	b0 0d       	add	r27, r0
    2ff2:	e1 1d       	adc	r30, r1
    2ff4:	f9 1f       	adc	r31, r25
    2ff6:	63 9f       	mul	r22, r19
    2ff8:	b0 0d       	add	r27, r0
    2ffa:	e1 1d       	adc	r30, r1
    2ffc:	f9 1f       	adc	r31, r25
    2ffe:	bd 01       	movw	r22, r26
    3000:	cf 01       	movw	r24, r30
    3002:	11 24       	eor	r1, r1
    3004:	08 95       	ret

00003006 <__udivmodhi4>:
    3006:	aa 1b       	sub	r26, r26
    3008:	bb 1b       	sub	r27, r27
    300a:	51 e1       	ldi	r21, 0x11	; 17
    300c:	07 c0       	rjmp	.+14     	; 0x301c <__udivmodhi4_ep>

0000300e <__udivmodhi4_loop>:
    300e:	aa 1f       	adc	r26, r26
    3010:	bb 1f       	adc	r27, r27
    3012:	a6 17       	cp	r26, r22
    3014:	b7 07       	cpc	r27, r23
    3016:	10 f0       	brcs	.+4      	; 0x301c <__udivmodhi4_ep>
    3018:	a6 1b       	sub	r26, r22
    301a:	b7 0b       	sbc	r27, r23

0000301c <__udivmodhi4_ep>:
    301c:	88 1f       	adc	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	5a 95       	dec	r21
    3022:	a9 f7       	brne	.-22     	; 0x300e <__udivmodhi4_loop>
    3024:	80 95       	com	r24
    3026:	90 95       	com	r25
    3028:	bc 01       	movw	r22, r24
    302a:	cd 01       	movw	r24, r26
    302c:	08 95       	ret

0000302e <__udivmodsi4>:
    302e:	a1 e2       	ldi	r26, 0x21	; 33
    3030:	1a 2e       	mov	r1, r26
    3032:	aa 1b       	sub	r26, r26
    3034:	bb 1b       	sub	r27, r27
    3036:	fd 01       	movw	r30, r26
    3038:	0d c0       	rjmp	.+26     	; 0x3054 <__udivmodsi4_ep>

0000303a <__udivmodsi4_loop>:
    303a:	aa 1f       	adc	r26, r26
    303c:	bb 1f       	adc	r27, r27
    303e:	ee 1f       	adc	r30, r30
    3040:	ff 1f       	adc	r31, r31
    3042:	a2 17       	cp	r26, r18
    3044:	b3 07       	cpc	r27, r19
    3046:	e4 07       	cpc	r30, r20
    3048:	f5 07       	cpc	r31, r21
    304a:	20 f0       	brcs	.+8      	; 0x3054 <__udivmodsi4_ep>
    304c:	a2 1b       	sub	r26, r18
    304e:	b3 0b       	sbc	r27, r19
    3050:	e4 0b       	sbc	r30, r20
    3052:	f5 0b       	sbc	r31, r21

00003054 <__udivmodsi4_ep>:
    3054:	66 1f       	adc	r22, r22
    3056:	77 1f       	adc	r23, r23
    3058:	88 1f       	adc	r24, r24
    305a:	99 1f       	adc	r25, r25
    305c:	1a 94       	dec	r1
    305e:	69 f7       	brne	.-38     	; 0x303a <__udivmodsi4_loop>
    3060:	60 95       	com	r22
    3062:	70 95       	com	r23
    3064:	80 95       	com	r24
    3066:	90 95       	com	r25
    3068:	9b 01       	movw	r18, r22
    306a:	ac 01       	movw	r20, r24
    306c:	bd 01       	movw	r22, r26
    306e:	cf 01       	movw	r24, r30
    3070:	08 95       	ret

00003072 <__prologue_saves__>:
    3072:	2f 92       	push	r2
    3074:	3f 92       	push	r3
    3076:	4f 92       	push	r4
    3078:	5f 92       	push	r5
    307a:	6f 92       	push	r6
    307c:	7f 92       	push	r7
    307e:	8f 92       	push	r8
    3080:	9f 92       	push	r9
    3082:	af 92       	push	r10
    3084:	bf 92       	push	r11
    3086:	cf 92       	push	r12
    3088:	df 92       	push	r13
    308a:	ef 92       	push	r14
    308c:	ff 92       	push	r15
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	ca 1b       	sub	r28, r26
    309c:	db 0b       	sbc	r29, r27
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	09 94       	ijmp

000030aa <__epilogue_restores__>:
    30aa:	2a 88       	ldd	r2, Y+18	; 0x12
    30ac:	39 88       	ldd	r3, Y+17	; 0x11
    30ae:	48 88       	ldd	r4, Y+16	; 0x10
    30b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    30bc:	b9 84       	ldd	r11, Y+9	; 0x09
    30be:	c8 84       	ldd	r12, Y+8	; 0x08
    30c0:	df 80       	ldd	r13, Y+7	; 0x07
    30c2:	ee 80       	ldd	r14, Y+6	; 0x06
    30c4:	fd 80       	ldd	r15, Y+5	; 0x05
    30c6:	0c 81       	ldd	r16, Y+4	; 0x04
    30c8:	1b 81       	ldd	r17, Y+3	; 0x03
    30ca:	aa 81       	ldd	r26, Y+2	; 0x02
    30cc:	b9 81       	ldd	r27, Y+1	; 0x01
    30ce:	ce 0f       	add	r28, r30
    30d0:	d1 1d       	adc	r29, r1
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	ed 01       	movw	r28, r26
    30de:	08 95       	ret

000030e0 <_exit>:
    30e0:	f8 94       	cli

000030e2 <__stop_program>:
    30e2:	ff cf       	rjmp	.-2      	; 0x30e2 <__stop_program>
