
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000280  00800060  000041bc  00004250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008002e0  008002e0  000044d0  2**0
                  ALLOC
  3 .stab         00003d8c  00000000  00000000  000044d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002721  00000000  00000000  0000825c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000a97d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000aafd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000acd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000ccdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000de4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000ee50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000eff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000f2b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fb5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_4>
      14:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 27 08 	jmp	0x104e	; 0x104e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__vector_9>
      28:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__vector_10>
      2c:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3f       	cpi	r26, 0xF1	; 241
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <main>
      8a:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ed       	ldi	r26, 0xD8	; 216
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 20 	jmp	0x4100	; 0x4100 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 20 	jmp	0x4100	; 0x4100 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ed       	ldi	r24, 0xD8	; 216
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 20 	jmp	0x4100	; 0x4100 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 80 20 	jmp	0x4100	; 0x4100 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 80 20 	jmp	0x4100	; 0x4100 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 84 20 	jmp	0x4108	; 0x4108 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e0 52       	subi	r30, 0x20	; 32
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <USART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the USART.
 * 3. Setup the USART baud rate.
 */
void USART_init(const USART_ConfigType * const a_usartConfigPtr){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <USART_init+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <USART_init+0x8>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9c 83       	std	Y+4, r25	; 0x04
     ce4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 reg_UBRR_value = 0;
     ce6:	1a 82       	std	Y+2, r1	; 0x02
     ce8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     cea:	eb e2       	ldi	r30, 0x2B	; 43
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	80 83       	st	Z, r24
	 * TXEN  = 1 Transmitter Enable
	 * RXEN  = 1 Receiver Enable
	 * UCSZ2 = 1/0 For 9/other data bit mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = ((a_usartConfigPtr->usart_bit_mode & 0x04)) | (1<<TXEN) | (1<<RXEN);
     cf2:	aa e2       	ldi	r26, 0x2A	; 42
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	eb 81       	ldd	r30, Y+3	; 0x03
     cf8:	fc 81       	ldd	r31, Y+4	; 0x04
     cfa:	84 81       	ldd	r24, Z+4	; 0x04
     cfc:	84 70       	andi	r24, 0x04	; 4
     cfe:	88 61       	ori	r24, 0x18	; 24
     d00:	8c 93       	st	X, r24
	 * UMSEL   = 0/1 Async/Sync Operation
	 * UPM1:0   (parity bit configuration)
	 * USBS    = 0/1 One/Two stop bit(s)
	 * UCSZ1:0  (data bits mode config.)
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (a_usartConfigPtr->usart_mode << UMSEL) | (a_usartConfigPtr->usart_parity << UPM0)\
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	eb 81       	ldd	r30, Y+3	; 0x03
     d08:	fc 81       	ldd	r31, Y+4	; 0x04
     d0a:	86 81       	ldd	r24, Z+6	; 0x06
     d0c:	88 2f       	mov	r24, r24
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	00 24       	eor	r0, r0
     d12:	96 95       	lsr	r25
     d14:	87 95       	ror	r24
     d16:	07 94       	ror	r0
     d18:	96 95       	lsr	r25
     d1a:	87 95       	ror	r24
     d1c:	07 94       	ror	r0
     d1e:	98 2f       	mov	r25, r24
     d20:	80 2d       	mov	r24, r0
     d22:	28 2f       	mov	r18, r24
     d24:	20 68       	ori	r18, 0x80	; 128
     d26:	eb 81       	ldd	r30, Y+3	; 0x03
     d28:	fc 81       	ldd	r31, Y+4	; 0x04
     d2a:	87 81       	ldd	r24, Z+7	; 0x07
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	82 95       	swap	r24
     d32:	92 95       	swap	r25
     d34:	90 7f       	andi	r25, 0xF0	; 240
     d36:	98 27       	eor	r25, r24
     d38:	80 7f       	andi	r24, 0xF0	; 240
     d3a:	98 27       	eor	r25, r24
     d3c:	28 2b       	or	r18, r24
     d3e:	eb 81       	ldd	r30, Y+3	; 0x03
     d40:	fc 81       	ldd	r31, Y+4	; 0x04
     d42:	85 81       	ldd	r24, Z+5	; 0x05
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	28 2b       	or	r18, r24
     d56:	eb 81       	ldd	r30, Y+3	; 0x03
     d58:	fc 81       	ldd	r31, Y+4	; 0x04
     d5a:	84 81       	ldd	r24, Z+4	; 0x04
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	83 70       	andi	r24, 0x03	; 3
     d62:	90 70       	andi	r25, 0x00	; 0
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	82 2b       	or	r24, r18
     d6a:	8c 93       	st	X, r24
			| ( a_usartConfigPtr->usart_stop_bits << USBS) | ((a_usartConfigPtr->usart_bit_mode & 0x03) << UCSZ0);

	if(a_usartConfigPtr->usart_mode == SYNCHRONOUS){
     d6c:	eb 81       	ldd	r30, Y+3	; 0x03
     d6e:	fc 81       	ldd	r31, Y+4	; 0x04
     d70:	86 81       	ldd	r24, Z+6	; 0x06
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	51 f4       	brne	.+20     	; 0xd8a <USART_init+0xb4>
		/* UCPOL   	(clock configuration for Async. mode)*/
		UCSRC |= (a_usartConfigPtr->usart_clock_config << UCPOL);
     d76:	a0 e4       	ldi	r26, 0x40	; 64
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e0 e4       	ldi	r30, 0x40	; 64
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	90 81       	ld	r25, Z
     d80:	eb 81       	ldd	r30, Y+3	; 0x03
     d82:	fc 81       	ldd	r31, Y+4	; 0x04
     d84:	80 85       	ldd	r24, Z+8	; 0x08
     d86:	89 2b       	or	r24, r25
     d88:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	reg_UBRR_value = (uint16)( ( F_CPU / (8UL * a_usartConfigPtr->usart_baud_rate) ) - 1 );
     d8a:	eb 81       	ldd	r30, Y+3	; 0x03
     d8c:	fc 81       	ldd	r31, Y+4	; 0x04
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	a2 81       	ldd	r26, Z+2	; 0x02
     d94:	b3 81       	ldd	r27, Z+3	; 0x03
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	aa 1f       	adc	r26, r26
     d9c:	bb 1f       	adc	r27, r27
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	aa 1f       	adc	r26, r26
     da4:	bb 1f       	adc	r27, r27
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	aa 1f       	adc	r26, r26
     dac:	bb 1f       	adc	r27, r27
     dae:	9c 01       	movw	r18, r24
     db0:	ad 01       	movw	r20, r26
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	92 e1       	ldi	r25, 0x12	; 18
     db6:	aa e7       	ldi	r26, 0x7A	; 122
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	bc 01       	movw	r22, r24
     dbc:	cd 01       	movw	r24, r26
     dbe:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__udivmodsi4>
     dc2:	da 01       	movw	r26, r20
     dc4:	c9 01       	movw	r24, r18
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01

	/*Clear URSEL to write in UBRRH Register*/
	CLEAR_BIT(UBRRH,URSEL);
     dcc:	a0 e4       	ldi	r26, 0x40	; 64
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e0 e4       	ldi	r30, 0x40	; 64
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	8f 77       	andi	r24, 0x7F	; 127
     dd8:	8c 93       	st	X, r24
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (uint8)   (reg_UBRR_value >> 8) ;
     dda:	e0 e4       	ldi	r30, 0x40	; 64
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	89 2f       	mov	r24, r25
     de4:	99 27       	eor	r25, r25
     de6:	80 83       	st	Z, r24
	UBRRL = (uint8)   (reg_UBRR_value & 0x00FF);
     de8:	e9 e2       	ldi	r30, 0x29	; 41
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	80 83       	st	Z, r24
}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	08 95       	ret

00000dfe <USART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void USART_sendByte(uint8 a_data){
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	0f 92       	push	r0
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	89 83       	std	Y+1, r24	; 0x01

	/*Wait until the uart transmitter buffer is ready to recieve a new data*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
     e0a:	eb e2       	ldi	r30, 0x2B	; 43
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	88 2f       	mov	r24, r24
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	80 72       	andi	r24, 0x20	; 32
     e16:	90 70       	andi	r25, 0x00	; 0
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	b9 f3       	breq	.-18     	; 0xe0a <USART_sendByte+0xc>

	/*Write data to UDR register (in transmission buffer) to be sent*/
	UDR = a_data;
     e1c:	ec e2       	ldi	r30, 0x2C	; 44
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	80 83       	st	Z, r24
}
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <USART_receiveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 USART_receiveByte(void){
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	/*Wait until data is recieved and the RXC flag is raised*/
	while(BIT_IS_CLEAR(UCSRA,RXC));
     e34:	eb e2       	ldi	r30, 0x2B	; 43
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 23       	and	r24, r24
     e3c:	dc f7       	brge	.-10     	; 0xe34 <USART_receiveByte+0x8>

	/*return data in the recieve buffer*/
	return UDR; /*RXC is cleared after reading*/
     e3e:	ec e2       	ldi	r30, 0x2C	; 44
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <USART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void USART_sendString(const uint8 * a_txStrPtr){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <USART_sendString+0x6>
     e50:	0f 92       	push	r0
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	9b 83       	std	Y+3, r25	; 0x03
     e58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     e5a:	19 82       	std	Y+1, r1	; 0x01
     e5c:	0e c0       	rjmp	.+28     	; 0xe7a <USART_sendString+0x30>

	/* Send the string (without null terminator char) */
	while(a_txStrPtr[i] != '\0'){
		USART_sendByte(a_txStrPtr[i]);
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	fc 01       	movw	r30, r24
     e6a:	e2 0f       	add	r30, r18
     e6c:	f3 1f       	adc	r31, r19
     e6e:	80 81       	ld	r24, Z
     e70:	0e 94 ff 06 	call	0xdfe	; 0xdfe <USART_sendByte>
		i++;
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	89 83       	std	Y+1, r24	; 0x01
 */
void USART_sendString(const uint8 * a_txStrPtr){
	uint8 i=0;

	/* Send the string (without null terminator char) */
	while(a_txStrPtr[i] != '\0'){
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	9b 81       	ldd	r25, Y+3	; 0x03
     e84:	fc 01       	movw	r30, r24
     e86:	e2 0f       	add	r30, r18
     e88:	f3 1f       	adc	r31, r19
     e8a:	80 81       	ld	r24, Z
     e8c:	88 23       	and	r24, r24
     e8e:	39 f7       	brne	.-50     	; 0xe5e <USART_sendString+0x14>
		USART_sendByte(a_txStrPtr[i]);
		i++;
	}
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <USART_receiveString>:

/*
 * Description :
 * Receive the required string until the terminator symbol.
 */
void USART_receiveString(uint8 * const a_rxStrPtr){
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <USART_receiveString+0xa>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <USART_receiveString+0xc>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	9b 83       	std	Y+3, r25	; 0x03
     eae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     eb0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the whole string until the defined terminator char */
	do{
		a_rxStrPtr[i] = USART_receiveByte();
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	9b 81       	ldd	r25, Y+3	; 0x03
     ebc:	8c 01       	movw	r16, r24
     ebe:	02 0f       	add	r16, r18
     ec0:	13 1f       	adc	r17, r19
     ec2:	0e 94 16 07 	call	0xe2c	; 0xe2c <USART_receiveByte>
     ec6:	f8 01       	movw	r30, r16
     ec8:	80 83       	st	Z, r24
	}
	while(a_rxStrPtr[i++] != USART_TERMINATOR_CHARACTER);
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	9b 81       	ldd	r25, Y+3	; 0x03
     ed4:	fc 01       	movw	r30, r24
     ed6:	e2 0f       	add	r30, r18
     ed8:	f3 1f       	adc	r31, r19
     eda:	80 81       	ld	r24, Z
     edc:	1c 82       	std	Y+4, r1	; 0x04
     ede:	83 32       	cpi	r24, 0x23	; 35
     ee0:	11 f0       	breq	.+4      	; 0xee6 <USART_receiveString+0x4a>
     ee2:	f1 e0       	ldi	r31, 0x01	; 1
     ee4:	fc 83       	std	Y+4, r31	; 0x04
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	8f 5f       	subi	r24, 0xFF	; 255
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	88 23       	and	r24, r24
     ef0:	01 f7       	brne	.-64     	; 0xeb2 <USART_receiveString+0x16>

	/*replacing  the retminator character with a null terminator*/
	a_rxStrPtr[i-1] = '\0';
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 01       	movw	r18, r24
     efa:	21 50       	subi	r18, 0x01	; 1
     efc:	30 40       	sbci	r19, 0x00	; 0
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	9b 81       	ldd	r25, Y+3	; 0x03
     f02:	fc 01       	movw	r30, r24
     f04:	e2 0f       	add	r30, r18
     f06:	f3 1f       	adc	r31, r19
     f08:	10 82       	st	Z, r1
}
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	08 95       	ret

00000f1c <__vector_11>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect){
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	2f 93       	push	r18
     f28:	3f 93       	push	r19
     f2a:	4f 93       	push	r20
     f2c:	5f 93       	push	r21
     f2e:	6f 93       	push	r22
     f30:	7f 93       	push	r23
     f32:	8f 93       	push	r24
     f34:	9f 93       	push	r25
     f36:	af 93       	push	r26
     f38:	bf 93       	push	r27
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
     f46:	80 91 e0 02 	lds	r24, 0x02E0
     f4a:	90 91 e1 02 	lds	r25, 0x02E1
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	29 f0       	breq	.+10     	; 0xf5c <__vector_11+0x40>
		(*g_timer0CallBackPtr)();
     f52:	e0 91 e0 02 	lds	r30, 0x02E0
     f56:	f0 91 e1 02 	lds	r31, 0x02E1
     f5a:	09 95       	icall
	}
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <__vector_10>:

ISR(TIMER0_COMP_vect){
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	2f 93       	push	r18
     f8e:	3f 93       	push	r19
     f90:	4f 93       	push	r20
     f92:	5f 93       	push	r21
     f94:	6f 93       	push	r22
     f96:	7f 93       	push	r23
     f98:	8f 93       	push	r24
     f9a:	9f 93       	push	r25
     f9c:	af 93       	push	r26
     f9e:	bf 93       	push	r27
     fa0:	ef 93       	push	r30
     fa2:	ff 93       	push	r31
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
     fac:	80 91 e0 02 	lds	r24, 0x02E0
     fb0:	90 91 e1 02 	lds	r25, 0x02E1
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	29 f0       	breq	.+10     	; 0xfc2 <__vector_10+0x40>
		(*g_timer0CallBackPtr)();
     fb8:	e0 91 e0 02 	lds	r30, 0x02E0
     fbc:	f0 91 e1 02 	lds	r31, 0x02E1
     fc0:	09 95       	icall
	}
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <__vector_9>:

ISR(TIMER1_OVF_vect){
     fe8:	1f 92       	push	r1
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	0f 92       	push	r0
     ff0:	11 24       	eor	r1, r1
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR){
    1012:	80 91 e2 02 	lds	r24, 0x02E2
    1016:	90 91 e3 02 	lds	r25, 0x02E3
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	29 f0       	breq	.+10     	; 0x1028 <__vector_9+0x40>
		(*g_timer1CallBackPtr)();
    101e:	e0 91 e2 02 	lds	r30, 0x02E2
    1022:	f0 91 e3 02 	lds	r31, 0x02E3
    1026:	09 95       	icall
	}

}
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <__vector_7>:

ISR(TIMER1_COMPA_vect){
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	4f 93       	push	r20
    105e:	5f 93       	push	r21
    1060:	6f 93       	push	r22
    1062:	7f 93       	push	r23
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR){
    1078:	80 91 e2 02 	lds	r24, 0x02E2
    107c:	90 91 e3 02 	lds	r25, 0x02E3
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	29 f0       	breq	.+10     	; 0x108e <__vector_7+0x40>
		(*g_timer1CallBackPtr)();
    1084:	e0 91 e2 02 	lds	r30, 0x02E2
    1088:	f0 91 e3 02 	lds	r31, 0x02E3
    108c:	09 95       	icall
	}
}
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	ff 91       	pop	r31
    1094:	ef 91       	pop	r30
    1096:	bf 91       	pop	r27
    1098:	af 91       	pop	r26
    109a:	9f 91       	pop	r25
    109c:	8f 91       	pop	r24
    109e:	7f 91       	pop	r23
    10a0:	6f 91       	pop	r22
    10a2:	5f 91       	pop	r21
    10a4:	4f 91       	pop	r20
    10a6:	3f 91       	pop	r19
    10a8:	2f 91       	pop	r18
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	0f 90       	pop	r0
    10b0:	1f 90       	pop	r1
    10b2:	18 95       	reti

000010b4 <__vector_5>:


ISR(TIMER2_OVF_vect){
    10b4:	1f 92       	push	r1
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	2f 93       	push	r18
    10c0:	3f 93       	push	r19
    10c2:	4f 93       	push	r20
    10c4:	5f 93       	push	r21
    10c6:	6f 93       	push	r22
    10c8:	7f 93       	push	r23
    10ca:	8f 93       	push	r24
    10cc:	9f 93       	push	r25
    10ce:	af 93       	push	r26
    10d0:	bf 93       	push	r27
    10d2:	ef 93       	push	r30
    10d4:	ff 93       	push	r31
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR){
    10de:	80 91 e4 02 	lds	r24, 0x02E4
    10e2:	90 91 e5 02 	lds	r25, 0x02E5
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	29 f0       	breq	.+10     	; 0x10f4 <__vector_5+0x40>
		(*g_timer2CallBackPtr)();
    10ea:	e0 91 e4 02 	lds	r30, 0x02E4
    10ee:	f0 91 e5 02 	lds	r31, 0x02E5
    10f2:	09 95       	icall
	}
}
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <__vector_4>:

ISR(TIMER2_COMP_vect){
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	4f 93       	push	r20
    112a:	5f 93       	push	r21
    112c:	6f 93       	push	r22
    112e:	7f 93       	push	r23
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	af 93       	push	r26
    1136:	bf 93       	push	r27
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR){
    1144:	80 91 e4 02 	lds	r24, 0x02E4
    1148:	90 91 e5 02 	lds	r25, 0x02E5
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	29 f0       	breq	.+10     	; 0x115a <__vector_4+0x40>
		(*g_timer2CallBackPtr)();
    1150:	e0 91 e4 02 	lds	r30, 0x02E4
    1154:	f0 91 e5 02 	lds	r31, 0x02E5
    1158:	09 95       	icall
	}
}
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	7f 91       	pop	r23
    116c:	6f 91       	pop	r22
    116e:	5f 91       	pop	r21
    1170:	4f 91       	pop	r20
    1172:	3f 91       	pop	r19
    1174:	2f 91       	pop	r18
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <TIMER_init>:
/*******************************************************************************
 *                    	  Functions Definitions                                *
 *******************************************************************************/


void TIMER_init(TIMER_ConfigType * a_timerConfig){
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <TIMER_init+0x6>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <TIMER_init+0x8>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerConfig->timer_id){
    1190:	e9 81       	ldd	r30, Y+1	; 0x01
    1192:	fa 81       	ldd	r31, Y+2	; 0x02
    1194:	82 81       	ldd	r24, Z+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3c 83       	std	Y+4, r19	; 0x04
    119c:	2b 83       	std	Y+3, r18	; 0x03
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	91 05       	cpc	r25, r1
    11a6:	71 f0       	breq	.+28     	; 0x11c4 <TIMER_init+0x44>
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	71 f0       	breq	.+28     	; 0x11ce <TIMER_init+0x4e>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	71 f4       	brne	.+28     	; 0x11d6 <TIMER_init+0x56>
	case TIMER0_ID:
		TIMER0_init(a_timerConfig);
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	0e 94 3a 0a 	call	0x1474	; 0x1474 <TIMER0_init>
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <TIMER_init+0x56>
		break;
	case TIMER1_ID:
		TIMER1_init(a_timerConfig);
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <TIMER1_init>
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <TIMER_init+0x56>
		break;
	case TIMER2_ID:
		TIMER2_init(a_timerConfig);
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <TIMER2_init>
		break;
	}
}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <TIMER_deInit>:

void TIMER_deInit(TIMER_ID a_timerId){
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <TIMER_deInit+0x6>
    11ea:	0f 92       	push	r0
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerId){
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	3b 83       	std	Y+3, r19	; 0x03
    11fa:	2a 83       	std	Y+2, r18	; 0x02
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	91 05       	cpc	r25, r1
    1204:	61 f0       	breq	.+24     	; 0x121e <TIMER_deInit+0x3a>
    1206:	2a 81       	ldd	r18, Y+2	; 0x02
    1208:	3b 81       	ldd	r19, Y+3	; 0x03
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	51 f0       	breq	.+20     	; 0x1224 <TIMER_deInit+0x40>
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	9b 81       	ldd	r25, Y+3	; 0x03
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	41 f4       	brne	.+16     	; 0x1228 <TIMER_deInit+0x44>
	case TIMER0_ID:
		TIMER0_deInit();
    1218:	0e 94 93 0c 	call	0x1926	; 0x1926 <TIMER0_deInit>
    121c:	05 c0       	rjmp	.+10     	; 0x1228 <TIMER_deInit+0x44>
		break;
	case TIMER1_ID:
		TIMER1_deInit();
    121e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <TIMER1_deInit>
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <TIMER_deInit+0x44>
		break;
	case TIMER2_ID:
		TIMER2_deInit();
    1224:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <TIMER2_deInit>
		break;
	}
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <TIMER_setCallBackFunc>:

void TIMER_setCallBackFunc(TIMER_ID a_timerId, void volatile (*a_functionAddressPtr) (void)){
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <TIMER_setCallBackFunc+0x6>
    123a:	00 d0       	rcall	.+0      	; 0x123c <TIMER_setCallBackFunc+0x8>
    123c:	0f 92       	push	r0
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	7b 83       	std	Y+3, r23	; 0x03
    1246:	6a 83       	std	Y+2, r22	; 0x02
	switch(a_timerId){
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3d 83       	std	Y+5, r19	; 0x05
    1250:	2c 83       	std	Y+4, r18	; 0x04
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	9d 81       	ldd	r25, Y+5	; 0x05
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	81 f0       	breq	.+32     	; 0x127c <TIMER_setCallBackFunc+0x48>
    125c:	2c 81       	ldd	r18, Y+4	; 0x04
    125e:	3d 81       	ldd	r19, Y+5	; 0x05
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	91 f0       	breq	.+36     	; 0x128a <TIMER_setCallBackFunc+0x56>
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	9d 81       	ldd	r25, Y+5	; 0x05
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	a1 f4       	brne	.+40     	; 0x1296 <TIMER_setCallBackFunc+0x62>
	case TIMER0_ID:
		g_timer0CallBackPtr = a_functionAddressPtr;
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	90 93 e1 02 	sts	0x02E1, r25
    1276:	80 93 e0 02 	sts	0x02E0, r24
    127a:	0d c0       	rjmp	.+26     	; 0x1296 <TIMER_setCallBackFunc+0x62>
		break;
	case TIMER1_ID:
		g_timer1CallBackPtr = a_functionAddressPtr;
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	90 93 e3 02 	sts	0x02E3, r25
    1284:	80 93 e2 02 	sts	0x02E2, r24
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <TIMER_setCallBackFunc+0x62>
		break;
	case TIMER2_ID:
		g_timer2CallBackPtr = a_functionAddressPtr;
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	9b 81       	ldd	r25, Y+3	; 0x03
    128e:	90 93 e5 02 	sts	0x02E5, r25
    1292:	80 93 e4 02 	sts	0x02E4, r24
		break;
	}
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <TIMER_changeCompareValue>:

void TIMER_changeCompareValue(TIMER_ID a_timerId, uint16 a_new_vlaue){
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <TIMER_changeCompareValue+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <TIMER_changeCompareValue+0x8>
    12ae:	0f 92       	push	r0
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	7b 83       	std	Y+3, r23	; 0x03
    12b8:	6a 83       	std	Y+2, r22	; 0x02
	switch(a_timerId){
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3d 83       	std	Y+5, r19	; 0x05
    12c2:	2c 83       	std	Y+4, r18	; 0x04
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	71 f0       	breq	.+28     	; 0x12ea <TIMER_changeCompareValue+0x44>
    12ce:	2c 81       	ldd	r18, Y+4	; 0x04
    12d0:	3d 81       	ldd	r19, Y+5	; 0x05
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	81 f0       	breq	.+32     	; 0x12f8 <TIMER_changeCompareValue+0x52>
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	9d 81       	ldd	r25, Y+5	; 0x05
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	81 f4       	brne	.+32     	; 0x1300 <TIMER_changeCompareValue+0x5a>
	case TIMER0_ID:
		OCR0 = (uint8) a_new_vlaue;
    12e0:	ec e5       	ldi	r30, 0x5C	; 92
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	80 83       	st	Z, r24
    12e8:	0b c0       	rjmp	.+22     	; 0x1300 <TIMER_changeCompareValue+0x5a>
		break;
	case TIMER1_ID:
		OCR1A =  a_new_vlaue;
    12ea:	ea e4       	ldi	r30, 0x4A	; 74
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	9b 81       	ldd	r25, Y+3	; 0x03
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <TIMER_changeCompareValue+0x5a>
		break;
	case TIMER2_ID:
		OCR2 = (uint8) a_new_vlaue;
    12f8:	e3 e4       	ldi	r30, 0x43	; 67
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	80 83       	st	Z, r24
		break;
	}
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <TIMER_changeDutyCycle>:

void TIMER_changeDutyCycle(TIMER_ConfigType * a_timerConfig){
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <TIMER_changeDutyCycle+0xa>
    131a:	00 d0       	rcall	.+0      	; 0x131c <TIMER_changeDutyCycle+0xc>
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerConfig->timer_id){
    1324:	e9 81       	ldd	r30, Y+1	; 0x01
    1326:	fa 81       	ldd	r31, Y+2	; 0x02
    1328:	82 81       	ldd	r24, Z+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	3c 83       	std	Y+4, r19	; 0x04
    1330:	2b 83       	std	Y+3, r18	; 0x03
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	51 f1       	breq	.+84     	; 0x1390 <TIMER_changeDutyCycle+0x80>
    133c:	eb 81       	ldd	r30, Y+3	; 0x03
    133e:	fc 81       	ldd	r31, Y+4	; 0x04
    1340:	e2 30       	cpi	r30, 0x02	; 2
    1342:	f1 05       	cpc	r31, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <TIMER_changeDutyCycle+0x38>
    1346:	70 c0       	rjmp	.+224    	; 0x1428 <TIMER_changeDutyCycle+0x118>
    1348:	2b 81       	ldd	r18, Y+3	; 0x03
    134a:	3c 81       	ldd	r19, Y+4	; 0x04
    134c:	21 15       	cp	r18, r1
    134e:	31 05       	cpc	r19, r1
    1350:	09 f0       	breq	.+2      	; 0x1354 <TIMER_changeDutyCycle+0x44>
    1352:	87 c0       	rjmp	.+270    	; 0x1462 <TIMER_changeDutyCycle+0x152>
	case TIMER0_ID:
		OCR0 = (((uint16)a_timerConfig->timer_mode_data.pwm_duty_cycle * TIMER0_MAX_COUNT)/100);
    1354:	0c e5       	ldi	r16, 0x5C	; 92
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	e9 81       	ldd	r30, Y+1	; 0x01
    135a:	fa 81       	ldd	r31, Y+2	; 0x02
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	ca 01       	movw	r24, r20
    1364:	9c 01       	movw	r18, r24
    1366:	22 0f       	add	r18, r18
    1368:	33 1f       	adc	r19, r19
    136a:	c9 01       	movw	r24, r18
    136c:	96 95       	lsr	r25
    136e:	98 2f       	mov	r25, r24
    1370:	88 27       	eor	r24, r24
    1372:	97 95       	ror	r25
    1374:	87 95       	ror	r24
    1376:	82 1b       	sub	r24, r18
    1378:	93 0b       	sbc	r25, r19
    137a:	84 0f       	add	r24, r20
    137c:	95 1f       	adc	r25, r21
    137e:	24 e6       	ldi	r18, 0x64	; 100
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	b9 01       	movw	r22, r18
    1384:	0e 94 3e 20 	call	0x407c	; 0x407c <__udivmodhi4>
    1388:	cb 01       	movw	r24, r22
    138a:	f8 01       	movw	r30, r16
    138c:	80 83       	st	Z, r24
    138e:	69 c0       	rjmp	.+210    	; 0x1462 <TIMER_changeDutyCycle+0x152>
		break;

	case TIMER1_ID:
		if(a_timerConfig->timer1_pwm_pin_select == PIN_OC1A){
    1390:	e9 81       	ldd	r30, Y+1	; 0x01
    1392:	fa 81       	ldd	r31, Y+2	; 0x02
    1394:	86 81       	ldd	r24, Z+6	; 0x06
    1396:	88 23       	and	r24, r24
    1398:	09 f5       	brne	.+66     	; 0x13dc <TIMER_changeDutyCycle+0xcc>
			OCR1A = (((uint32)a_timerConfig->timer_mode_data.pwm_duty_cycle * TOP_VALUE)/100);
    139a:	0a e4       	ldi	r16, 0x4A	; 74
    139c:	10 e0       	ldi	r17, 0x00	; 0
    139e:	e9 81       	ldd	r30, Y+1	; 0x01
    13a0:	fa 81       	ldd	r31, Y+2	; 0x02
    13a2:	80 81       	ld	r24, Z
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	a0 e0       	ldi	r26, 0x00	; 0
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	2f ea       	ldi	r18, 0xAF	; 175
    13ae:	32 e1       	ldi	r19, 0x12	; 18
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 1f 20 	call	0x403e	; 0x403e <__mulsi3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	24 e6       	ldi	r18, 0x64	; 100
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__udivmodsi4>
    13d0:	da 01       	movw	r26, r20
    13d2:	c9 01       	movw	r24, r18
    13d4:	f8 01       	movw	r30, r16
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
    13da:	43 c0       	rjmp	.+134    	; 0x1462 <TIMER_changeDutyCycle+0x152>
		}
		else if(a_timerConfig->timer1_pwm_pin_select == PIN_OC1B){
    13dc:	e9 81       	ldd	r30, Y+1	; 0x01
    13de:	fa 81       	ldd	r31, Y+2	; 0x02
    13e0:	86 81       	ldd	r24, Z+6	; 0x06
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	f1 f5       	brne	.+124    	; 0x1462 <TIMER_changeDutyCycle+0x152>
			OCR1B = (((uint32)a_timerConfig->timer_mode_data.pwm_duty_cycle * TOP_VALUE)/100);
    13e6:	08 e4       	ldi	r16, 0x48	; 72
    13e8:	10 e0       	ldi	r17, 0x00	; 0
    13ea:	e9 81       	ldd	r30, Y+1	; 0x01
    13ec:	fa 81       	ldd	r31, Y+2	; 0x02
    13ee:	80 81       	ld	r24, Z
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a0 e0       	ldi	r26, 0x00	; 0
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	2f ea       	ldi	r18, 0xAF	; 175
    13fa:	32 e1       	ldi	r19, 0x12	; 18
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	0e 94 1f 20 	call	0x403e	; 0x403e <__mulsi3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	24 e6       	ldi	r18, 0x64	; 100
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	bc 01       	movw	r22, r24
    1416:	cd 01       	movw	r24, r26
    1418:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__udivmodsi4>
    141c:	da 01       	movw	r26, r20
    141e:	c9 01       	movw	r24, r18
    1420:	f8 01       	movw	r30, r16
    1422:	91 83       	std	Z+1, r25	; 0x01
    1424:	80 83       	st	Z, r24
    1426:	1d c0       	rjmp	.+58     	; 0x1462 <TIMER_changeDutyCycle+0x152>
		}
		break;

	case TIMER2_ID:
		OCR2 = (((uint16)a_timerConfig->timer_mode_data.pwm_duty_cycle * TIMER2_MAX_COUNT)/100);
    1428:	03 e4       	ldi	r16, 0x43	; 67
    142a:	10 e0       	ldi	r17, 0x00	; 0
    142c:	e9 81       	ldd	r30, Y+1	; 0x01
    142e:	fa 81       	ldd	r31, Y+2	; 0x02
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	ca 01       	movw	r24, r20
    1438:	9c 01       	movw	r18, r24
    143a:	22 0f       	add	r18, r18
    143c:	33 1f       	adc	r19, r19
    143e:	c9 01       	movw	r24, r18
    1440:	96 95       	lsr	r25
    1442:	98 2f       	mov	r25, r24
    1444:	88 27       	eor	r24, r24
    1446:	97 95       	ror	r25
    1448:	87 95       	ror	r24
    144a:	82 1b       	sub	r24, r18
    144c:	93 0b       	sbc	r25, r19
    144e:	84 0f       	add	r24, r20
    1450:	95 1f       	adc	r25, r21
    1452:	24 e6       	ldi	r18, 0x64	; 100
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	b9 01       	movw	r22, r18
    1458:	0e 94 3e 20 	call	0x407c	; 0x407c <__udivmodhi4>
    145c:	cb 01       	movw	r24, r22
    145e:	f8 01       	movw	r30, r16
    1460:	80 83       	st	Z, r24
		break;
	}
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	08 95       	ret

00001474 <TIMER0_init>:

static void TIMER0_init(TIMER_ConfigType * a_timerConfig)
{
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <TIMER0_init+0xa>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    1486:	e2 e5       	ldi	r30, 0x52	; 82
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	10 82       	st	Z, r1

	if(a_timerConfig->timer_mode == PWM_MODE){
    148c:	e9 81       	ldd	r30, Y+1	; 0x01
    148e:	fa 81       	ldd	r31, Y+2	; 0x02
    1490:	83 81       	ldd	r24, Z+3	; 0x03
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	29 f5       	brne	.+74     	; 0x14e0 <TIMER0_init+0x6c>
		OCR0 = (((uint16)a_timerConfig->timer_mode_data.pwm_duty_cycle * TIMER0_MAX_COUNT)/100);
    1496:	0c e5       	ldi	r16, 0x5C	; 92
    1498:	10 e0       	ldi	r17, 0x00	; 0
    149a:	e9 81       	ldd	r30, Y+1	; 0x01
    149c:	fa 81       	ldd	r31, Y+2	; 0x02
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	ca 01       	movw	r24, r20
    14a6:	9c 01       	movw	r18, r24
    14a8:	22 0f       	add	r18, r18
    14aa:	33 1f       	adc	r19, r19
    14ac:	c9 01       	movw	r24, r18
    14ae:	96 95       	lsr	r25
    14b0:	98 2f       	mov	r25, r24
    14b2:	88 27       	eor	r24, r24
    14b4:	97 95       	ror	r25
    14b6:	87 95       	ror	r24
    14b8:	82 1b       	sub	r24, r18
    14ba:	93 0b       	sbc	r25, r19
    14bc:	84 0f       	add	r24, r20
    14be:	95 1f       	adc	r25, r21
    14c0:	24 e6       	ldi	r18, 0x64	; 100
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	b9 01       	movw	r22, r18
    14c6:	0e 94 3e 20 	call	0x407c	; 0x407c <__udivmodhi4>
    14ca:	cb 01       	movw	r24, r22
    14cc:	f8 01       	movw	r30, r16
    14ce:	80 83       	st	Z, r24
		DDRB  = DDRB | (1<<OC0); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    14d0:	a7 e3       	ldi	r26, 0x37	; 55
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e7 e3       	ldi	r30, 0x37	; 55
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	88 60       	ori	r24, 0x08	; 8
    14dc:	8c 93       	st	X, r24
    14de:	07 c0       	rjmp	.+14     	; 0x14ee <TIMER0_init+0x7a>
	}
	else{
		SET_BIT(TCCR0,FOC0);
    14e0:	a3 e5       	ldi	r26, 0x53	; 83
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e3 e5       	ldi	r30, 0x53	; 83
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	80 68       	ori	r24, 0x80	; 128
    14ec:	8c 93       	st	X, r24
	}

	if(a_timerConfig->timer_mode == OVERFLOW_MODE){
    14ee:	e9 81       	ldd	r30, Y+1	; 0x01
    14f0:	fa 81       	ldd	r31, Y+2	; 0x02
    14f2:	83 81       	ldd	r24, Z+3	; 0x03
    14f4:	88 23       	and	r24, r24
    14f6:	81 f4       	brne	.+32     	; 0x1518 <TIMER0_init+0xa4>
		SET_BIT(TIMSK,TOIE0);
    14f8:	a9 e5       	ldi	r26, 0x59	; 89
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e9 e5       	ldi	r30, 0x59	; 89
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	81 60       	ori	r24, 0x01	; 1
    1504:	8c 93       	st	X, r24
		TCNT0 = a_timerConfig->timer_mode_data.ovf_initial_value & 0x0F; //Set Timer Initial value
    1506:	a2 e5       	ldi	r26, 0x52	; 82
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e9 81       	ldd	r30, Y+1	; 0x01
    150c:	fa 81       	ldd	r31, Y+2	; 0x02
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	8f 70       	andi	r24, 0x0F	; 15
    1514:	8c 93       	st	X, r24
    1516:	13 c0       	rjmp	.+38     	; 0x153e <TIMER0_init+0xca>
	}
	else if(a_timerConfig->timer_mode == COMPARE_MODE){
    1518:	e9 81       	ldd	r30, Y+1	; 0x01
    151a:	fa 81       	ldd	r31, Y+2	; 0x02
    151c:	83 81       	ldd	r24, Z+3	; 0x03
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	71 f4       	brne	.+28     	; 0x153e <TIMER0_init+0xca>
		OCR0 = a_timerConfig->timer_mode_data.ctc_compare_value;
    1522:	ac e5       	ldi	r26, 0x5C	; 92
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e9 81       	ldd	r30, Y+1	; 0x01
    1528:	fa 81       	ldd	r31, Y+2	; 0x02
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE0);
    1530:	a9 e5       	ldi	r26, 0x59	; 89
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e9 e5       	ldi	r30, 0x59	; 89
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	82 60       	ori	r24, 0x02	; 2
    153c:	8c 93       	st	X, r24
	}

	TCCR0 = ((a_timerConfig->timer_mode & 0x01) << WGM00) |(a_timerConfig->timer_ocx_pin_behavior << COM00)\
    153e:	a3 e5       	ldi	r26, 0x53	; 83
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	83 81       	ldd	r24, Z+3	; 0x03
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	81 70       	andi	r24, 0x01	; 1
    154e:	90 70       	andi	r25, 0x00	; 0
    1550:	00 24       	eor	r0, r0
    1552:	96 95       	lsr	r25
    1554:	87 95       	ror	r24
    1556:	07 94       	ror	r0
    1558:	96 95       	lsr	r25
    155a:	87 95       	ror	r24
    155c:	07 94       	ror	r0
    155e:	98 2f       	mov	r25, r24
    1560:	80 2d       	mov	r24, r0
    1562:	28 2f       	mov	r18, r24
    1564:	e9 81       	ldd	r30, Y+1	; 0x01
    1566:	fa 81       	ldd	r31, Y+2	; 0x02
    1568:	85 81       	ldd	r24, Z+5	; 0x05
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	82 95       	swap	r24
    1570:	92 95       	swap	r25
    1572:	90 7f       	andi	r25, 0xF0	; 240
    1574:	98 27       	eor	r25, r24
    1576:	80 7f       	andi	r24, 0xF0	; 240
    1578:	98 27       	eor	r25, r24
    157a:	28 2b       	or	r18, r24
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	83 81       	ldd	r24, Z+3	; 0x03
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	82 70       	andi	r24, 0x02	; 2
    1588:	90 70       	andi	r25, 0x00	; 0
    158a:	95 95       	asr	r25
    158c:	87 95       	ror	r24
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	92 2f       	mov	r25, r18
    159c:	98 2b       	or	r25, r24
    159e:	e9 81       	ldd	r30, Y+1	; 0x01
    15a0:	fa 81       	ldd	r31, Y+2	; 0x02
    15a2:	84 81       	ldd	r24, Z+4	; 0x04
    15a4:	87 70       	andi	r24, 0x07	; 7
    15a6:	89 2b       	or	r24, r25
    15a8:	8c 93       	st	X, r24
			| (GET_BIT(a_timerConfig->timer_mode,1)<<WGM01) | ((a_timerConfig->timer_prescaler.timer0 & 0x07) << CS00);

}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	08 95       	ret

000015b8 <TIMER1_init>:

static void TIMER1_init(TIMER_ConfigType * a_timerConfig)
{
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <TIMER1_init+0xa>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = 0;
    15ca:	ec e4       	ldi	r30, 0x4C	; 76
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	11 82       	std	Z+1, r1	; 0x01
    15d0:	10 82       	st	Z, r1
	ICR1 = TOP_VALUE;
    15d2:	e6 e4       	ldi	r30, 0x46	; 70
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8f ea       	ldi	r24, 0xAF	; 175
    15d8:	92 e1       	ldi	r25, 0x12	; 18
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24

	if(a_timerConfig->timer_mode == PWM_MODE){
    15de:	e9 81       	ldd	r30, Y+1	; 0x01
    15e0:	fa 81       	ldd	r31, Y+2	; 0x02
    15e2:	83 81       	ldd	r24, Z+3	; 0x03
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	09 f0       	breq	.+2      	; 0x15ea <TIMER1_init+0x32>
    15e8:	84 c0       	rjmp	.+264    	; 0x16f2 <TIMER1_init+0x13a>
		if(a_timerConfig->timer1_pwm_pin_select == PIN_OC1A){
    15ea:	e9 81       	ldd	r30, Y+1	; 0x01
    15ec:	fa 81       	ldd	r31, Y+2	; 0x02
    15ee:	86 81       	ldd	r24, Z+6	; 0x06
    15f0:	88 23       	and	r24, r24
    15f2:	f1 f5       	brne	.+124    	; 0x1670 <TIMER1_init+0xb8>
			OCR1A = (((uint32)a_timerConfig->timer_mode_data.pwm_duty_cycle * TOP_VALUE)/100);
    15f4:	0a e4       	ldi	r16, 0x4A	; 74
    15f6:	10 e0       	ldi	r17, 0x00	; 0
    15f8:	e9 81       	ldd	r30, Y+1	; 0x01
    15fa:	fa 81       	ldd	r31, Y+2	; 0x02
    15fc:	80 81       	ld	r24, Z
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e0       	ldi	r26, 0x00	; 0
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	2f ea       	ldi	r18, 0xAF	; 175
    1608:	32 e1       	ldi	r19, 0x12	; 18
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 1f 20 	call	0x403e	; 0x403e <__mulsi3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	24 e6       	ldi	r18, 0x64	; 100
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__udivmodsi4>
    162a:	da 01       	movw	r26, r20
    162c:	c9 01       	movw	r24, r18
    162e:	f8 01       	movw	r30, r16
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	80 83       	st	Z, r24
			TCCR1A |= (a_timerConfig->timer_ocx_pin_behavior << COM1A0);
    1634:	af e4       	ldi	r26, 0x4F	; 79
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	ef e4       	ldi	r30, 0x4F	; 79
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	28 2f       	mov	r18, r24
    1640:	e9 81       	ldd	r30, Y+1	; 0x01
    1642:	fa 81       	ldd	r31, Y+2	; 0x02
    1644:	85 81       	ldd	r24, Z+5	; 0x05
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	00 24       	eor	r0, r0
    164c:	96 95       	lsr	r25
    164e:	87 95       	ror	r24
    1650:	07 94       	ror	r0
    1652:	96 95       	lsr	r25
    1654:	87 95       	ror	r24
    1656:	07 94       	ror	r0
    1658:	98 2f       	mov	r25, r24
    165a:	80 2d       	mov	r24, r0
    165c:	82 2b       	or	r24, r18
    165e:	8c 93       	st	X, r24
			DDRD  |= (1 << OC1A);
    1660:	a1 e3       	ldi	r26, 0x31	; 49
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e1 e3       	ldi	r30, 0x31	; 49
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	80 62       	ori	r24, 0x20	; 32
    166c:	8c 93       	st	X, r24
    166e:	4f c0       	rjmp	.+158    	; 0x170e <TIMER1_init+0x156>
		}
		else if(a_timerConfig->timer1_pwm_pin_select == PIN_OC1B){
    1670:	e9 81       	ldd	r30, Y+1	; 0x01
    1672:	fa 81       	ldd	r31, Y+2	; 0x02
    1674:	86 81       	ldd	r24, Z+6	; 0x06
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	09 f0       	breq	.+2      	; 0x167c <TIMER1_init+0xc4>
    167a:	49 c0       	rjmp	.+146    	; 0x170e <TIMER1_init+0x156>
			OCR1B = (((uint32)a_timerConfig->timer_mode_data.pwm_duty_cycle * TOP_VALUE)/100);
    167c:	08 e4       	ldi	r16, 0x48	; 72
    167e:	10 e0       	ldi	r17, 0x00	; 0
    1680:	e9 81       	ldd	r30, Y+1	; 0x01
    1682:	fa 81       	ldd	r31, Y+2	; 0x02
    1684:	80 81       	ld	r24, Z
    1686:	88 2f       	mov	r24, r24
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a0 e0       	ldi	r26, 0x00	; 0
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	2f ea       	ldi	r18, 0xAF	; 175
    1690:	32 e1       	ldi	r19, 0x12	; 18
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 1f 20 	call	0x403e	; 0x403e <__mulsi3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	24 e6       	ldi	r18, 0x64	; 100
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__udivmodsi4>
    16b2:	da 01       	movw	r26, r20
    16b4:	c9 01       	movw	r24, r18
    16b6:	f8 01       	movw	r30, r16
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	80 83       	st	Z, r24
			TCCR1A |= (a_timerConfig->timer_ocx_pin_behavior << COM1B0);
    16bc:	af e4       	ldi	r26, 0x4F	; 79
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	ef e4       	ldi	r30, 0x4F	; 79
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	28 2f       	mov	r18, r24
    16c8:	e9 81       	ldd	r30, Y+1	; 0x01
    16ca:	fa 81       	ldd	r31, Y+2	; 0x02
    16cc:	85 81       	ldd	r24, Z+5	; 0x05
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	82 95       	swap	r24
    16d4:	92 95       	swap	r25
    16d6:	90 7f       	andi	r25, 0xF0	; 240
    16d8:	98 27       	eor	r25, r24
    16da:	80 7f       	andi	r24, 0xF0	; 240
    16dc:	98 27       	eor	r25, r24
    16de:	82 2b       	or	r24, r18
    16e0:	8c 93       	st	X, r24
			DDRD  |= (1 << OC1B);
    16e2:	a1 e3       	ldi	r26, 0x31	; 49
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e1 e3       	ldi	r30, 0x31	; 49
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	80 61       	ori	r24, 0x10	; 16
    16ee:	8c 93       	st	X, r24
    16f0:	0e c0       	rjmp	.+28     	; 0x170e <TIMER1_init+0x156>
		}
	}
	else{
		SET_BIT(TCCR1A,FOC1A);
    16f2:	af e4       	ldi	r26, 0x4F	; 79
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	ef e4       	ldi	r30, 0x4F	; 79
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	88 60       	ori	r24, 0x08	; 8
    16fe:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    1700:	af e4       	ldi	r26, 0x4F	; 79
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	ef e4       	ldi	r30, 0x4F	; 79
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	84 60       	ori	r24, 0x04	; 4
    170c:	8c 93       	st	X, r24
	}

	if(a_timerConfig->timer_mode == OVERFLOW_MODE){
    170e:	e9 81       	ldd	r30, Y+1	; 0x01
    1710:	fa 81       	ldd	r31, Y+2	; 0x02
    1712:	83 81       	ldd	r24, Z+3	; 0x03
    1714:	88 23       	and	r24, r24
    1716:	89 f4       	brne	.+34     	; 0x173a <TIMER1_init+0x182>
		SET_BIT(TIMSK,TOIE1);
    1718:	a9 e5       	ldi	r26, 0x59	; 89
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e9 e5       	ldi	r30, 0x59	; 89
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	84 60       	ori	r24, 0x04	; 4
    1724:	8c 93       	st	X, r24
		TCNT1 = a_timerConfig->timer_mode_data.ovf_initial_value; //Set Timer Initial value
    1726:	ac e4       	ldi	r26, 0x4C	; 76
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e9 81       	ldd	r30, Y+1	; 0x01
    172c:	fa 81       	ldd	r31, Y+2	; 0x02
    172e:	80 81       	ld	r24, Z
    1730:	91 81       	ldd	r25, Z+1	; 0x01
    1732:	11 96       	adiw	r26, 0x01	; 1
    1734:	9c 93       	st	X, r25
    1736:	8e 93       	st	-X, r24
    1738:	15 c0       	rjmp	.+42     	; 0x1764 <TIMER1_init+0x1ac>
	}
	else if(a_timerConfig->timer_mode == COMPARE_MODE){
    173a:	e9 81       	ldd	r30, Y+1	; 0x01
    173c:	fa 81       	ldd	r31, Y+2	; 0x02
    173e:	83 81       	ldd	r24, Z+3	; 0x03
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	81 f4       	brne	.+32     	; 0x1764 <TIMER1_init+0x1ac>
		OCR1A = a_timerConfig->timer_mode_data.ctc_compare_value;
    1744:	aa e4       	ldi	r26, 0x4A	; 74
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e9 81       	ldd	r30, Y+1	; 0x01
    174a:	fa 81       	ldd	r31, Y+2	; 0x02
    174c:	80 81       	ld	r24, Z
    174e:	91 81       	ldd	r25, Z+1	; 0x01
    1750:	11 96       	adiw	r26, 0x01	; 1
    1752:	9c 93       	st	X, r25
    1754:	8e 93       	st	-X, r24
		SET_BIT(TIMSK,OCIE1A);
    1756:	a9 e5       	ldi	r26, 0x59	; 89
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e9 e5       	ldi	r30, 0x59	; 89
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	80 61       	ori	r24, 0x10	; 16
    1762:	8c 93       	st	X, r24
	}

	TCCR1A |= (GET_BIT(a_timerConfig->timer_mode,0) << WGM11);
    1764:	af e4       	ldi	r26, 0x4F	; 79
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	ef e4       	ldi	r30, 0x4F	; 79
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	28 2f       	mov	r18, r24
    1770:	e9 81       	ldd	r30, Y+1	; 0x01
    1772:	fa 81       	ldd	r31, Y+2	; 0x02
    1774:	83 81       	ldd	r24, Z+3	; 0x03
    1776:	88 2f       	mov	r24, r24
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	81 70       	andi	r24, 0x01	; 1
    177c:	90 70       	andi	r25, 0x00	; 0
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	82 2b       	or	r24, r18
    1784:	8c 93       	st	X, r24
	TCCR1B = (GET_BIT(a_timerConfig->timer_mode,0) << WGM13) | (GET_BIT(a_timerConfig->timer_mode,1) << WGM12)\
    1786:	ae e4       	ldi	r26, 0x4E	; 78
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e9 81       	ldd	r30, Y+1	; 0x01
    178c:	fa 81       	ldd	r31, Y+2	; 0x02
    178e:	83 81       	ldd	r24, Z+3	; 0x03
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	81 70       	andi	r24, 0x01	; 1
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	82 95       	swap	r24
    179a:	92 95       	swap	r25
    179c:	90 7f       	andi	r25, 0xF0	; 240
    179e:	98 27       	eor	r25, r24
    17a0:	80 7f       	andi	r24, 0xF0	; 240
    17a2:	98 27       	eor	r25, r24
    17a4:	28 2f       	mov	r18, r24
    17a6:	e9 81       	ldd	r30, Y+1	; 0x01
    17a8:	fa 81       	ldd	r31, Y+2	; 0x02
    17aa:	83 81       	ldd	r24, Z+3	; 0x03
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	82 70       	andi	r24, 0x02	; 2
    17b2:	90 70       	andi	r25, 0x00	; 0
    17b4:	95 95       	asr	r25
    17b6:	87 95       	ror	r24
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	92 2f       	mov	r25, r18
    17c6:	98 2b       	or	r25, r24
    17c8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ca:	fa 81       	ldd	r31, Y+2	; 0x02
    17cc:	84 81       	ldd	r24, Z+4	; 0x04
    17ce:	87 70       	andi	r24, 0x07	; 7
    17d0:	89 2b       	or	r24, r25
    17d2:	8c 93       	st	X, r24
			| ( (a_timerConfig->timer_prescaler.timer1 & 0x07) << CS10);

}
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	08 95       	ret

000017e2 <TIMER2_init>:

static void TIMER2_init(TIMER_ConfigType * a_timerConfig)
{
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	00 d0       	rcall	.+0      	; 0x17ec <TIMER2_init+0xa>
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	9a 83       	std	Y+2, r25	; 0x02
    17f2:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0;
    17f4:	e4 e4       	ldi	r30, 0x44	; 68
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	10 82       	st	Z, r1

	if(a_timerConfig->timer_mode == PWM_MODE){
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	83 81       	ldd	r24, Z+3	; 0x03
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	29 f5       	brne	.+74     	; 0x184e <TIMER2_init+0x6c>
		OCR2 = (((uint16)a_timerConfig->timer_mode_data.pwm_duty_cycle * TIMER2_MAX_COUNT)/100);
    1804:	03 e4       	ldi	r16, 0x43	; 67
    1806:	10 e0       	ldi	r17, 0x00	; 0
    1808:	e9 81       	ldd	r30, Y+1	; 0x01
    180a:	fa 81       	ldd	r31, Y+2	; 0x02
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	ca 01       	movw	r24, r20
    1814:	9c 01       	movw	r18, r24
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	c9 01       	movw	r24, r18
    181c:	96 95       	lsr	r25
    181e:	98 2f       	mov	r25, r24
    1820:	88 27       	eor	r24, r24
    1822:	97 95       	ror	r25
    1824:	87 95       	ror	r24
    1826:	82 1b       	sub	r24, r18
    1828:	93 0b       	sbc	r25, r19
    182a:	84 0f       	add	r24, r20
    182c:	95 1f       	adc	r25, r21
    182e:	24 e6       	ldi	r18, 0x64	; 100
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	b9 01       	movw	r22, r18
    1834:	0e 94 3e 20 	call	0x407c	; 0x407c <__udivmodhi4>
    1838:	cb 01       	movw	r24, r22
    183a:	f8 01       	movw	r30, r16
    183c:	80 83       	st	Z, r24
		DDRD  |= (1<<OC2);
    183e:	a1 e3       	ldi	r26, 0x31	; 49
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e1 e3       	ldi	r30, 0x31	; 49
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 68       	ori	r24, 0x80	; 128
    184a:	8c 93       	st	X, r24
    184c:	07 c0       	rjmp	.+14     	; 0x185c <TIMER2_init+0x7a>
	}
	else{
		SET_BIT(TCCR2,FOC2);
    184e:	a5 e4       	ldi	r26, 0x45	; 69
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e5 e4       	ldi	r30, 0x45	; 69
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	80 68       	ori	r24, 0x80	; 128
    185a:	8c 93       	st	X, r24
	}

	if(a_timerConfig->timer_mode == OVERFLOW_MODE){
    185c:	e9 81       	ldd	r30, Y+1	; 0x01
    185e:	fa 81       	ldd	r31, Y+2	; 0x02
    1860:	83 81       	ldd	r24, Z+3	; 0x03
    1862:	88 23       	and	r24, r24
    1864:	81 f4       	brne	.+32     	; 0x1886 <TIMER2_init+0xa4>
		SET_BIT(TIMSK,TOIE2);
    1866:	a9 e5       	ldi	r26, 0x59	; 89
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e9 e5       	ldi	r30, 0x59	; 89
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	80 64       	ori	r24, 0x40	; 64
    1872:	8c 93       	st	X, r24
		TCNT2 = a_timerConfig->timer_mode_data.ovf_initial_value & 0x0F; //Set Timer Initial value
    1874:	a4 e4       	ldi	r26, 0x44	; 68
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e9 81       	ldd	r30, Y+1	; 0x01
    187a:	fa 81       	ldd	r31, Y+2	; 0x02
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	8f 70       	andi	r24, 0x0F	; 15
    1882:	8c 93       	st	X, r24
    1884:	13 c0       	rjmp	.+38     	; 0x18ac <TIMER2_init+0xca>
	}
	else if(a_timerConfig->timer_mode == COMPARE_MODE){
    1886:	e9 81       	ldd	r30, Y+1	; 0x01
    1888:	fa 81       	ldd	r31, Y+2	; 0x02
    188a:	83 81       	ldd	r24, Z+3	; 0x03
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	71 f4       	brne	.+28     	; 0x18ac <TIMER2_init+0xca>
		OCR2 = a_timerConfig->timer_mode_data.ctc_compare_value;
    1890:	a3 e4       	ldi	r26, 0x43	; 67
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e9 81       	ldd	r30, Y+1	; 0x01
    1896:	fa 81       	ldd	r31, Y+2	; 0x02
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE2);
    189e:	a9 e5       	ldi	r26, 0x59	; 89
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e9 e5       	ldi	r30, 0x59	; 89
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	80 68       	ori	r24, 0x80	; 128
    18aa:	8c 93       	st	X, r24
	}

	TCCR2 = ((a_timerConfig->timer_mode & 0x01) << WGM20) |(a_timerConfig->timer_ocx_pin_behavior << COM20)\
    18ac:	a5 e4       	ldi	r26, 0x45	; 69
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e9 81       	ldd	r30, Y+1	; 0x01
    18b2:	fa 81       	ldd	r31, Y+2	; 0x02
    18b4:	83 81       	ldd	r24, Z+3	; 0x03
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	81 70       	andi	r24, 0x01	; 1
    18bc:	90 70       	andi	r25, 0x00	; 0
    18be:	00 24       	eor	r0, r0
    18c0:	96 95       	lsr	r25
    18c2:	87 95       	ror	r24
    18c4:	07 94       	ror	r0
    18c6:	96 95       	lsr	r25
    18c8:	87 95       	ror	r24
    18ca:	07 94       	ror	r0
    18cc:	98 2f       	mov	r25, r24
    18ce:	80 2d       	mov	r24, r0
    18d0:	28 2f       	mov	r18, r24
    18d2:	e9 81       	ldd	r30, Y+1	; 0x01
    18d4:	fa 81       	ldd	r31, Y+2	; 0x02
    18d6:	85 81       	ldd	r24, Z+5	; 0x05
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	82 95       	swap	r24
    18de:	92 95       	swap	r25
    18e0:	90 7f       	andi	r25, 0xF0	; 240
    18e2:	98 27       	eor	r25, r24
    18e4:	80 7f       	andi	r24, 0xF0	; 240
    18e6:	98 27       	eor	r25, r24
    18e8:	28 2b       	or	r18, r24
    18ea:	e9 81       	ldd	r30, Y+1	; 0x01
    18ec:	fa 81       	ldd	r31, Y+2	; 0x02
    18ee:	83 81       	ldd	r24, Z+3	; 0x03
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	82 70       	andi	r24, 0x02	; 2
    18f6:	90 70       	andi	r25, 0x00	; 0
    18f8:	95 95       	asr	r25
    18fa:	87 95       	ror	r24
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	92 2f       	mov	r25, r18
    190a:	98 2b       	or	r25, r24
    190c:	e9 81       	ldd	r30, Y+1	; 0x01
    190e:	fa 81       	ldd	r31, Y+2	; 0x02
    1910:	84 81       	ldd	r24, Z+4	; 0x04
    1912:	87 70       	andi	r24, 0x07	; 7
    1914:	89 2b       	or	r24, r25
    1916:	8c 93       	st	X, r24
			| (GET_BIT(a_timerConfig->timer_mode,1)<<WGM21) | ((a_timerConfig->timer_prescaler.timer2 & 0x07) << CS20);

}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	08 95       	ret

00001926 <TIMER0_deInit>:

static void TIMER0_deInit()
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    192e:	e3 e5       	ldi	r30, 0x53	; 83
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	10 82       	st	Z, r1
	TCNT0 = 0;
    1934:	e2 e5       	ldi	r30, 0x52	; 82
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	10 82       	st	Z, r1
	OCR0  = 0;
    193a:	ec e5       	ldi	r30, 0x5C	; 92
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    1940:	a9 e5       	ldi	r26, 0x59	; 89
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e9 e5       	ldi	r30, 0x59	; 89
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8d 7f       	andi	r24, 0xFD	; 253
    194c:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    194e:	a9 e5       	ldi	r26, 0x59	; 89
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e9 e5       	ldi	r30, 0x59	; 89
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	8e 7f       	andi	r24, 0xFE	; 254
    195a:	8c 93       	st	X, r24
}
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <TIMER1_deInit>:

static void TIMER1_deInit()
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    196a:	ef e4       	ldi	r30, 0x4F	; 79
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	10 82       	st	Z, r1
	TCCR1B = 0;
    1970:	ee e4       	ldi	r30, 0x4E	; 78
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	10 82       	st	Z, r1
	TCNT1 = 0;
    1976:	ec e4       	ldi	r30, 0x4C	; 76
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	11 82       	std	Z+1, r1	; 0x01
    197c:	10 82       	st	Z, r1
	OCR1A = 0;
    197e:	ea e4       	ldi	r30, 0x4A	; 74
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	11 82       	std	Z+1, r1	; 0x01
    1984:	10 82       	st	Z, r1
	OCR1B = 0;
    1986:	e8 e4       	ldi	r30, 0x48	; 72
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	11 82       	std	Z+1, r1	; 0x01
    198c:	10 82       	st	Z, r1
	ICR1 = 0;
    198e:	e6 e4       	ldi	r30, 0x46	; 70
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	11 82       	std	Z+1, r1	; 0x01
    1994:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
    1996:	a9 e5       	ldi	r26, 0x59	; 89
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e9 e5       	ldi	r30, 0x59	; 89
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	8f 7e       	andi	r24, 0xEF	; 239
    19a2:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1B);
    19a4:	a9 e5       	ldi	r26, 0x59	; 89
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e9 e5       	ldi	r30, 0x59	; 89
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	87 7f       	andi	r24, 0xF7	; 247
    19b0:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    19b2:	a9 e5       	ldi	r26, 0x59	; 89
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e9 e5       	ldi	r30, 0x59	; 89
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8e 7f       	andi	r24, 0xFE	; 254
    19be:	8c 93       	st	X, r24
}
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <TIMER2_deInit>:

static void TIMER2_deInit()
{
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    19ce:	e5 e4       	ldi	r30, 0x45	; 69
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	10 82       	st	Z, r1
	TCNT2 = 0;
    19d4:	e4 e4       	ldi	r30, 0x44	; 68
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	10 82       	st	Z, r1
	OCR2  = 0;
    19da:	e3 e4       	ldi	r30, 0x43	; 67
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE2);
    19e0:	a9 e5       	ldi	r26, 0x59	; 89
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e9 e5       	ldi	r30, 0x59	; 89
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	8f 77       	andi	r24, 0x7F	; 127
    19ec:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE2);
    19ee:	a9 e5       	ldi	r26, 0x59	; 89
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e9 e5       	ldi	r30, 0x59	; 89
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 7b       	andi	r24, 0xBF	; 191
    19fa:	8c 93       	st	X, r24
}
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, the function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <GPIO_setupPinDirection+0x6>
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <GPIO_setupPinDirection+0x8>
    1a0a:	0f 92       	push	r0
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	6a 83       	std	Y+2, r22	; 0x02
    1a14:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	84 30       	cpi	r24, 0x04	; 4
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <GPIO_setupPinDirection+0x1c>
    1a1c:	d5 c0       	rjmp	.+426    	; 0x1bc8 <GPIO_setupPinDirection+0x1c6>
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	89 30       	cpi	r24, 0x09	; 9
    1a22:	08 f0       	brcs	.+2      	; 0x1a26 <GPIO_setupPinDirection+0x24>
    1a24:	d1 c0       	rjmp	.+418    	; 0x1bc8 <GPIO_setupPinDirection+0x1c6>
		/*Do nothing if the pin or port numbers are greater than or equal the maximum allowed number */
	}
	else{
		/*Configure the specified pin as input/output*/
		switch(port_num){
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	3d 83       	std	Y+5, r19	; 0x05
    1a2e:	2c 83       	std	Y+4, r18	; 0x04
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 05       	cpc	r25, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <GPIO_setupPinDirection+0x3a>
    1a3a:	43 c0       	rjmp	.+134    	; 0x1ac2 <GPIO_setupPinDirection+0xc0>
    1a3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a40:	22 30       	cpi	r18, 0x02	; 2
    1a42:	31 05       	cpc	r19, r1
    1a44:	2c f4       	brge	.+10     	; 0x1a50 <GPIO_setupPinDirection+0x4e>
    1a46:	8c 81       	ldd	r24, Y+4	; 0x04
    1a48:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	71 f0       	breq	.+28     	; 0x1a6a <GPIO_setupPinDirection+0x68>
    1a4e:	bc c0       	rjmp	.+376    	; 0x1bc8 <GPIO_setupPinDirection+0x1c6>
    1a50:	2c 81       	ldd	r18, Y+4	; 0x04
    1a52:	3d 81       	ldd	r19, Y+5	; 0x05
    1a54:	22 30       	cpi	r18, 0x02	; 2
    1a56:	31 05       	cpc	r19, r1
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <GPIO_setupPinDirection+0x5a>
    1a5a:	5f c0       	rjmp	.+190    	; 0x1b1a <GPIO_setupPinDirection+0x118>
    1a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a60:	83 30       	cpi	r24, 0x03	; 3
    1a62:	91 05       	cpc	r25, r1
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <GPIO_setupPinDirection+0x66>
    1a66:	85 c0       	rjmp	.+266    	; 0x1b72 <GPIO_setupPinDirection+0x170>
    1a68:	af c0       	rjmp	.+350    	; 0x1bc8 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if(direction == PIN_OUTPUT){
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	a1 f4       	brne	.+40     	; 0x1a98 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    1a70:	aa e3       	ldi	r26, 0x3A	; 58
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	ea e3       	ldi	r30, 0x3A	; 58
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <GPIO_setupPinDirection+0x8c>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <GPIO_setupPinDirection+0x88>
    1a92:	84 2b       	or	r24, r20
    1a94:	8c 93       	st	X, r24
    1a96:	98 c0       	rjmp	.+304    	; 0x1bc8 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRA,pin_num);
    1a98:	aa e3       	ldi	r26, 0x3A	; 58
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	ea e3       	ldi	r30, 0x3A	; 58
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <GPIO_setupPinDirection+0xb4>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <GPIO_setupPinDirection+0xb0>
    1aba:	80 95       	com	r24
    1abc:	84 23       	and	r24, r20
    1abe:	8c 93       	st	X, r24
    1ac0:	83 c0       	rjmp	.+262    	; 0x1bc8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT){
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	a1 f4       	brne	.+40     	; 0x1af0 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    1ac8:	a7 e3       	ldi	r26, 0x37	; 55
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e7 e3       	ldi	r30, 0x37	; 55
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	48 2f       	mov	r20, r24
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 2e       	mov	r0, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <GPIO_setupPinDirection+0xe4>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <GPIO_setupPinDirection+0xe0>
    1aea:	84 2b       	or	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	6c c0       	rjmp	.+216    	; 0x1bc8 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRB,pin_num);
    1af0:	a7 e3       	ldi	r26, 0x37	; 55
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e7 e3       	ldi	r30, 0x37	; 55
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <GPIO_setupPinDirection+0x10c>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <GPIO_setupPinDirection+0x108>
    1b12:	80 95       	com	r24
    1b14:	84 23       	and	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	57 c0       	rjmp	.+174    	; 0x1bc8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT){
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	a1 f4       	brne	.+40     	; 0x1b48 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    1b20:	a4 e3       	ldi	r26, 0x34	; 52
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e4 e3       	ldi	r30, 0x34	; 52
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 2e       	mov	r0, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <GPIO_setupPinDirection+0x13c>
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	0a 94       	dec	r0
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <GPIO_setupPinDirection+0x138>
    1b42:	84 2b       	or	r24, r20
    1b44:	8c 93       	st	X, r24
    1b46:	40 c0       	rjmp	.+128    	; 0x1bc8 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRC,pin_num);
    1b48:	a4 e3       	ldi	r26, 0x34	; 52
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e4 e3       	ldi	r30, 0x34	; 52
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	48 2f       	mov	r20, r24
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	02 2e       	mov	r0, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <GPIO_setupPinDirection+0x164>
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	0a 94       	dec	r0
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <GPIO_setupPinDirection+0x160>
    1b6a:	80 95       	com	r24
    1b6c:	84 23       	and	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	2b c0       	rjmp	.+86     	; 0x1bc8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT){
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	a1 f4       	brne	.+40     	; 0x1ba0 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    1b78:	a1 e3       	ldi	r26, 0x31	; 49
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e1 e3       	ldi	r30, 0x31	; 49
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <GPIO_setupPinDirection+0x194>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <GPIO_setupPinDirection+0x190>
    1b9a:	84 2b       	or	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRD,pin_num);
    1ba0:	a1 e3       	ldi	r26, 0x31	; 49
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e1 e3       	ldi	r30, 0x31	; 49
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 2e       	mov	r0, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <GPIO_setupPinDirection+0x1bc>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <GPIO_setupPinDirection+0x1b8>
    1bc2:	80 95       	com	r24
    1bc4:	84 23       	and	r24, r20
    1bc6:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <GPIO_writePin+0x6>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <GPIO_writePin+0x8>
    1be0:	0f 92       	push	r0
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	6a 83       	std	Y+2, r22	; 0x02
    1bea:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num > NUM_OF_PINS_PER_PORT)){
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	84 30       	cpi	r24, 0x04	; 4
    1bf0:	08 f0       	brcs	.+2      	; 0x1bf4 <GPIO_writePin+0x1c>
    1bf2:	d5 c0       	rjmp	.+426    	; 0x1d9e <GPIO_writePin+0x1c6>
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	89 30       	cpi	r24, 0x09	; 9
    1bf8:	08 f0       	brcs	.+2      	; 0x1bfc <GPIO_writePin+0x24>
    1bfa:	d1 c0       	rjmp	.+418    	; 0x1d9e <GPIO_writePin+0x1c6>
		/*Do nothing if the pin or port numbers are greater than or equal the maximum allowed number */
	}
	else{
		/*Set/Clear the specified pin as required*/
		switch (port_num){
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	3d 83       	std	Y+5, r19	; 0x05
    1c04:	2c 83       	std	Y+4, r18	; 0x04
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <GPIO_writePin+0x3a>
    1c10:	43 c0       	rjmp	.+134    	; 0x1c98 <GPIO_writePin+0xc0>
    1c12:	2c 81       	ldd	r18, Y+4	; 0x04
    1c14:	3d 81       	ldd	r19, Y+5	; 0x05
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <GPIO_writePin+0x4e>
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	71 f0       	breq	.+28     	; 0x1c40 <GPIO_writePin+0x68>
    1c24:	bc c0       	rjmp	.+376    	; 0x1d9e <GPIO_writePin+0x1c6>
    1c26:	2c 81       	ldd	r18, Y+4	; 0x04
    1c28:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2a:	22 30       	cpi	r18, 0x02	; 2
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <GPIO_writePin+0x5a>
    1c30:	5f c0       	rjmp	.+190    	; 0x1cf0 <GPIO_writePin+0x118>
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	83 30       	cpi	r24, 0x03	; 3
    1c38:	91 05       	cpc	r25, r1
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <GPIO_writePin+0x66>
    1c3c:	85 c0       	rjmp	.+266    	; 0x1d48 <GPIO_writePin+0x170>
    1c3e:	af c0       	rjmp	.+350    	; 0x1d9e <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value == LOGIC_HIGH){
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	a1 f4       	brne	.+40     	; 0x1c6e <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1c46:	ab e3       	ldi	r26, 0x3B	; 59
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	eb e3       	ldi	r30, 0x3B	; 59
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	48 2f       	mov	r20, r24
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 2e       	mov	r0, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <GPIO_writePin+0x8c>
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	0a 94       	dec	r0
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <GPIO_writePin+0x88>
    1c68:	84 2b       	or	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	98 c0       	rjmp	.+304    	; 0x1d9e <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    1c6e:	ab e3       	ldi	r26, 0x3B	; 59
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	eb e3       	ldi	r30, 0x3B	; 59
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <GPIO_writePin+0xb4>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <GPIO_writePin+0xb0>
    1c90:	80 95       	com	r24
    1c92:	84 23       	and	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	83 c0       	rjmp	.+262    	; 0x1d9e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH){
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	a1 f4       	brne	.+40     	; 0x1cc6 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    1c9e:	a8 e3       	ldi	r26, 0x38	; 56
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e8 e3       	ldi	r30, 0x38	; 56
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <GPIO_writePin+0xe4>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <GPIO_writePin+0xe0>
    1cc0:	84 2b       	or	r24, r20
    1cc2:	8c 93       	st	X, r24
    1cc4:	6c c0       	rjmp	.+216    	; 0x1d9e <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,pin_num);
    1cc6:	a8 e3       	ldi	r26, 0x38	; 56
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e8 e3       	ldi	r30, 0x38	; 56
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	48 2f       	mov	r20, r24
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 2e       	mov	r0, r18
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <GPIO_writePin+0x10c>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	0a 94       	dec	r0
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <GPIO_writePin+0x108>
    1ce8:	80 95       	com	r24
    1cea:	84 23       	and	r24, r20
    1cec:	8c 93       	st	X, r24
    1cee:	57 c0       	rjmp	.+174    	; 0x1d9e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH){
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	a1 f4       	brne	.+40     	; 0x1d1e <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1cf6:	a5 e3       	ldi	r26, 0x35	; 53
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e5 e3       	ldi	r30, 0x35	; 53
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <GPIO_writePin+0x13c>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <GPIO_writePin+0x138>
    1d18:	84 2b       	or	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	40 c0       	rjmp	.+128    	; 0x1d9e <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTC,pin_num);
    1d1e:	a5 e3       	ldi	r26, 0x35	; 53
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e5 e3       	ldi	r30, 0x35	; 53
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <GPIO_writePin+0x164>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <GPIO_writePin+0x160>
    1d40:	80 95       	com	r24
    1d42:	84 23       	and	r24, r20
    1d44:	8c 93       	st	X, r24
    1d46:	2b c0       	rjmp	.+86     	; 0x1d9e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH){
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	a1 f4       	brne	.+40     	; 0x1d76 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1d4e:	a2 e3       	ldi	r26, 0x32	; 50
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e2 e3       	ldi	r30, 0x32	; 50
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <GPIO_writePin+0x194>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <GPIO_writePin+0x190>
    1d70:	84 2b       	or	r24, r20
    1d72:	8c 93       	st	X, r24
    1d74:	14 c0       	rjmp	.+40     	; 0x1d9e <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTD,pin_num);
    1d76:	a2 e3       	ldi	r26, 0x32	; 50
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e2 e3       	ldi	r30, 0x32	; 50
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <GPIO_writePin+0x1bc>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <GPIO_writePin+0x1b8>
    1d98:	80 95       	com	r24
    1d9a:	84 23       	and	r24, r20
    1d9c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <GPIO_readPin+0x6>
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <GPIO_readPin+0x8>
    1db6:	0f 92       	push	r0
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS) || (pin_num > NUM_OF_PINS_PER_PORT)){
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	84 30       	cpi	r24, 0x04	; 4
    1dc4:	18 f4       	brcc	.+6      	; 0x1dcc <GPIO_readPin+0x1e>
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	89 30       	cpi	r24, 0x09	; 9
    1dca:	10 f0       	brcs	.+4      	; 0x1dd0 <GPIO_readPin+0x22>
		/* return Logic low if the port number is greater than or equal the maximum allowed number */
	return LOGIC_LOW;
    1dcc:	1d 82       	std	Y+5, r1	; 0x05
    1dce:	9b c0       	rjmp	.+310    	; 0x1f06 <GPIO_readPin+0x158>
	}

	else{
		/* Read the pin value as required */
		switch(port_num)
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	3c 83       	std	Y+4, r19	; 0x04
    1dd8:	2b 83       	std	Y+3, r18	; 0x03
    1dda:	4b 81       	ldd	r20, Y+3	; 0x03
    1ddc:	5c 81       	ldd	r21, Y+4	; 0x04
    1dde:	41 30       	cpi	r20, 0x01	; 1
    1de0:	51 05       	cpc	r21, r1
    1de2:	b1 f1       	breq	.+108    	; 0x1e50 <GPIO_readPin+0xa2>
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	82 30       	cpi	r24, 0x02	; 2
    1dea:	91 05       	cpc	r25, r1
    1dec:	34 f4       	brge	.+12     	; 0x1dfa <GPIO_readPin+0x4c>
    1dee:	2b 81       	ldd	r18, Y+3	; 0x03
    1df0:	3c 81       	ldd	r19, Y+4	; 0x04
    1df2:	21 15       	cp	r18, r1
    1df4:	31 05       	cpc	r19, r1
    1df6:	71 f0       	breq	.+28     	; 0x1e14 <GPIO_readPin+0x66>
    1df8:	85 c0       	rjmp	.+266    	; 0x1f04 <GPIO_readPin+0x156>
    1dfa:	4b 81       	ldd	r20, Y+3	; 0x03
    1dfc:	5c 81       	ldd	r21, Y+4	; 0x04
    1dfe:	42 30       	cpi	r20, 0x02	; 2
    1e00:	51 05       	cpc	r21, r1
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <GPIO_readPin+0x58>
    1e04:	43 c0       	rjmp	.+134    	; 0x1e8c <GPIO_readPin+0xde>
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	83 30       	cpi	r24, 0x03	; 3
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <GPIO_readPin+0x64>
    1e10:	5b c0       	rjmp	.+182    	; 0x1ec8 <GPIO_readPin+0x11a>
    1e12:	78 c0       	rjmp	.+240    	; 0x1f04 <GPIO_readPin+0x156>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    1e14:	e9 e3       	ldi	r30, 0x39	; 57
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <GPIO_readPin+0x80>
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	2a 95       	dec	r18
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <GPIO_readPin+0x7c>
    1e32:	9a 01       	movw	r18, r20
    1e34:	28 23       	and	r18, r24
    1e36:	39 23       	and	r19, r25
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	88 2f       	mov	r24, r24
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a9 01       	movw	r20, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <GPIO_readPin+0x98>
    1e42:	55 95       	asr	r21
    1e44:	47 95       	ror	r20
    1e46:	8a 95       	dec	r24
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <GPIO_readPin+0x94>
    1e4a:	ca 01       	movw	r24, r20
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	5b c0       	rjmp	.+182    	; 0x1f06 <GPIO_readPin+0x158>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    1e50:	e6 e3       	ldi	r30, 0x36	; 54
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <GPIO_readPin+0xbc>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	2a 95       	dec	r18
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <GPIO_readPin+0xb8>
    1e6e:	9a 01       	movw	r18, r20
    1e70:	28 23       	and	r18, r24
    1e72:	39 23       	and	r19, r25
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	a9 01       	movw	r20, r18
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <GPIO_readPin+0xd4>
    1e7e:	55 95       	asr	r21
    1e80:	47 95       	ror	r20
    1e82:	8a 95       	dec	r24
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <GPIO_readPin+0xd0>
    1e86:	ca 01       	movw	r24, r20
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	3d c0       	rjmp	.+122    	; 0x1f06 <GPIO_readPin+0x158>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    1e8c:	e3 e3       	ldi	r30, 0x33	; 51
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	48 2f       	mov	r20, r24
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <GPIO_readPin+0xf8>
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	2a 95       	dec	r18
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <GPIO_readPin+0xf4>
    1eaa:	9a 01       	movw	r18, r20
    1eac:	28 23       	and	r18, r24
    1eae:	39 23       	and	r19, r25
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a9 01       	movw	r20, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <GPIO_readPin+0x110>
    1eba:	55 95       	asr	r21
    1ebc:	47 95       	ror	r20
    1ebe:	8a 95       	dec	r24
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <GPIO_readPin+0x10c>
    1ec2:	ca 01       	movw	r24, r20
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
    1ec6:	1f c0       	rjmp	.+62     	; 0x1f06 <GPIO_readPin+0x158>
		case PORTD_ID:
			return GET_BIT(PIND,pin_num);
    1ec8:	e0 e3       	ldi	r30, 0x30	; 48
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	48 2f       	mov	r20, r24
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <GPIO_readPin+0x134>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	2a 95       	dec	r18
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <GPIO_readPin+0x130>
    1ee6:	9a 01       	movw	r18, r20
    1ee8:	28 23       	and	r18, r24
    1eea:	39 23       	and	r19, r25
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <GPIO_readPin+0x14c>
    1ef6:	55 95       	asr	r21
    1ef8:	47 95       	ror	r20
    1efa:	8a 95       	dec	r24
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <GPIO_readPin+0x148>
    1efe:	ca 01       	movw	r24, r20
    1f00:	8d 83       	std	Y+5, r24	; 0x05
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <GPIO_readPin+0x158>
		}
	}
	return LOGIC_LOW;
    1f04:	1d 82       	std	Y+5, r1	; 0x05
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PinDirectionType direction){
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <GPIO_setupPortDirection+0x6>
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <GPIO_setupPortDirection+0x8>
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	89 83       	std	Y+1, r24	; 0x01
    1f26:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS){
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	84 30       	cpi	r24, 0x04	; 4
    1f2c:	90 f5       	brcc	.+100    	; 0x1f92 <GPIO_setupPortDirection+0x7a>
		/*Do nothing if the port number is greater than or equal the maximum allowed number */
	}
	else{
		/* Setup the port direction as required */
		switch(port_num){
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	3c 83       	std	Y+4, r19	; 0x04
    1f36:	2b 83       	std	Y+3, r18	; 0x03
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3c:	81 30       	cpi	r24, 0x01	; 1
    1f3e:	91 05       	cpc	r25, r1
    1f40:	d1 f0       	breq	.+52     	; 0x1f76 <GPIO_setupPortDirection+0x5e>
    1f42:	2b 81       	ldd	r18, Y+3	; 0x03
    1f44:	3c 81       	ldd	r19, Y+4	; 0x04
    1f46:	22 30       	cpi	r18, 0x02	; 2
    1f48:	31 05       	cpc	r19, r1
    1f4a:	2c f4       	brge	.+10     	; 0x1f56 <GPIO_setupPortDirection+0x3e>
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	61 f0       	breq	.+24     	; 0x1f6c <GPIO_setupPortDirection+0x54>
    1f54:	1e c0       	rjmp	.+60     	; 0x1f92 <GPIO_setupPortDirection+0x7a>
    1f56:	2b 81       	ldd	r18, Y+3	; 0x03
    1f58:	3c 81       	ldd	r19, Y+4	; 0x04
    1f5a:	22 30       	cpi	r18, 0x02	; 2
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	81 f0       	breq	.+32     	; 0x1f80 <GPIO_setupPortDirection+0x68>
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	9c 81       	ldd	r25, Y+4	; 0x04
    1f64:	83 30       	cpi	r24, 0x03	; 3
    1f66:	91 05       	cpc	r25, r1
    1f68:	81 f0       	breq	.+32     	; 0x1f8a <GPIO_setupPortDirection+0x72>
    1f6a:	13 c0       	rjmp	.+38     	; 0x1f92 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1f6c:	ea e3       	ldi	r30, 0x3A	; 58
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	80 83       	st	Z, r24
    1f74:	0e c0       	rjmp	.+28     	; 0x1f92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1f76:	e7 e3       	ldi	r30, 0x37	; 55
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	80 83       	st	Z, r24
    1f7e:	09 c0       	rjmp	.+18     	; 0x1f92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1f80:	e4 e3       	ldi	r30, 0x34	; 52
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	80 83       	st	Z, r24
    1f88:	04 c0       	rjmp	.+8      	; 0x1f92 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1f8a:	e1 e3       	ldi	r30, 0x31	; 49
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value){
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <GPIO_writePort+0x6>
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <GPIO_writePort+0x8>
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>=NUM_OF_PORTS){
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	84 30       	cpi	r24, 0x04	; 4
    1fb4:	90 f5       	brcc	.+100    	; 0x201a <GPIO_writePort+0x7a>
		/*Do nothing if the port number is greater than or equal the maximum allowed number */
	}
	else{
		switch(port_num){
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	3c 83       	std	Y+4, r19	; 0x04
    1fbe:	2b 83       	std	Y+3, r18	; 0x03
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	d1 f0       	breq	.+52     	; 0x1ffe <GPIO_writePort+0x5e>
    1fca:	2b 81       	ldd	r18, Y+3	; 0x03
    1fcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fce:	22 30       	cpi	r18, 0x02	; 2
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	2c f4       	brge	.+10     	; 0x1fde <GPIO_writePort+0x3e>
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	61 f0       	breq	.+24     	; 0x1ff4 <GPIO_writePort+0x54>
    1fdc:	1e c0       	rjmp	.+60     	; 0x201a <GPIO_writePort+0x7a>
    1fde:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe2:	22 30       	cpi	r18, 0x02	; 2
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	81 f0       	breq	.+32     	; 0x2008 <GPIO_writePort+0x68>
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	83 30       	cpi	r24, 0x03	; 3
    1fee:	91 05       	cpc	r25, r1
    1ff0:	81 f0       	breq	.+32     	; 0x2012 <GPIO_writePort+0x72>
    1ff2:	13 c0       	rjmp	.+38     	; 0x201a <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1ff4:	eb e3       	ldi	r30, 0x3B	; 59
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	80 83       	st	Z, r24
    1ffc:	0e c0       	rjmp	.+28     	; 0x201a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ffe:	e8 e3       	ldi	r30, 0x38	; 56
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	80 83       	st	Z, r24
    2006:	09 c0       	rjmp	.+18     	; 0x201a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2008:	e5 e3       	ldi	r30, 0x35	; 53
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	80 83       	st	Z, r24
    2010:	04 c0       	rjmp	.+8      	; 0x201a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2012:	e2 e3       	ldi	r30, 0x32	; 50
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	80 83       	st	Z, r24
			break;
		}
	}
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <GPIO_readPort+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <GPIO_readPort+0x8>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>=NUM_OF_PORTS){
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	84 30       	cpi	r24, 0x04	; 4
    203a:	98 f5       	brcc	.+102    	; 0x20a2 <GPIO_readPort+0x7a>
		/* return Logic low if the port number is greater than or equal the maximum allowed number */
	}
	else{
		switch(port_num){
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	3c 83       	std	Y+4, r19	; 0x04
    2044:	2b 83       	std	Y+3, r18	; 0x03
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	91 05       	cpc	r25, r1
    204e:	d1 f0       	breq	.+52     	; 0x2084 <GPIO_readPort+0x5c>
    2050:	2b 81       	ldd	r18, Y+3	; 0x03
    2052:	3c 81       	ldd	r19, Y+4	; 0x04
    2054:	22 30       	cpi	r18, 0x02	; 2
    2056:	31 05       	cpc	r19, r1
    2058:	2c f4       	brge	.+10     	; 0x2064 <GPIO_readPort+0x3c>
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	61 f0       	breq	.+24     	; 0x207a <GPIO_readPort+0x52>
    2062:	1f c0       	rjmp	.+62     	; 0x20a2 <GPIO_readPort+0x7a>
    2064:	2b 81       	ldd	r18, Y+3	; 0x03
    2066:	3c 81       	ldd	r19, Y+4	; 0x04
    2068:	22 30       	cpi	r18, 0x02	; 2
    206a:	31 05       	cpc	r19, r1
    206c:	81 f0       	breq	.+32     	; 0x208e <GPIO_readPort+0x66>
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	9c 81       	ldd	r25, Y+4	; 0x04
    2072:	83 30       	cpi	r24, 0x03	; 3
    2074:	91 05       	cpc	r25, r1
    2076:	81 f0       	breq	.+32     	; 0x2098 <GPIO_readPort+0x70>
    2078:	14 c0       	rjmp	.+40     	; 0x20a2 <GPIO_readPort+0x7a>
		case PORTA_ID:
			return PINA;
    207a:	e9 e3       	ldi	r30, 0x39	; 57
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	90 81       	ld	r25, Z
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	10 c0       	rjmp	.+32     	; 0x20a4 <GPIO_readPort+0x7c>
		case PORTB_ID:
			return PINB;
    2084:	e6 e3       	ldi	r30, 0x36	; 54
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	20 81       	ld	r18, Z
    208a:	2a 83       	std	Y+2, r18	; 0x02
    208c:	0b c0       	rjmp	.+22     	; 0x20a4 <GPIO_readPort+0x7c>
		case PORTC_ID:
			return PINC;
    208e:	e3 e3       	ldi	r30, 0x33	; 51
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	30 81       	ld	r19, Z
    2094:	3a 83       	std	Y+2, r19	; 0x02
    2096:	06 c0       	rjmp	.+12     	; 0x20a4 <GPIO_readPort+0x7c>
		case PORTD_ID:
			return PIND;
    2098:	e0 e3       	ldi	r30, 0x30	; 48
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	8a 83       	std	Y+2, r24	; 0x02
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <GPIO_readPort+0x7c>
		}
	}
	return LOGIC_LOW;
    20a2:	1a 82       	std	Y+2, r1	; 0x02
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <GPIO_setupNibbleDirection>:
 * If the direction value is PORT_INPUT all pins in the nibble of the port should be input pins.
 * If the direction value is PORT_OUTPUT all pins n the nibble of the port should be output pins.
 * The Nibble of a Port is chosen to the be most or the least significant nibble.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupNibbleDirection(uint8 port_num, GPIO_NibbleDirectionType direction, GPIO_NibbleSignificance nibble_choice){
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <GPIO_setupNibbleDirection+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <GPIO_setupNibbleDirection+0x8>
    20bc:	0f 92       	push	r0
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	6a 83       	std	Y+2, r22	; 0x02
    20c6:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS){
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	84 30       	cpi	r24, 0x04	; 4
    20cc:	08 f0       	brcs	.+2      	; 0x20d0 <GPIO_setupNibbleDirection+0x1c>
    20ce:	22 c1       	rjmp	.+580    	; 0x2314 <GPIO_setupNibbleDirection+0x260>
		/*Do nothing if the port number is greater than or equal the maximum allowed number */
	}
	else{
		/*Configure the specified pin as input/output*/
		switch(port_num){
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	3d 83       	std	Y+5, r19	; 0x05
    20d8:	2c 83       	std	Y+4, r18	; 0x04
    20da:	8c 81       	ldd	r24, Y+4	; 0x04
    20dc:	9d 81       	ldd	r25, Y+5	; 0x05
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	91 05       	cpc	r25, r1
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <GPIO_setupNibbleDirection+0x32>
    20e4:	58 c0       	rjmp	.+176    	; 0x2196 <GPIO_setupNibbleDirection+0xe2>
    20e6:	ec 81       	ldd	r30, Y+4	; 0x04
    20e8:	fd 81       	ldd	r31, Y+5	; 0x05
    20ea:	e2 30       	cpi	r30, 0x02	; 2
    20ec:	f1 05       	cpc	r31, r1
    20ee:	34 f4       	brge	.+12     	; 0x20fc <GPIO_setupNibbleDirection+0x48>
    20f0:	2c 81       	ldd	r18, Y+4	; 0x04
    20f2:	3d 81       	ldd	r19, Y+5	; 0x05
    20f4:	21 15       	cp	r18, r1
    20f6:	31 05       	cpc	r19, r1
    20f8:	71 f0       	breq	.+28     	; 0x2116 <GPIO_setupNibbleDirection+0x62>
    20fa:	0c c1       	rjmp	.+536    	; 0x2314 <GPIO_setupNibbleDirection+0x260>
    20fc:	8c 81       	ldd	r24, Y+4	; 0x04
    20fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2100:	82 30       	cpi	r24, 0x02	; 2
    2102:	91 05       	cpc	r25, r1
    2104:	09 f4       	brne	.+2      	; 0x2108 <GPIO_setupNibbleDirection+0x54>
    2106:	87 c0       	rjmp	.+270    	; 0x2216 <GPIO_setupNibbleDirection+0x162>
    2108:	ec 81       	ldd	r30, Y+4	; 0x04
    210a:	fd 81       	ldd	r31, Y+5	; 0x05
    210c:	e3 30       	cpi	r30, 0x03	; 3
    210e:	f1 05       	cpc	r31, r1
    2110:	09 f4       	brne	.+2      	; 0x2114 <GPIO_setupNibbleDirection+0x60>
    2112:	c1 c0       	rjmp	.+386    	; 0x2296 <GPIO_setupNibbleDirection+0x1e2>
    2114:	ff c0       	rjmp	.+510    	; 0x2314 <GPIO_setupNibbleDirection+0x260>
		case PORTA_ID:
			if(direction == NIBBLE_OUTPUT){
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	a1 f4       	brne	.+40     	; 0x2144 <GPIO_setupNibbleDirection+0x90>
				SET_NIBBLE(DDRA,nibble_choice);
    211c:	aa e3       	ldi	r26, 0x3A	; 58
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	ea e3       	ldi	r30, 0x3A	; 58
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	48 2f       	mov	r20, r24
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	8f e0       	ldi	r24, 0x0F	; 15
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	02 2e       	mov	r0, r18
    2134:	02 c0       	rjmp	.+4      	; 0x213a <GPIO_setupNibbleDirection+0x86>
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	0a 94       	dec	r0
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <GPIO_setupNibbleDirection+0x82>
    213e:	84 2b       	or	r24, r20
    2140:	8c 93       	st	X, r24
    2142:	e8 c0       	rjmp	.+464    	; 0x2314 <GPIO_setupNibbleDirection+0x260>
			}
			else{
				CLEAR_NIBBLE(DDRA,nibble_choice);
    2144:	aa e3       	ldi	r26, 0x3A	; 58
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	ea e3       	ldi	r30, 0x3A	; 58
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	50 81       	ld	r21, Z
    214e:	ea e3       	ldi	r30, 0x3A	; 58
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	60 81       	ld	r22, Z
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	80 ef       	ldi	r24, 0xF0	; 240
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <GPIO_setupNibbleDirection+0xb0>
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	2a 95       	dec	r18
    2166:	e2 f7       	brpl	.-8      	; 0x2160 <GPIO_setupNibbleDirection+0xac>
    2168:	48 2f       	mov	r20, r24
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	88 e0       	ldi	r24, 0x08	; 8
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	fc 01       	movw	r30, r24
    2176:	e2 1b       	sub	r30, r18
    2178:	f3 0b       	sbc	r31, r19
    217a:	9f 01       	movw	r18, r30
    217c:	80 ef       	ldi	r24, 0xF0	; 240
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	02 2e       	mov	r0, r18
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <GPIO_setupNibbleDirection+0xd4>
    2184:	96 95       	lsr	r25
    2186:	87 95       	ror	r24
    2188:	0a 94       	dec	r0
    218a:	e2 f7       	brpl	.-8      	; 0x2184 <GPIO_setupNibbleDirection+0xd0>
    218c:	84 2b       	or	r24, r20
    218e:	86 23       	and	r24, r22
    2190:	85 23       	and	r24, r21
    2192:	8c 93       	st	X, r24
    2194:	bf c0       	rjmp	.+382    	; 0x2314 <GPIO_setupNibbleDirection+0x260>
			}
			break;
		case PORTB_ID:
			if(direction == NIBBLE_OUTPUT){
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	a1 f4       	brne	.+40     	; 0x21c4 <GPIO_setupNibbleDirection+0x110>
				SET_NIBBLE(DDRB,nibble_choice);
    219c:	a7 e3       	ldi	r26, 0x37	; 55
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e7 e3       	ldi	r30, 0x37	; 55
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	48 2f       	mov	r20, r24
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	8f e0       	ldi	r24, 0x0F	; 15
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	02 2e       	mov	r0, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <GPIO_setupNibbleDirection+0x106>
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	0a 94       	dec	r0
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <GPIO_setupNibbleDirection+0x102>
    21be:	84 2b       	or	r24, r20
    21c0:	8c 93       	st	X, r24
    21c2:	a8 c0       	rjmp	.+336    	; 0x2314 <GPIO_setupNibbleDirection+0x260>
			}
			else{
				CLEAR_NIBBLE(DDRB,nibble_choice);
    21c4:	a7 e3       	ldi	r26, 0x37	; 55
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e7 e3       	ldi	r30, 0x37	; 55
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	50 81       	ld	r21, Z
    21ce:	e7 e3       	ldi	r30, 0x37	; 55
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	60 81       	ld	r22, Z
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	80 ef       	ldi	r24, 0xF0	; 240
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <GPIO_setupNibbleDirection+0x130>
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	2a 95       	dec	r18
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <GPIO_setupNibbleDirection+0x12c>
    21e8:	48 2f       	mov	r20, r24
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	88 e0       	ldi	r24, 0x08	; 8
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	fc 01       	movw	r30, r24
    21f6:	e2 1b       	sub	r30, r18
    21f8:	f3 0b       	sbc	r31, r19
    21fa:	9f 01       	movw	r18, r30
    21fc:	80 ef       	ldi	r24, 0xF0	; 240
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 2e       	mov	r0, r18
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <GPIO_setupNibbleDirection+0x154>
    2204:	96 95       	lsr	r25
    2206:	87 95       	ror	r24
    2208:	0a 94       	dec	r0
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <GPIO_setupNibbleDirection+0x150>
    220c:	84 2b       	or	r24, r20
    220e:	86 23       	and	r24, r22
    2210:	85 23       	and	r24, r21
    2212:	8c 93       	st	X, r24
    2214:	7f c0       	rjmp	.+254    	; 0x2314 <GPIO_setupNibbleDirection+0x260>
			}
			break;
		case PORTC_ID:
			if(direction == NIBBLE_OUTPUT){
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	a1 f4       	brne	.+40     	; 0x2244 <GPIO_setupNibbleDirection+0x190>
				SET_NIBBLE(DDRC,nibble_choice);
    221c:	a4 e3       	ldi	r26, 0x34	; 52
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e4 e3       	ldi	r30, 0x34	; 52
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	48 2f       	mov	r20, r24
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	8f e0       	ldi	r24, 0x0F	; 15
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <GPIO_setupNibbleDirection+0x186>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <GPIO_setupNibbleDirection+0x182>
    223e:	84 2b       	or	r24, r20
    2240:	8c 93       	st	X, r24
    2242:	68 c0       	rjmp	.+208    	; 0x2314 <GPIO_setupNibbleDirection+0x260>
			}
			else{
				CLEAR_NIBBLE(DDRC,nibble_choice);
    2244:	a4 e3       	ldi	r26, 0x34	; 52
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e4 e3       	ldi	r30, 0x34	; 52
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	50 81       	ld	r21, Z
    224e:	e4 e3       	ldi	r30, 0x34	; 52
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	60 81       	ld	r22, Z
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	80 ef       	ldi	r24, 0xF0	; 240
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <GPIO_setupNibbleDirection+0x1b0>
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	2a 95       	dec	r18
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <GPIO_setupNibbleDirection+0x1ac>
    2268:	48 2f       	mov	r20, r24
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	88 e0       	ldi	r24, 0x08	; 8
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	fc 01       	movw	r30, r24
    2276:	e2 1b       	sub	r30, r18
    2278:	f3 0b       	sbc	r31, r19
    227a:	9f 01       	movw	r18, r30
    227c:	80 ef       	ldi	r24, 0xF0	; 240
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	02 2e       	mov	r0, r18
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <GPIO_setupNibbleDirection+0x1d4>
    2284:	96 95       	lsr	r25
    2286:	87 95       	ror	r24
    2288:	0a 94       	dec	r0
    228a:	e2 f7       	brpl	.-8      	; 0x2284 <GPIO_setupNibbleDirection+0x1d0>
    228c:	84 2b       	or	r24, r20
    228e:	86 23       	and	r24, r22
    2290:	85 23       	and	r24, r21
    2292:	8c 93       	st	X, r24
    2294:	3f c0       	rjmp	.+126    	; 0x2314 <GPIO_setupNibbleDirection+0x260>
			}
			break;
		case PORTD_ID:
			if(direction == NIBBLE_OUTPUT){
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	a1 f4       	brne	.+40     	; 0x22c4 <GPIO_setupNibbleDirection+0x210>
				SET_NIBBLE(DDRD,nibble_choice);
    229c:	a1 e3       	ldi	r26, 0x31	; 49
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e1 e3       	ldi	r30, 0x31	; 49
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	48 2f       	mov	r20, r24
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	8f e0       	ldi	r24, 0x0F	; 15
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	02 2e       	mov	r0, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <GPIO_setupNibbleDirection+0x206>
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	0a 94       	dec	r0
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <GPIO_setupNibbleDirection+0x202>
    22be:	84 2b       	or	r24, r20
    22c0:	8c 93       	st	X, r24
    22c2:	28 c0       	rjmp	.+80     	; 0x2314 <GPIO_setupNibbleDirection+0x260>
			}
			else{
				CLEAR_NIBBLE(DDRD,nibble_choice);
    22c4:	a1 e3       	ldi	r26, 0x31	; 49
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e1 e3       	ldi	r30, 0x31	; 49
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	50 81       	ld	r21, Z
    22ce:	e1 e3       	ldi	r30, 0x31	; 49
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	60 81       	ld	r22, Z
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	80 ef       	ldi	r24, 0xF0	; 240
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <GPIO_setupNibbleDirection+0x230>
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	2a 95       	dec	r18
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <GPIO_setupNibbleDirection+0x22c>
    22e8:	48 2f       	mov	r20, r24
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	88 e0       	ldi	r24, 0x08	; 8
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	fc 01       	movw	r30, r24
    22f6:	e2 1b       	sub	r30, r18
    22f8:	f3 0b       	sbc	r31, r19
    22fa:	9f 01       	movw	r18, r30
    22fc:	80 ef       	ldi	r24, 0xF0	; 240
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 2e       	mov	r0, r18
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <GPIO_setupNibbleDirection+0x254>
    2304:	96 95       	lsr	r25
    2306:	87 95       	ror	r24
    2308:	0a 94       	dec	r0
    230a:	e2 f7       	brpl	.-8      	; 0x2304 <GPIO_setupNibbleDirection+0x250>
    230c:	84 2b       	or	r24, r20
    230e:	86 23       	and	r24, r22
    2310:	85 23       	and	r24, r21
    2312:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <GPIO_writeNibble>:
 * Write the value on the required nibble of a specific port.
 * If any pin in the nibble is output pin the value will be written.
 * If any pin in the nibble is input pin this will activate/deactivate the internal pull-up resistor.
 * If the port number is not correct, The function will not handle the request.
 */
void GPIO_writeNibble(uint8 port_num, uint8 value, GPIO_NibbleSignificance nibble_choice){
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <GPIO_writeNibble+0x6>
    232a:	00 d0       	rcall	.+0      	; 0x232c <GPIO_writeNibble+0x8>
    232c:	0f 92       	push	r0
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	6a 83       	std	Y+2, r22	; 0x02
    2336:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num>=NUM_OF_PORTS){
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	84 30       	cpi	r24, 0x04	; 4
    233c:	08 f0       	brcs	.+2      	; 0x2340 <GPIO_writeNibble+0x1c>
    233e:	1e c1       	rjmp	.+572    	; 0x257c <GPIO_writeNibble+0x258>
		/*Do nothing if the port number is greater than or equal the maximum allowed number */
	}
	else{
		switch(port_num){
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	3d 83       	std	Y+5, r19	; 0x05
    2348:	2c 83       	std	Y+4, r18	; 0x04
    234a:	6c 81       	ldd	r22, Y+4	; 0x04
    234c:	7d 81       	ldd	r23, Y+5	; 0x05
    234e:	61 30       	cpi	r22, 0x01	; 1
    2350:	71 05       	cpc	r23, r1
    2352:	09 f4       	brne	.+2      	; 0x2356 <GPIO_writeNibble+0x32>
    2354:	57 c0       	rjmp	.+174    	; 0x2404 <GPIO_writeNibble+0xe0>
    2356:	8c 81       	ldd	r24, Y+4	; 0x04
    2358:	9d 81       	ldd	r25, Y+5	; 0x05
    235a:	82 30       	cpi	r24, 0x02	; 2
    235c:	91 05       	cpc	r25, r1
    235e:	34 f4       	brge	.+12     	; 0x236c <GPIO_writeNibble+0x48>
    2360:	2c 81       	ldd	r18, Y+4	; 0x04
    2362:	3d 81       	ldd	r19, Y+5	; 0x05
    2364:	21 15       	cp	r18, r1
    2366:	31 05       	cpc	r19, r1
    2368:	71 f0       	breq	.+28     	; 0x2386 <GPIO_writeNibble+0x62>
    236a:	08 c1       	rjmp	.+528    	; 0x257c <GPIO_writeNibble+0x258>
    236c:	6c 81       	ldd	r22, Y+4	; 0x04
    236e:	7d 81       	ldd	r23, Y+5	; 0x05
    2370:	62 30       	cpi	r22, 0x02	; 2
    2372:	71 05       	cpc	r23, r1
    2374:	09 f4       	brne	.+2      	; 0x2378 <GPIO_writeNibble+0x54>
    2376:	85 c0       	rjmp	.+266    	; 0x2482 <GPIO_writeNibble+0x15e>
    2378:	8c 81       	ldd	r24, Y+4	; 0x04
    237a:	9d 81       	ldd	r25, Y+5	; 0x05
    237c:	83 30       	cpi	r24, 0x03	; 3
    237e:	91 05       	cpc	r25, r1
    2380:	09 f4       	brne	.+2      	; 0x2384 <GPIO_writeNibble+0x60>
    2382:	be c0       	rjmp	.+380    	; 0x2500 <GPIO_writeNibble+0x1dc>
    2384:	fb c0       	rjmp	.+502    	; 0x257c <GPIO_writeNibble+0x258>
		case PORTA_ID:
			WRTIE_NIBBLE(PORTA, value, nibble_choice);
    2386:	ab e3       	ldi	r26, 0x3B	; 59
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	eb e3       	ldi	r30, 0x3B	; 59
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	50 81       	ld	r21, Z
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	80 ef       	ldi	r24, 0xF0	; 240
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <GPIO_writeNibble+0x7c>
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	2a 95       	dec	r18
    23a2:	e2 f7       	brpl	.-8      	; 0x239c <GPIO_writeNibble+0x78>
    23a4:	48 2f       	mov	r20, r24
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	88 e0       	ldi	r24, 0x08	; 8
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	bc 01       	movw	r22, r24
    23b2:	62 1b       	sub	r22, r18
    23b4:	73 0b       	sbc	r23, r19
    23b6:	9b 01       	movw	r18, r22
    23b8:	80 ef       	ldi	r24, 0xF0	; 240
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <GPIO_writeNibble+0x9e>
    23be:	96 95       	lsr	r25
    23c0:	87 95       	ror	r24
    23c2:	2a 95       	dec	r18
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <GPIO_writeNibble+0x9a>
    23c6:	84 2b       	or	r24, r20
    23c8:	58 23       	and	r21, r24
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	88 2f       	mov	r24, r24
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	b9 01       	movw	r22, r18
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <GPIO_writeNibble+0xba>
    23da:	66 0f       	add	r22, r22
    23dc:	77 1f       	adc	r23, r23
    23de:	8a 95       	dec	r24
    23e0:	e2 f7       	brpl	.-8      	; 0x23da <GPIO_writeNibble+0xb6>
    23e2:	cb 01       	movw	r24, r22
    23e4:	48 2f       	mov	r20, r24
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	8f e0       	ldi	r24, 0x0F	; 15
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	02 2e       	mov	r0, r18
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <GPIO_writeNibble+0xd4>
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	0a 94       	dec	r0
    23fa:	e2 f7       	brpl	.-8      	; 0x23f4 <GPIO_writeNibble+0xd0>
    23fc:	84 23       	and	r24, r20
    23fe:	85 2b       	or	r24, r21
    2400:	8c 93       	st	X, r24
    2402:	bc c0       	rjmp	.+376    	; 0x257c <GPIO_writeNibble+0x258>
			break;
		case PORTB_ID:
			WRTIE_NIBBLE(PORTB, value, nibble_choice);
    2404:	a8 e3       	ldi	r26, 0x38	; 56
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e8 e3       	ldi	r30, 0x38	; 56
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	50 81       	ld	r21, Z
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	80 ef       	ldi	r24, 0xF0	; 240
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	02 c0       	rjmp	.+4      	; 0x241e <GPIO_writeNibble+0xfa>
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	2a 95       	dec	r18
    2420:	e2 f7       	brpl	.-8      	; 0x241a <GPIO_writeNibble+0xf6>
    2422:	48 2f       	mov	r20, r24
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	88 e0       	ldi	r24, 0x08	; 8
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	bc 01       	movw	r22, r24
    2430:	62 1b       	sub	r22, r18
    2432:	73 0b       	sbc	r23, r19
    2434:	9b 01       	movw	r18, r22
    2436:	80 ef       	ldi	r24, 0xF0	; 240
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <GPIO_writeNibble+0x11c>
    243c:	96 95       	lsr	r25
    243e:	87 95       	ror	r24
    2440:	2a 95       	dec	r18
    2442:	e2 f7       	brpl	.-8      	; 0x243c <GPIO_writeNibble+0x118>
    2444:	84 2b       	or	r24, r20
    2446:	58 23       	and	r21, r24
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	b9 01       	movw	r22, r18
    2456:	02 c0       	rjmp	.+4      	; 0x245c <GPIO_writeNibble+0x138>
    2458:	66 0f       	add	r22, r22
    245a:	77 1f       	adc	r23, r23
    245c:	8a 95       	dec	r24
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <GPIO_writeNibble+0x134>
    2460:	cb 01       	movw	r24, r22
    2462:	48 2f       	mov	r20, r24
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	8f e0       	ldi	r24, 0x0F	; 15
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	02 2e       	mov	r0, r18
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <GPIO_writeNibble+0x152>
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	0a 94       	dec	r0
    2478:	e2 f7       	brpl	.-8      	; 0x2472 <GPIO_writeNibble+0x14e>
    247a:	84 23       	and	r24, r20
    247c:	85 2b       	or	r24, r21
    247e:	8c 93       	st	X, r24
    2480:	7d c0       	rjmp	.+250    	; 0x257c <GPIO_writeNibble+0x258>
			break;
		case PORTC_ID:
			WRTIE_NIBBLE(PORTC, value, nibble_choice);
    2482:	a5 e3       	ldi	r26, 0x35	; 53
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e5 e3       	ldi	r30, 0x35	; 53
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	50 81       	ld	r21, Z
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	80 ef       	ldi	r24, 0xF0	; 240
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	02 c0       	rjmp	.+4      	; 0x249c <GPIO_writeNibble+0x178>
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	2a 95       	dec	r18
    249e:	e2 f7       	brpl	.-8      	; 0x2498 <GPIO_writeNibble+0x174>
    24a0:	48 2f       	mov	r20, r24
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	88 e0       	ldi	r24, 0x08	; 8
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	bc 01       	movw	r22, r24
    24ae:	62 1b       	sub	r22, r18
    24b0:	73 0b       	sbc	r23, r19
    24b2:	9b 01       	movw	r18, r22
    24b4:	80 ef       	ldi	r24, 0xF0	; 240
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <GPIO_writeNibble+0x19a>
    24ba:	96 95       	lsr	r25
    24bc:	87 95       	ror	r24
    24be:	2a 95       	dec	r18
    24c0:	e2 f7       	brpl	.-8      	; 0x24ba <GPIO_writeNibble+0x196>
    24c2:	84 2b       	or	r24, r20
    24c4:	58 23       	and	r21, r24
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	b9 01       	movw	r22, r18
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <GPIO_writeNibble+0x1b6>
    24d6:	66 0f       	add	r22, r22
    24d8:	77 1f       	adc	r23, r23
    24da:	8a 95       	dec	r24
    24dc:	e2 f7       	brpl	.-8      	; 0x24d6 <GPIO_writeNibble+0x1b2>
    24de:	cb 01       	movw	r24, r22
    24e0:	48 2f       	mov	r20, r24
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	8f e0       	ldi	r24, 0x0F	; 15
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 2e       	mov	r0, r18
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <GPIO_writeNibble+0x1d0>
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	0a 94       	dec	r0
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <GPIO_writeNibble+0x1cc>
    24f8:	84 23       	and	r24, r20
    24fa:	85 2b       	or	r24, r21
    24fc:	8c 93       	st	X, r24
    24fe:	3e c0       	rjmp	.+124    	; 0x257c <GPIO_writeNibble+0x258>
			break;
		case PORTD_ID:
			WRTIE_NIBBLE(PORTD, value, nibble_choice);
    2500:	a2 e3       	ldi	r26, 0x32	; 50
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e2 e3       	ldi	r30, 0x32	; 50
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	50 81       	ld	r21, Z
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	80 ef       	ldi	r24, 0xF0	; 240
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	02 c0       	rjmp	.+4      	; 0x251a <GPIO_writeNibble+0x1f6>
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	2a 95       	dec	r18
    251c:	e2 f7       	brpl	.-8      	; 0x2516 <GPIO_writeNibble+0x1f2>
    251e:	48 2f       	mov	r20, r24
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	88 e0       	ldi	r24, 0x08	; 8
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	bc 01       	movw	r22, r24
    252c:	62 1b       	sub	r22, r18
    252e:	73 0b       	sbc	r23, r19
    2530:	9b 01       	movw	r18, r22
    2532:	80 ef       	ldi	r24, 0xF0	; 240
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	02 c0       	rjmp	.+4      	; 0x253c <GPIO_writeNibble+0x218>
    2538:	96 95       	lsr	r25
    253a:	87 95       	ror	r24
    253c:	2a 95       	dec	r18
    253e:	e2 f7       	brpl	.-8      	; 0x2538 <GPIO_writeNibble+0x214>
    2540:	84 2b       	or	r24, r20
    2542:	58 23       	and	r21, r24
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	b9 01       	movw	r22, r18
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <GPIO_writeNibble+0x234>
    2554:	66 0f       	add	r22, r22
    2556:	77 1f       	adc	r23, r23
    2558:	8a 95       	dec	r24
    255a:	e2 f7       	brpl	.-8      	; 0x2554 <GPIO_writeNibble+0x230>
    255c:	cb 01       	movw	r24, r22
    255e:	48 2f       	mov	r20, r24
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	28 2f       	mov	r18, r24
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	8f e0       	ldi	r24, 0x0F	; 15
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	02 2e       	mov	r0, r18
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <GPIO_writeNibble+0x24e>
    256e:	88 0f       	add	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	0a 94       	dec	r0
    2574:	e2 f7       	brpl	.-8      	; 0x256e <GPIO_writeNibble+0x24a>
    2576:	84 23       	and	r24, r20
    2578:	85 2b       	or	r24, r21
    257a:	8c 93       	st	X, r24
			break;
		}
	}
}
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <GPIO_readNibble>:
/*
 * Description :
 * Read and return the value of the required nibble.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readNibble(uint8 port_num, GPIO_NibbleSignificance nibble_choice ){
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	00 d0       	rcall	.+0      	; 0x2592 <GPIO_readNibble+0x6>
    2592:	00 d0       	rcall	.+0      	; 0x2594 <GPIO_readNibble+0x8>
    2594:	0f 92       	push	r0
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>=NUM_OF_PORTS){
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	84 30       	cpi	r24, 0x04	; 4
    25a2:	08 f0       	brcs	.+2      	; 0x25a6 <GPIO_readNibble+0x1a>
    25a4:	9a c0       	rjmp	.+308    	; 0x26da <GPIO_readNibble+0x14e>
		/* return Logic low if the port number is greater than or equal the maximum allowed number */
	}
	else{
		switch(port_num){
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	3d 83       	std	Y+5, r19	; 0x05
    25ae:	2c 83       	std	Y+4, r18	; 0x04
    25b0:	4c 81       	ldd	r20, Y+4	; 0x04
    25b2:	5d 81       	ldd	r21, Y+5	; 0x05
    25b4:	41 30       	cpi	r20, 0x01	; 1
    25b6:	51 05       	cpc	r21, r1
    25b8:	b1 f1       	breq	.+108    	; 0x2626 <GPIO_readNibble+0x9a>
    25ba:	8c 81       	ldd	r24, Y+4	; 0x04
    25bc:	9d 81       	ldd	r25, Y+5	; 0x05
    25be:	82 30       	cpi	r24, 0x02	; 2
    25c0:	91 05       	cpc	r25, r1
    25c2:	34 f4       	brge	.+12     	; 0x25d0 <GPIO_readNibble+0x44>
    25c4:	2c 81       	ldd	r18, Y+4	; 0x04
    25c6:	3d 81       	ldd	r19, Y+5	; 0x05
    25c8:	21 15       	cp	r18, r1
    25ca:	31 05       	cpc	r19, r1
    25cc:	71 f0       	breq	.+28     	; 0x25ea <GPIO_readNibble+0x5e>
    25ce:	85 c0       	rjmp	.+266    	; 0x26da <GPIO_readNibble+0x14e>
    25d0:	4c 81       	ldd	r20, Y+4	; 0x04
    25d2:	5d 81       	ldd	r21, Y+5	; 0x05
    25d4:	42 30       	cpi	r20, 0x02	; 2
    25d6:	51 05       	cpc	r21, r1
    25d8:	09 f4       	brne	.+2      	; 0x25dc <GPIO_readNibble+0x50>
    25da:	43 c0       	rjmp	.+134    	; 0x2662 <GPIO_readNibble+0xd6>
    25dc:	8c 81       	ldd	r24, Y+4	; 0x04
    25de:	9d 81       	ldd	r25, Y+5	; 0x05
    25e0:	83 30       	cpi	r24, 0x03	; 3
    25e2:	91 05       	cpc	r25, r1
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <GPIO_readNibble+0x5c>
    25e6:	5b c0       	rjmp	.+182    	; 0x269e <GPIO_readNibble+0x112>
    25e8:	78 c0       	rjmp	.+240    	; 0x26da <GPIO_readNibble+0x14e>
		case PORTA_ID:
			return GET_NIBBLE(PORTA,nibble_choice);
    25ea:	eb e3       	ldi	r30, 0x3B	; 59
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	48 2f       	mov	r20, r24
    25f2:	50 e0       	ldi	r21, 0x00	; 0
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	8f e0       	ldi	r24, 0x0F	; 15
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <GPIO_readNibble+0x78>
    2600:	88 0f       	add	r24, r24
    2602:	99 1f       	adc	r25, r25
    2604:	2a 95       	dec	r18
    2606:	e2 f7       	brpl	.-8      	; 0x2600 <GPIO_readNibble+0x74>
    2608:	9a 01       	movw	r18, r20
    260a:	28 23       	and	r18, r24
    260c:	39 23       	and	r19, r25
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	88 2f       	mov	r24, r24
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	a9 01       	movw	r20, r18
    2616:	02 c0       	rjmp	.+4      	; 0x261c <GPIO_readNibble+0x90>
    2618:	56 95       	lsr	r21
    261a:	47 95       	ror	r20
    261c:	8a 95       	dec	r24
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <GPIO_readNibble+0x8c>
    2620:	ca 01       	movw	r24, r20
    2622:	8b 83       	std	Y+3, r24	; 0x03
    2624:	5b c0       	rjmp	.+182    	; 0x26dc <GPIO_readNibble+0x150>
		case PORTB_ID:
			return GET_NIBBLE(PORTB,nibble_choice);
    2626:	e8 e3       	ldi	r30, 0x38	; 56
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	48 2f       	mov	r20, r24
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	8f e0       	ldi	r24, 0x0F	; 15
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <GPIO_readNibble+0xb4>
    263c:	88 0f       	add	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	2a 95       	dec	r18
    2642:	e2 f7       	brpl	.-8      	; 0x263c <GPIO_readNibble+0xb0>
    2644:	9a 01       	movw	r18, r20
    2646:	28 23       	and	r18, r24
    2648:	39 23       	and	r19, r25
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a9 01       	movw	r20, r18
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <GPIO_readNibble+0xcc>
    2654:	56 95       	lsr	r21
    2656:	47 95       	ror	r20
    2658:	8a 95       	dec	r24
    265a:	e2 f7       	brpl	.-8      	; 0x2654 <GPIO_readNibble+0xc8>
    265c:	ca 01       	movw	r24, r20
    265e:	8b 83       	std	Y+3, r24	; 0x03
    2660:	3d c0       	rjmp	.+122    	; 0x26dc <GPIO_readNibble+0x150>
		case PORTC_ID:
			return GET_NIBBLE(PORTC,nibble_choice);
    2662:	e5 e3       	ldi	r30, 0x35	; 53
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	48 2f       	mov	r20, r24
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	28 2f       	mov	r18, r24
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	8f e0       	ldi	r24, 0x0F	; 15
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	02 c0       	rjmp	.+4      	; 0x267c <GPIO_readNibble+0xf0>
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	2a 95       	dec	r18
    267e:	e2 f7       	brpl	.-8      	; 0x2678 <GPIO_readNibble+0xec>
    2680:	9a 01       	movw	r18, r20
    2682:	28 23       	and	r18, r24
    2684:	39 23       	and	r19, r25
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a9 01       	movw	r20, r18
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <GPIO_readNibble+0x108>
    2690:	56 95       	lsr	r21
    2692:	47 95       	ror	r20
    2694:	8a 95       	dec	r24
    2696:	e2 f7       	brpl	.-8      	; 0x2690 <GPIO_readNibble+0x104>
    2698:	ca 01       	movw	r24, r20
    269a:	8b 83       	std	Y+3, r24	; 0x03
    269c:	1f c0       	rjmp	.+62     	; 0x26dc <GPIO_readNibble+0x150>
		case PORTD_ID:
			return GET_NIBBLE(PORTD,nibble_choice);
    269e:	e2 e3       	ldi	r30, 0x32	; 50
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	48 2f       	mov	r20, r24
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	28 2f       	mov	r18, r24
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	8f e0       	ldi	r24, 0x0F	; 15
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <GPIO_readNibble+0x12c>
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	2a 95       	dec	r18
    26ba:	e2 f7       	brpl	.-8      	; 0x26b4 <GPIO_readNibble+0x128>
    26bc:	9a 01       	movw	r18, r20
    26be:	28 23       	and	r18, r24
    26c0:	39 23       	and	r19, r25
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a9 01       	movw	r20, r18
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <GPIO_readNibble+0x144>
    26cc:	56 95       	lsr	r21
    26ce:	47 95       	ror	r20
    26d0:	8a 95       	dec	r24
    26d2:	e2 f7       	brpl	.-8      	; 0x26cc <GPIO_readNibble+0x140>
    26d4:	ca 01       	movw	r24, r20
    26d6:	8b 83       	std	Y+3, r24	; 0x03
    26d8:	01 c0       	rjmp	.+2      	; 0x26dc <GPIO_readNibble+0x150>
		}
	}
	return LOGIC_LOW;
    26da:	1b 82       	std	Y+3, r1	; 0x03
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void){
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	2e 97       	sbiw	r28, 0x0e	; 14
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
	/*Configure RS pin and Enable pin as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2702:	83 e0       	ldi	r24, 0x03	; 3
    2704:	64 e0       	ldi	r22, 0x04	; 4
    2706:	41 e0       	ldi	r20, 0x01	; 1
    2708:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    270c:	83 e0       	ldi	r24, 0x03	; 3
    270e:	65 e0       	ldi	r22, 0x05	; 5
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <GPIO_setupPinDirection>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	a0 ea       	ldi	r26, 0xA0	; 160
    271c:	b1 e4       	ldi	r27, 0x41	; 65
    271e:	8b 87       	std	Y+11, r24	; 0x0b
    2720:	9c 87       	std	Y+12, r25	; 0x0c
    2722:	ad 87       	std	Y+13, r26	; 0x0d
    2724:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2726:	6b 85       	ldd	r22, Y+11	; 0x0b
    2728:	7c 85       	ldd	r23, Y+12	; 0x0c
    272a:	8d 85       	ldd	r24, Y+13	; 0x0d
    272c:	9e 85       	ldd	r25, Y+14	; 0x0e
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a ef       	ldi	r20, 0xFA	; 250
    2734:	54 e4       	ldi	r21, 0x44	; 68
    2736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	8f 83       	std	Y+7, r24	; 0x07
    2740:	98 87       	std	Y+8, r25	; 0x08
    2742:	a9 87       	std	Y+9, r26	; 0x09
    2744:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    275a:	88 23       	and	r24, r24
    275c:	2c f4       	brge	.+10     	; 0x2768 <LCD_init+0x7a>
		__ticks = 1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	3f c0       	rjmp	.+126    	; 0x27e6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2768:	6f 81       	ldd	r22, Y+7	; 0x07
    276a:	78 85       	ldd	r23, Y+8	; 0x08
    276c:	89 85       	ldd	r24, Y+9	; 0x09
    276e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	4f e7       	ldi	r20, 0x7F	; 127
    2776:	57 e4       	ldi	r21, 0x47	; 71
    2778:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    277c:	18 16       	cp	r1, r24
    277e:	4c f5       	brge	.+82     	; 0x27d2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2780:	6b 85       	ldd	r22, Y+11	; 0x0b
    2782:	7c 85       	ldd	r23, Y+12	; 0x0c
    2784:	8d 85       	ldd	r24, Y+13	; 0x0d
    2786:	9e 85       	ldd	r25, Y+14	; 0x0e
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	51 e4       	ldi	r21, 0x41	; 65
    2790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <LCD_init+0xda>
    27aa:	88 ec       	ldi	r24, 0xC8	; 200
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9c 83       	std	Y+4, r25	; 0x04
    27b0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	9c 81       	ldd	r25, Y+4	; 0x04
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <LCD_init+0xc8>
    27ba:	9c 83       	std	Y+4, r25	; 0x04
    27bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	69 f7       	brne	.-38     	; 0x27aa <LCD_init+0xbc>
    27d0:	14 c0       	rjmp	.+40     	; 0x27fa <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d2:	6f 81       	ldd	r22, Y+7	; 0x07
    27d4:	78 85       	ldd	r23, Y+8	; 0x08
    27d6:	89 85       	ldd	r24, Y+9	; 0x09
    27d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	8d 81       	ldd	r24, Y+5	; 0x05
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <LCD_init+0x104>
    27f6:	9a 83       	std	Y+2, r25	; 0x02
    27f8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20); /* LCD Power ON delay > 15ms */

#if (LCD_DATA_BITS_MODE == 8)
	/*configure data/command port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    27fa:	82 e0       	ldi	r24, 0x02	; 2
    27fc:	6f ef       	ldi	r22, 0xFF	; 255
    27fe:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <GPIO_setupPortDirection>

	/*configure LCD to work in 8-bit mode + 5*7 Dots Two Line Display Mode*/
	LCD_sendCommand(LCD_EIGHT_BITS_MODE);
    2802:	88 e3       	ldi	r24, 0x38	; 56
    2804:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>

	/*configure LCD to work in 4-bit mode + 5*7 Dots Two Line Display Mode*/
	LCD_sendCommand(LCD_FOUR_BITS_MODE);
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    2808:	8c e0       	ldi	r24, 0x0C	; 12
    280a:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY); /* clear LCD at the beginning */
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>
}
    2814:	2e 96       	adiw	r28, 0x0e	; 14
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command){
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	e9 97       	sbiw	r28, 0x39	; 57
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    283c:	83 e0       	ldi	r24, 0x03	; 3
    283e:	64 e0       	ldi	r22, 0x04	; 4
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <GPIO_writePin>
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a0 e8       	ldi	r26, 0x80	; 128
    284c:	bf e3       	ldi	r27, 0x3F	; 63
    284e:	8d ab       	std	Y+53, r24	; 0x35
    2850:	9e ab       	std	Y+54, r25	; 0x36
    2852:	af ab       	std	Y+55, r26	; 0x37
    2854:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2856:	6d a9       	ldd	r22, Y+53	; 0x35
    2858:	7e a9       	ldd	r23, Y+54	; 0x36
    285a:	8f a9       	ldd	r24, Y+55	; 0x37
    285c:	98 ad       	ldd	r25, Y+56	; 0x38
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4a ef       	ldi	r20, 0xFA	; 250
    2864:	54 e4       	ldi	r21, 0x44	; 68
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	89 ab       	std	Y+49, r24	; 0x31
    2870:	9a ab       	std	Y+50, r25	; 0x32
    2872:	ab ab       	std	Y+51, r26	; 0x33
    2874:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2876:	69 a9       	ldd	r22, Y+49	; 0x31
    2878:	7a a9       	ldd	r23, Y+50	; 0x32
    287a:	8b a9       	ldd	r24, Y+51	; 0x33
    287c:	9c a9       	ldd	r25, Y+52	; 0x34
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e8       	ldi	r20, 0x80	; 128
    2884:	5f e3       	ldi	r21, 0x3F	; 63
    2886:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    288a:	88 23       	and	r24, r24
    288c:	2c f4       	brge	.+10     	; 0x2898 <LCD_sendCommand+0x72>
		__ticks = 1;
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	98 ab       	std	Y+48, r25	; 0x30
    2894:	8f a7       	std	Y+47, r24	; 0x2f
    2896:	3f c0       	rjmp	.+126    	; 0x2916 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2898:	69 a9       	ldd	r22, Y+49	; 0x31
    289a:	7a a9       	ldd	r23, Y+50	; 0x32
    289c:	8b a9       	ldd	r24, Y+51	; 0x33
    289e:	9c a9       	ldd	r25, Y+52	; 0x34
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	3f ef       	ldi	r19, 0xFF	; 255
    28a4:	4f e7       	ldi	r20, 0x7F	; 127
    28a6:	57 e4       	ldi	r21, 0x47	; 71
    28a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	4c f5       	brge	.+82     	; 0x2902 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b0:	6d a9       	ldd	r22, Y+53	; 0x35
    28b2:	7e a9       	ldd	r23, Y+54	; 0x36
    28b4:	8f a9       	ldd	r24, Y+55	; 0x37
    28b6:	98 ad       	ldd	r25, Y+56	; 0x38
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e2       	ldi	r20, 0x20	; 32
    28be:	51 e4       	ldi	r21, 0x41	; 65
    28c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	98 ab       	std	Y+48, r25	; 0x30
    28d6:	8f a7       	std	Y+47, r24	; 0x2f
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <LCD_sendCommand+0xd2>
    28da:	88 ec       	ldi	r24, 0xC8	; 200
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	9e a7       	std	Y+46, r25	; 0x2e
    28e0:	8d a7       	std	Y+45, r24	; 0x2d
    28e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    28e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <LCD_sendCommand+0xc0>
    28ea:	9e a7       	std	Y+46, r25	; 0x2e
    28ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f0:	98 a9       	ldd	r25, Y+48	; 0x30
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	98 ab       	std	Y+48, r25	; 0x30
    28f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fa:	98 a9       	ldd	r25, Y+48	; 0x30
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	69 f7       	brne	.-38     	; 0x28da <LCD_sendCommand+0xb4>
    2900:	14 c0       	rjmp	.+40     	; 0x292a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2902:	69 a9       	ldd	r22, Y+49	; 0x31
    2904:	7a a9       	ldd	r23, Y+50	; 0x32
    2906:	8b a9       	ldd	r24, Y+51	; 0x33
    2908:	9c a9       	ldd	r25, Y+52	; 0x34
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	98 ab       	std	Y+48, r25	; 0x30
    2914:	8f a7       	std	Y+47, r24	; 0x2f
    2916:	8f a5       	ldd	r24, Y+47	; 0x2f
    2918:	98 a9       	ldd	r25, Y+48	; 0x30
    291a:	9c a7       	std	Y+44, r25	; 0x2c
    291c:	8b a7       	std	Y+43, r24	; 0x2b
    291e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2920:	9c a5       	ldd	r25, Y+44	; 0x2c
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <LCD_sendCommand+0xfc>
    2926:	9c a7       	std	Y+44, r25	; 0x2c
    2928:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	65 e0       	ldi	r22, 0x05	; 5
    292e:	41 e0       	ldi	r20, 0x01	; 1
    2930:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <GPIO_writePin>
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	a0 e8       	ldi	r26, 0x80	; 128
    293a:	bf e3       	ldi	r27, 0x3F	; 63
    293c:	8f a3       	std	Y+39, r24	; 0x27
    293e:	98 a7       	std	Y+40, r25	; 0x28
    2940:	a9 a7       	std	Y+41, r26	; 0x29
    2942:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2944:	6f a1       	ldd	r22, Y+39	; 0x27
    2946:	78 a5       	ldd	r23, Y+40	; 0x28
    2948:	89 a5       	ldd	r24, Y+41	; 0x29
    294a:	9a a5       	ldd	r25, Y+42	; 0x2a
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	4a ef       	ldi	r20, 0xFA	; 250
    2952:	54 e4       	ldi	r21, 0x44	; 68
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	8b a3       	std	Y+35, r24	; 0x23
    295e:	9c a3       	std	Y+36, r25	; 0x24
    2960:	ad a3       	std	Y+37, r26	; 0x25
    2962:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2964:	6b a1       	ldd	r22, Y+35	; 0x23
    2966:	7c a1       	ldd	r23, Y+36	; 0x24
    2968:	8d a1       	ldd	r24, Y+37	; 0x25
    296a:	9e a1       	ldd	r25, Y+38	; 0x26
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e8       	ldi	r20, 0x80	; 128
    2972:	5f e3       	ldi	r21, 0x3F	; 63
    2974:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2978:	88 23       	and	r24, r24
    297a:	2c f4       	brge	.+10     	; 0x2986 <LCD_sendCommand+0x160>
		__ticks = 1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9a a3       	std	Y+34, r25	; 0x22
    2982:	89 a3       	std	Y+33, r24	; 0x21
    2984:	3f c0       	rjmp	.+126    	; 0x2a04 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2986:	6b a1       	ldd	r22, Y+35	; 0x23
    2988:	7c a1       	ldd	r23, Y+36	; 0x24
    298a:	8d a1       	ldd	r24, Y+37	; 0x25
    298c:	9e a1       	ldd	r25, Y+38	; 0x26
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	3f ef       	ldi	r19, 0xFF	; 255
    2992:	4f e7       	ldi	r20, 0x7F	; 127
    2994:	57 e4       	ldi	r21, 0x47	; 71
    2996:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299a:	18 16       	cp	r1, r24
    299c:	4c f5       	brge	.+82     	; 0x29f0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299e:	6f a1       	ldd	r22, Y+39	; 0x27
    29a0:	78 a5       	ldd	r23, Y+40	; 0x28
    29a2:	89 a5       	ldd	r24, Y+41	; 0x29
    29a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e2       	ldi	r20, 0x20	; 32
    29ac:	51 e4       	ldi	r21, 0x41	; 65
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9a a3       	std	Y+34, r25	; 0x22
    29c4:	89 a3       	std	Y+33, r24	; 0x21
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <LCD_sendCommand+0x1c0>
    29c8:	88 ec       	ldi	r24, 0xC8	; 200
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	98 a3       	std	Y+32, r25	; 0x20
    29ce:	8f 8f       	std	Y+31, r24	; 0x1f
    29d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29d2:	98 a1       	ldd	r25, Y+32	; 0x20
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_sendCommand+0x1ae>
    29d8:	98 a3       	std	Y+32, r25	; 0x20
    29da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29dc:	89 a1       	ldd	r24, Y+33	; 0x21
    29de:	9a a1       	ldd	r25, Y+34	; 0x22
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	9a a3       	std	Y+34, r25	; 0x22
    29e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e6:	89 a1       	ldd	r24, Y+33	; 0x21
    29e8:	9a a1       	ldd	r25, Y+34	; 0x22
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	69 f7       	brne	.-38     	; 0x29c8 <LCD_sendCommand+0x1a2>
    29ee:	14 c0       	rjmp	.+40     	; 0x2a18 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	6b a1       	ldd	r22, Y+35	; 0x23
    29f2:	7c a1       	ldd	r23, Y+36	; 0x24
    29f4:	8d a1       	ldd	r24, Y+37	; 0x25
    29f6:	9e a1       	ldd	r25, Y+38	; 0x26
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9a a3       	std	Y+34, r25	; 0x22
    2a02:	89 a3       	std	Y+33, r24	; 0x21
    2a04:	89 a1       	ldd	r24, Y+33	; 0x21
    2a06:	9a a1       	ldd	r25, Y+34	; 0x22
    2a08:	9e 8f       	std	Y+30, r25	; 0x1e
    2a0a:	8d 8f       	std	Y+29, r24	; 0x1d
    2a0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_sendCommand+0x1ea>
    2a14:	9e 8f       	std	Y+30, r25	; 0x1e
    2a16:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if (LCD_DATA_BITS_MODE ==8)
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    2a18:	82 e0       	ldi	r24, 0x02	; 2
    2a1a:	69 ad       	ldd	r22, Y+57	; 0x39
    2a1c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <GPIO_writePort>
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	a0 e8       	ldi	r26, 0x80	; 128
    2a26:	bf e3       	ldi	r27, 0x3F	; 63
    2a28:	89 8f       	std	Y+25, r24	; 0x19
    2a2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a30:	69 8d       	ldd	r22, Y+25	; 0x19
    2a32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	4a ef       	ldi	r20, 0xFA	; 250
    2a3e:	54 e4       	ldi	r21, 0x44	; 68
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8d 8b       	std	Y+21, r24	; 0x15
    2a4a:	9e 8b       	std	Y+22, r25	; 0x16
    2a4c:	af 8b       	std	Y+23, r26	; 0x17
    2a4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a50:	6d 89       	ldd	r22, Y+21	; 0x15
    2a52:	7e 89       	ldd	r23, Y+22	; 0x16
    2a54:	8f 89       	ldd	r24, Y+23	; 0x17
    2a56:	98 8d       	ldd	r25, Y+24	; 0x18
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	5f e3       	ldi	r21, 0x3F	; 63
    2a60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a64:	88 23       	and	r24, r24
    2a66:	2c f4       	brge	.+10     	; 0x2a72 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9c 8b       	std	Y+20, r25	; 0x14
    2a6e:	8b 8b       	std	Y+19, r24	; 0x13
    2a70:	3f c0       	rjmp	.+126    	; 0x2af0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2a72:	6d 89       	ldd	r22, Y+21	; 0x15
    2a74:	7e 89       	ldd	r23, Y+22	; 0x16
    2a76:	8f 89       	ldd	r24, Y+23	; 0x17
    2a78:	98 8d       	ldd	r25, Y+24	; 0x18
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	3f ef       	ldi	r19, 0xFF	; 255
    2a7e:	4f e7       	ldi	r20, 0x7F	; 127
    2a80:	57 e4       	ldi	r21, 0x47	; 71
    2a82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a86:	18 16       	cp	r1, r24
    2a88:	4c f5       	brge	.+82     	; 0x2adc <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e2       	ldi	r20, 0x20	; 32
    2a98:	51 e4       	ldi	r21, 0x41	; 65
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	bc 01       	movw	r22, r24
    2aa4:	cd 01       	movw	r24, r26
    2aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	9c 8b       	std	Y+20, r25	; 0x14
    2ab0:	8b 8b       	std	Y+19, r24	; 0x13
    2ab2:	0f c0       	rjmp	.+30     	; 0x2ad2 <LCD_sendCommand+0x2ac>
    2ab4:	88 ec       	ldi	r24, 0xC8	; 200
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9a 8b       	std	Y+18, r25	; 0x12
    2aba:	89 8b       	std	Y+17, r24	; 0x11
    2abc:	89 89       	ldd	r24, Y+17	; 0x11
    2abe:	9a 89       	ldd	r25, Y+18	; 0x12
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <LCD_sendCommand+0x29a>
    2ac4:	9a 8b       	std	Y+18, r25	; 0x12
    2ac6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aca:	9c 89       	ldd	r25, Y+20	; 0x14
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	9c 8b       	std	Y+20, r25	; 0x14
    2ad0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	69 f7       	brne	.-38     	; 0x2ab4 <LCD_sendCommand+0x28e>
    2ada:	14 c0       	rjmp	.+40     	; 0x2b04 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2adc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ade:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9c 8b       	std	Y+20, r25	; 0x14
    2aee:	8b 8b       	std	Y+19, r24	; 0x13
    2af0:	8b 89       	ldd	r24, Y+19	; 0x13
    2af2:	9c 89       	ldd	r25, Y+20	; 0x14
    2af4:	98 8b       	std	Y+16, r25	; 0x10
    2af6:	8f 87       	std	Y+15, r24	; 0x0f
    2af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2afa:	98 89       	ldd	r25, Y+16	; 0x10
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <LCD_sendCommand+0x2d6>
    2b00:	98 8b       	std	Y+16, r25	; 0x10
    2b02:	8f 87       	std	Y+15, r24	; 0x0f

	GPIO_writeNibble(LCD_DATA_PORT_ID, GET_NIBBLE(command,LSN), LCD_DATA_PIN_1_ID);

#endif
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2b04:	83 e0       	ldi	r24, 0x03	; 3
    2b06:	65 e0       	ldi	r22, 0x05	; 5
    2b08:	40 e0       	ldi	r20, 0x00	; 0
    2b0a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <GPIO_writePin>
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	a0 e8       	ldi	r26, 0x80	; 128
    2b14:	bf e3       	ldi	r27, 0x3F	; 63
    2b16:	8b 87       	std	Y+11, r24	; 0x0b
    2b18:	9c 87       	std	Y+12, r25	; 0x0c
    2b1a:	ad 87       	std	Y+13, r26	; 0x0d
    2b1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	4a ef       	ldi	r20, 0xFA	; 250
    2b2c:	54 e4       	ldi	r21, 0x44	; 68
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	8f 83       	std	Y+7, r24	; 0x07
    2b38:	98 87       	std	Y+8, r25	; 0x08
    2b3a:	a9 87       	std	Y+9, r26	; 0x09
    2b3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b40:	78 85       	ldd	r23, Y+8	; 0x08
    2b42:	89 85       	ldd	r24, Y+9	; 0x09
    2b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e8       	ldi	r20, 0x80	; 128
    2b4c:	5f e3       	ldi	r21, 0x3F	; 63
    2b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b52:	88 23       	and	r24, r24
    2b54:	2c f4       	brge	.+10     	; 0x2b60 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	9e 83       	std	Y+6, r25	; 0x06
    2b5c:	8d 83       	std	Y+5, r24	; 0x05
    2b5e:	3f c0       	rjmp	.+126    	; 0x2bde <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2b60:	6f 81       	ldd	r22, Y+7	; 0x07
    2b62:	78 85       	ldd	r23, Y+8	; 0x08
    2b64:	89 85       	ldd	r24, Y+9	; 0x09
    2b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	3f ef       	ldi	r19, 0xFF	; 255
    2b6c:	4f e7       	ldi	r20, 0x7F	; 127
    2b6e:	57 e4       	ldi	r21, 0x47	; 71
    2b70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b74:	18 16       	cp	r1, r24
    2b76:	4c f5       	brge	.+82     	; 0x2bca <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e2       	ldi	r20, 0x20	; 32
    2b86:	51 e4       	ldi	r21, 0x41	; 65
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	bc 01       	movw	r22, r24
    2b92:	cd 01       	movw	r24, r26
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
    2ba0:	0f c0       	rjmp	.+30     	; 0x2bc0 <LCD_sendCommand+0x39a>
    2ba2:	88 ec       	ldi	r24, 0xC8	; 200
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	9c 83       	std	Y+4, r25	; 0x04
    2ba8:	8b 83       	std	Y+3, r24	; 0x03
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	9c 81       	ldd	r25, Y+4	; 0x04
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <LCD_sendCommand+0x388>
    2bb2:	9c 83       	std	Y+4, r25	; 0x04
    2bb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	69 f7       	brne	.-38     	; 0x2ba2 <LCD_sendCommand+0x37c>
    2bc8:	14 c0       	rjmp	.+40     	; 0x2bf2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bca:	6f 81       	ldd	r22, Y+7	; 0x07
    2bcc:	78 85       	ldd	r23, Y+8	; 0x08
    2bce:	89 85       	ldd	r24, Y+9	; 0x09
    2bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	9e 83       	std	Y+6, r25	; 0x06
    2bdc:	8d 83       	std	Y+5, r24	; 0x05
    2bde:	8d 81       	ldd	r24, Y+5	; 0x05
    2be0:	9e 81       	ldd	r25, Y+6	; 0x06
    2be2:	9a 83       	std	Y+2, r25	; 0x02
    2be4:	89 83       	std	Y+1, r24	; 0x01
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <LCD_sendCommand+0x3c4>
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2bf2:	e9 96       	adiw	r28, 0x39	; 57
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data){
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	e9 97       	sbiw	r28, 0x39	; 57
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2c1a:	83 e0       	ldi	r24, 0x03	; 3
    2c1c:	64 e0       	ldi	r22, 0x04	; 4
    2c1e:	41 e0       	ldi	r20, 0x01	; 1
    2c20:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <GPIO_writePin>
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	a0 e8       	ldi	r26, 0x80	; 128
    2c2a:	bf e3       	ldi	r27, 0x3F	; 63
    2c2c:	8d ab       	std	Y+53, r24	; 0x35
    2c2e:	9e ab       	std	Y+54, r25	; 0x36
    2c30:	af ab       	std	Y+55, r26	; 0x37
    2c32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c34:	6d a9       	ldd	r22, Y+53	; 0x35
    2c36:	7e a9       	ldd	r23, Y+54	; 0x36
    2c38:	8f a9       	ldd	r24, Y+55	; 0x37
    2c3a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	4a ef       	ldi	r20, 0xFA	; 250
    2c42:	54 e4       	ldi	r21, 0x44	; 68
    2c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	89 ab       	std	Y+49, r24	; 0x31
    2c4e:	9a ab       	std	Y+50, r25	; 0x32
    2c50:	ab ab       	std	Y+51, r26	; 0x33
    2c52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c54:	69 a9       	ldd	r22, Y+49	; 0x31
    2c56:	7a a9       	ldd	r23, Y+50	; 0x32
    2c58:	8b a9       	ldd	r24, Y+51	; 0x33
    2c5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5f e3       	ldi	r21, 0x3F	; 63
    2c64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c68:	88 23       	and	r24, r24
    2c6a:	2c f4       	brge	.+10     	; 0x2c76 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	98 ab       	std	Y+48, r25	; 0x30
    2c72:	8f a7       	std	Y+47, r24	; 0x2f
    2c74:	3f c0       	rjmp	.+126    	; 0x2cf4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2c76:	69 a9       	ldd	r22, Y+49	; 0x31
    2c78:	7a a9       	ldd	r23, Y+50	; 0x32
    2c7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	3f ef       	ldi	r19, 0xFF	; 255
    2c82:	4f e7       	ldi	r20, 0x7F	; 127
    2c84:	57 e4       	ldi	r21, 0x47	; 71
    2c86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8a:	18 16       	cp	r1, r24
    2c8c:	4c f5       	brge	.+82     	; 0x2ce0 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c90:	7e a9       	ldd	r23, Y+54	; 0x36
    2c92:	8f a9       	ldd	r24, Y+55	; 0x37
    2c94:	98 ad       	ldd	r25, Y+56	; 0x38
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e2       	ldi	r20, 0x20	; 32
    2c9c:	51 e4       	ldi	r21, 0x41	; 65
    2c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	98 ab       	std	Y+48, r25	; 0x30
    2cb4:	8f a7       	std	Y+47, r24	; 0x2f
    2cb6:	0f c0       	rjmp	.+30     	; 0x2cd6 <LCD_displayCharacter+0xd2>
    2cb8:	88 ec       	ldi	r24, 0xC8	; 200
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	9e a7       	std	Y+46, r25	; 0x2e
    2cbe:	8d a7       	std	Y+45, r24	; 0x2d
    2cc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <LCD_displayCharacter+0xc0>
    2cc8:	9e a7       	std	Y+46, r25	; 0x2e
    2cca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ccc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cce:	98 a9       	ldd	r25, Y+48	; 0x30
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	98 ab       	std	Y+48, r25	; 0x30
    2cd4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	69 f7       	brne	.-38     	; 0x2cb8 <LCD_displayCharacter+0xb4>
    2cde:	14 c0       	rjmp	.+40     	; 0x2d08 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ce2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ce4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ce6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	98 ab       	std	Y+48, r25	; 0x30
    2cf2:	8f a7       	std	Y+47, r24	; 0x2f
    2cf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cf8:	9c a7       	std	Y+44, r25	; 0x2c
    2cfa:	8b a7       	std	Y+43, r24	; 0x2b
    2cfc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cfe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <LCD_displayCharacter+0xfc>
    2d04:	9c a7       	std	Y+44, r25	; 0x2c
    2d06:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2d08:	83 e0       	ldi	r24, 0x03	; 3
    2d0a:	65 e0       	ldi	r22, 0x05	; 5
    2d0c:	41 e0       	ldi	r20, 0x01	; 1
    2d0e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <GPIO_writePin>
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	a0 e8       	ldi	r26, 0x80	; 128
    2d18:	bf e3       	ldi	r27, 0x3F	; 63
    2d1a:	8f a3       	std	Y+39, r24	; 0x27
    2d1c:	98 a7       	std	Y+40, r25	; 0x28
    2d1e:	a9 a7       	std	Y+41, r26	; 0x29
    2d20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d22:	6f a1       	ldd	r22, Y+39	; 0x27
    2d24:	78 a5       	ldd	r23, Y+40	; 0x28
    2d26:	89 a5       	ldd	r24, Y+41	; 0x29
    2d28:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	4a ef       	ldi	r20, 0xFA	; 250
    2d30:	54 e4       	ldi	r21, 0x44	; 68
    2d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	8b a3       	std	Y+35, r24	; 0x23
    2d3c:	9c a3       	std	Y+36, r25	; 0x24
    2d3e:	ad a3       	std	Y+37, r26	; 0x25
    2d40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d42:	6b a1       	ldd	r22, Y+35	; 0x23
    2d44:	7c a1       	ldd	r23, Y+36	; 0x24
    2d46:	8d a1       	ldd	r24, Y+37	; 0x25
    2d48:	9e a1       	ldd	r25, Y+38	; 0x26
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	40 e8       	ldi	r20, 0x80	; 128
    2d50:	5f e3       	ldi	r21, 0x3F	; 63
    2d52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d56:	88 23       	and	r24, r24
    2d58:	2c f4       	brge	.+10     	; 0x2d64 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	9a a3       	std	Y+34, r25	; 0x22
    2d60:	89 a3       	std	Y+33, r24	; 0x21
    2d62:	3f c0       	rjmp	.+126    	; 0x2de2 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2d64:	6b a1       	ldd	r22, Y+35	; 0x23
    2d66:	7c a1       	ldd	r23, Y+36	; 0x24
    2d68:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	3f ef       	ldi	r19, 0xFF	; 255
    2d70:	4f e7       	ldi	r20, 0x7F	; 127
    2d72:	57 e4       	ldi	r21, 0x47	; 71
    2d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d78:	18 16       	cp	r1, r24
    2d7a:	4c f5       	brge	.+82     	; 0x2dce <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d80:	89 a5       	ldd	r24, Y+41	; 0x29
    2d82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	40 e2       	ldi	r20, 0x20	; 32
    2d8a:	51 e4       	ldi	r21, 0x41	; 65
    2d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	bc 01       	movw	r22, r24
    2d96:	cd 01       	movw	r24, r26
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9a a3       	std	Y+34, r25	; 0x22
    2da2:	89 a3       	std	Y+33, r24	; 0x21
    2da4:	0f c0       	rjmp	.+30     	; 0x2dc4 <LCD_displayCharacter+0x1c0>
    2da6:	88 ec       	ldi	r24, 0xC8	; 200
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	98 a3       	std	Y+32, r25	; 0x20
    2dac:	8f 8f       	std	Y+31, r24	; 0x1f
    2dae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2db0:	98 a1       	ldd	r25, Y+32	; 0x20
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <LCD_displayCharacter+0x1ae>
    2db6:	98 a3       	std	Y+32, r25	; 0x20
    2db8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dba:	89 a1       	ldd	r24, Y+33	; 0x21
    2dbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	9a a3       	std	Y+34, r25	; 0x22
    2dc2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	69 f7       	brne	.-38     	; 0x2da6 <LCD_displayCharacter+0x1a2>
    2dcc:	14 c0       	rjmp	.+40     	; 0x2df6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dce:	6b a1       	ldd	r22, Y+35	; 0x23
    2dd0:	7c a1       	ldd	r23, Y+36	; 0x24
    2dd2:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd4:	9e a1       	ldd	r25, Y+38	; 0x26
    2dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	9a a3       	std	Y+34, r25	; 0x22
    2de0:	89 a3       	std	Y+33, r24	; 0x21
    2de2:	89 a1       	ldd	r24, Y+33	; 0x21
    2de4:	9a a1       	ldd	r25, Y+34	; 0x22
    2de6:	9e 8f       	std	Y+30, r25	; 0x1e
    2de8:	8d 8f       	std	Y+29, r24	; 0x1d
    2dea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <LCD_displayCharacter+0x1ea>
    2df2:	9e 8f       	std	Y+30, r25	; 0x1e
    2df4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, data);
    2df6:	82 e0       	ldi	r24, 0x02	; 2
    2df8:	69 ad       	ldd	r22, Y+57	; 0x39
    2dfa:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <GPIO_writePort>
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	a0 e8       	ldi	r26, 0x80	; 128
    2e04:	bf e3       	ldi	r27, 0x3F	; 63
    2e06:	89 8f       	std	Y+25, r24	; 0x19
    2e08:	9a 8f       	std	Y+26, r25	; 0x1a
    2e0a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	4a ef       	ldi	r20, 0xFA	; 250
    2e1c:	54 e4       	ldi	r21, 0x44	; 68
    2e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	8d 8b       	std	Y+21, r24	; 0x15
    2e28:	9e 8b       	std	Y+22, r25	; 0x16
    2e2a:	af 8b       	std	Y+23, r26	; 0x17
    2e2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e30:	7e 89       	ldd	r23, Y+22	; 0x16
    2e32:	8f 89       	ldd	r24, Y+23	; 0x17
    2e34:	98 8d       	ldd	r25, Y+24	; 0x18
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e8       	ldi	r20, 0x80	; 128
    2e3c:	5f e3       	ldi	r21, 0x3F	; 63
    2e3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e42:	88 23       	and	r24, r24
    2e44:	2c f4       	brge	.+10     	; 0x2e50 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	9c 8b       	std	Y+20, r25	; 0x14
    2e4c:	8b 8b       	std	Y+19, r24	; 0x13
    2e4e:	3f c0       	rjmp	.+126    	; 0x2ece <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2e50:	6d 89       	ldd	r22, Y+21	; 0x15
    2e52:	7e 89       	ldd	r23, Y+22	; 0x16
    2e54:	8f 89       	ldd	r24, Y+23	; 0x17
    2e56:	98 8d       	ldd	r25, Y+24	; 0x18
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	3f ef       	ldi	r19, 0xFF	; 255
    2e5c:	4f e7       	ldi	r20, 0x7F	; 127
    2e5e:	57 e4       	ldi	r21, 0x47	; 71
    2e60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e64:	18 16       	cp	r1, r24
    2e66:	4c f5       	brge	.+82     	; 0x2eba <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e68:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e2       	ldi	r20, 0x20	; 32
    2e76:	51 e4       	ldi	r21, 0x41	; 65
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	bc 01       	movw	r22, r24
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	9c 8b       	std	Y+20, r25	; 0x14
    2e8e:	8b 8b       	std	Y+19, r24	; 0x13
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <LCD_displayCharacter+0x2ac>
    2e92:	88 ec       	ldi	r24, 0xC8	; 200
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9a 8b       	std	Y+18, r25	; 0x12
    2e98:	89 8b       	std	Y+17, r24	; 0x11
    2e9a:	89 89       	ldd	r24, Y+17	; 0x11
    2e9c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <LCD_displayCharacter+0x29a>
    2ea2:	9a 8b       	std	Y+18, r25	; 0x12
    2ea4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	9c 8b       	std	Y+20, r25	; 0x14
    2eae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	69 f7       	brne	.-38     	; 0x2e92 <LCD_displayCharacter+0x28e>
    2eb8:	14 c0       	rjmp	.+40     	; 0x2ee2 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eba:	6d 89       	ldd	r22, Y+21	; 0x15
    2ebc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ebe:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9c 8b       	std	Y+20, r25	; 0x14
    2ecc:	8b 8b       	std	Y+19, r24	; 0x13
    2ece:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed2:	98 8b       	std	Y+16, r25	; 0x10
    2ed4:	8f 87       	std	Y+15, r24	; 0x0f
    2ed6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed8:	98 89       	ldd	r25, Y+16	; 0x10
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <LCD_displayCharacter+0x2d6>
    2ede:	98 8b       	std	Y+16, r25	; 0x10
    2ee0:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writeNibble(LCD_DATA_PORT_ID,  GET_NIBBLE(data,LSN), LCD_DATA_PIN_1_ID);

#endif

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2ee2:	83 e0       	ldi	r24, 0x03	; 3
    2ee4:	65 e0       	ldi	r22, 0x05	; 5
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <GPIO_writePin>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	a0 e8       	ldi	r26, 0x80	; 128
    2ef2:	bf e3       	ldi	r27, 0x3F	; 63
    2ef4:	8b 87       	std	Y+11, r24	; 0x0b
    2ef6:	9c 87       	std	Y+12, r25	; 0x0c
    2ef8:	ad 87       	std	Y+13, r26	; 0x0d
    2efa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	4a ef       	ldi	r20, 0xFA	; 250
    2f0a:	54 e4       	ldi	r21, 0x44	; 68
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	8f 83       	std	Y+7, r24	; 0x07
    2f16:	98 87       	std	Y+8, r25	; 0x08
    2f18:	a9 87       	std	Y+9, r26	; 0x09
    2f1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1e:	78 85       	ldd	r23, Y+8	; 0x08
    2f20:	89 85       	ldd	r24, Y+9	; 0x09
    2f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e8       	ldi	r20, 0x80	; 128
    2f2a:	5f e3       	ldi	r21, 0x3F	; 63
    2f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f30:	88 23       	and	r24, r24
    2f32:	2c f4       	brge	.+10     	; 0x2f3e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	9e 83       	std	Y+6, r25	; 0x06
    2f3a:	8d 83       	std	Y+5, r24	; 0x05
    2f3c:	3f c0       	rjmp	.+126    	; 0x2fbc <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f40:	78 85       	ldd	r23, Y+8	; 0x08
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	3f ef       	ldi	r19, 0xFF	; 255
    2f4a:	4f e7       	ldi	r20, 0x7F	; 127
    2f4c:	57 e4       	ldi	r21, 0x47	; 71
    2f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f52:	18 16       	cp	r1, r24
    2f54:	4c f5       	brge	.+82     	; 0x2fa8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e2       	ldi	r20, 0x20	; 32
    2f64:	51 e4       	ldi	r21, 0x41	; 65
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	9e 83       	std	Y+6, r25	; 0x06
    2f7c:	8d 83       	std	Y+5, r24	; 0x05
    2f7e:	0f c0       	rjmp	.+30     	; 0x2f9e <LCD_displayCharacter+0x39a>
    2f80:	88 ec       	ldi	r24, 0xC8	; 200
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9c 83       	std	Y+4, r25	; 0x04
    2f86:	8b 83       	std	Y+3, r24	; 0x03
    2f88:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <LCD_displayCharacter+0x388>
    2f90:	9c 83       	std	Y+4, r25	; 0x04
    2f92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	9e 81       	ldd	r25, Y+6	; 0x06
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	9e 83       	std	Y+6, r25	; 0x06
    2f9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	69 f7       	brne	.-38     	; 0x2f80 <LCD_displayCharacter+0x37c>
    2fa6:	14 c0       	rjmp	.+40     	; 0x2fd0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2faa:	78 85       	ldd	r23, Y+8	; 0x08
    2fac:	89 85       	ldd	r24, Y+9	; 0x09
    2fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	8d 83       	std	Y+5, r24	; 0x05
    2fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc0:	9a 83       	std	Y+2, r25	; 0x02
    2fc2:	89 83       	std	Y+1, r24	; 0x01
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <LCD_displayCharacter+0x3c4>
    2fcc:	9a 83       	std	Y+2, r25	; 0x02
    2fce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	/*increment cursor position*/
	g_colNum++;
    2fd0:	80 91 e7 02 	lds	r24, 0x02E7
    2fd4:	8f 5f       	subi	r24, 0xFF	; 255
    2fd6:	80 93 e7 02 	sts	0x02E7, r24
}
    2fda:	e9 96       	adiw	r28, 0x39	; 57
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const uint8 * strConst){
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <LCD_displayString+0x6>
    2ff2:	0f 92       	push	r0
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	9b 83       	std	Y+3, r25	; 0x03
    2ffa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2ffc:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;strConst[i] != '\0';i++){
    2ffe:	19 82       	std	Y+1, r1	; 0x01
    3000:	0e c0       	rjmp	.+28     	; 0x301e <LCD_displayString+0x32>
		LCD_displayCharacter(strConst[i]);
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	8a 81       	ldd	r24, Y+2	; 0x02
    300a:	9b 81       	ldd	r25, Y+3	; 0x03
    300c:	fc 01       	movw	r30, r24
    300e:	e2 0f       	add	r30, r18
    3010:	f3 1f       	adc	r31, r19
    3012:	80 81       	ld	r24, Z
    3014:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayCharacter>
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const uint8 * strConst){
	uint8 i=0;
	for(i=0;strConst[i] != '\0';i++){
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	8f 5f       	subi	r24, 0xFF	; 255
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	28 2f       	mov	r18, r24
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	9b 81       	ldd	r25, Y+3	; 0x03
    3028:	fc 01       	movw	r30, r24
    302a:	e2 0f       	add	r30, r18
    302c:	f3 1f       	adc	r31, r19
    302e:	80 81       	ld	r24, Z
    3030:	88 23       	and	r24, r24
    3032:	39 f7       	brne	.-50     	; 0x3002 <LCD_displayString+0x16>
		LCD_displayCharacter(strConst[i]);
	}
}
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <LCD_characterFade>:

/*
 * Description :
 * display a given data briefly, then replace it with a given symbol
 */
void LCD_characterFade(uint8 a_data, uint8 a_symbol){
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	60 97       	sbiw	r28, 0x10	; 16
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	8f 87       	std	Y+15, r24	; 0x0f
    3056:	68 8b       	std	Y+16, r22	; 0x10
	LCD_displayCharacter(a_data);
    3058:	8f 85       	ldd	r24, Y+15	; 0x0f
    305a:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayCharacter>
	g_colNum--;
    305e:	80 91 e7 02 	lds	r24, 0x02E7
    3062:	81 50       	subi	r24, 0x01	; 1
    3064:	80 93 e7 02 	sts	0x02E7, r24
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	af ea       	ldi	r26, 0xAF	; 175
    306e:	b3 e4       	ldi	r27, 0x43	; 67
    3070:	8b 87       	std	Y+11, r24	; 0x0b
    3072:	9c 87       	std	Y+12, r25	; 0x0c
    3074:	ad 87       	std	Y+13, r26	; 0x0d
    3076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3078:	6b 85       	ldd	r22, Y+11	; 0x0b
    307a:	7c 85       	ldd	r23, Y+12	; 0x0c
    307c:	8d 85       	ldd	r24, Y+13	; 0x0d
    307e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	4a ef       	ldi	r20, 0xFA	; 250
    3086:	54 e4       	ldi	r21, 0x44	; 68
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	8f 83       	std	Y+7, r24	; 0x07
    3092:	98 87       	std	Y+8, r25	; 0x08
    3094:	a9 87       	std	Y+9, r26	; 0x09
    3096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3098:	6f 81       	ldd	r22, Y+7	; 0x07
    309a:	78 85       	ldd	r23, Y+8	; 0x08
    309c:	89 85       	ldd	r24, Y+9	; 0x09
    309e:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e8       	ldi	r20, 0x80	; 128
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ac:	88 23       	and	r24, r24
    30ae:	2c f4       	brge	.+10     	; 0x30ba <LCD_characterFade+0x7a>
		__ticks = 1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	3f c0       	rjmp	.+126    	; 0x3138 <LCD_characterFade+0xf8>
	else if (__tmp > 65535)
    30ba:	6f 81       	ldd	r22, Y+7	; 0x07
    30bc:	78 85       	ldd	r23, Y+8	; 0x08
    30be:	89 85       	ldd	r24, Y+9	; 0x09
    30c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	3f ef       	ldi	r19, 0xFF	; 255
    30c6:	4f e7       	ldi	r20, 0x7F	; 127
    30c8:	57 e4       	ldi	r21, 0x47	; 71
    30ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ce:	18 16       	cp	r1, r24
    30d0:	4c f5       	brge	.+82     	; 0x3124 <LCD_characterFade+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e2       	ldi	r20, 0x20	; 32
    30e0:	51 e4       	ldi	r21, 0x41	; 65
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	9e 83       	std	Y+6, r25	; 0x06
    30f8:	8d 83       	std	Y+5, r24	; 0x05
    30fa:	0f c0       	rjmp	.+30     	; 0x311a <LCD_characterFade+0xda>
    30fc:	88 ec       	ldi	r24, 0xC8	; 200
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	9c 83       	std	Y+4, r25	; 0x04
    3102:	8b 83       	std	Y+3, r24	; 0x03
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	9c 81       	ldd	r25, Y+4	; 0x04
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <LCD_characterFade+0xc8>
    310c:	9c 83       	std	Y+4, r25	; 0x04
    310e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3110:	8d 81       	ldd	r24, Y+5	; 0x05
    3112:	9e 81       	ldd	r25, Y+6	; 0x06
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	9e 83       	std	Y+6, r25	; 0x06
    3118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311a:	8d 81       	ldd	r24, Y+5	; 0x05
    311c:	9e 81       	ldd	r25, Y+6	; 0x06
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	69 f7       	brne	.-38     	; 0x30fc <LCD_characterFade+0xbc>
    3122:	14 c0       	rjmp	.+40     	; 0x314c <LCD_characterFade+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3124:	6f 81       	ldd	r22, Y+7	; 0x07
    3126:	78 85       	ldd	r23, Y+8	; 0x08
    3128:	89 85       	ldd	r24, Y+9	; 0x09
    312a:	9a 85       	ldd	r25, Y+10	; 0x0a
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	9e 83       	std	Y+6, r25	; 0x06
    3136:	8d 83       	std	Y+5, r24	; 0x05
    3138:	8d 81       	ldd	r24, Y+5	; 0x05
    313a:	9e 81       	ldd	r25, Y+6	; 0x06
    313c:	9a 83       	std	Y+2, r25	; 0x02
    313e:	89 83       	std	Y+1, r24	; 0x01
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	9a 81       	ldd	r25, Y+2	; 0x02
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <LCD_characterFade+0x104>
    3148:	9a 83       	std	Y+2, r25	; 0x02
    314a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(CHARACTER_FADE_DELAY);
	LCD_moveCursor(g_rowNum, g_colNum);
    314c:	80 91 e6 02 	lds	r24, 0x02E6
    3150:	90 91 e7 02 	lds	r25, 0x02E7
    3154:	69 2f       	mov	r22, r25
    3156:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_moveCursor>
	LCD_displayCharacter(a_symbol);
    315a:	88 89       	ldd	r24, Y+16	; 0x10
    315c:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayCharacter>
}
    3160:	60 96       	adiw	r28, 0x10	; 16
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	cf 91       	pop	r28
    316e:	df 91       	pop	r29
    3170:	08 95       	ret

00003172 <LCD_writeString>:
/*
 * Description :
 * write the required string on the screen with delay effect
 */
void LCD_writeString(const uint8 * strConst, const uint16 a_writeDelay_ms){
    3172:	df 93       	push	r29
    3174:	cf 93       	push	r28
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	63 97       	sbiw	r28, 0x13	; 19
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	99 8b       	std	Y+17, r25	; 0x11
    3188:	88 8b       	std	Y+16, r24	; 0x10
    318a:	7b 8b       	std	Y+19, r23	; 0x13
    318c:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i=0;
    318e:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;strConst[i] != '\0';i++){
    3190:	1f 86       	std	Y+15, r1	; 0x0f
    3192:	87 c0       	rjmp	.+270    	; 0x32a2 <LCD_writeString+0x130>
		LCD_displayCharacter(strConst[i]);
    3194:	8f 85       	ldd	r24, Y+15	; 0x0f
    3196:	28 2f       	mov	r18, r24
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	88 89       	ldd	r24, Y+16	; 0x10
    319c:	99 89       	ldd	r25, Y+17	; 0x11
    319e:	fc 01       	movw	r30, r24
    31a0:	e2 0f       	add	r30, r18
    31a2:	f3 1f       	adc	r31, r19
    31a4:	80 81       	ld	r24, Z
    31a6:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayCharacter>
		_delay_ms(a_writeDelay_ms);
    31aa:	8a 89       	ldd	r24, Y+18	; 0x12
    31ac:	9b 89       	ldd	r25, Y+19	; 0x13
    31ae:	cc 01       	movw	r24, r24
    31b0:	a0 e0       	ldi	r26, 0x00	; 0
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	8b 87       	std	Y+11, r24	; 0x0b
    31c2:	9c 87       	std	Y+12, r25	; 0x0c
    31c4:	ad 87       	std	Y+13, r26	; 0x0d
    31c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    31cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	4a ef       	ldi	r20, 0xFA	; 250
    31d6:	54 e4       	ldi	r21, 0x44	; 68
    31d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	8f 83       	std	Y+7, r24	; 0x07
    31e2:	98 87       	std	Y+8, r25	; 0x08
    31e4:	a9 87       	std	Y+9, r26	; 0x09
    31e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31e8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ea:	78 85       	ldd	r23, Y+8	; 0x08
    31ec:	89 85       	ldd	r24, Y+9	; 0x09
    31ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	40 e8       	ldi	r20, 0x80	; 128
    31f6:	5f e3       	ldi	r21, 0x3F	; 63
    31f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31fc:	88 23       	and	r24, r24
    31fe:	2c f4       	brge	.+10     	; 0x320a <LCD_writeString+0x98>
		__ticks = 1;
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	9e 83       	std	Y+6, r25	; 0x06
    3206:	8d 83       	std	Y+5, r24	; 0x05
    3208:	3f c0       	rjmp	.+126    	; 0x3288 <LCD_writeString+0x116>
	else if (__tmp > 65535)
    320a:	6f 81       	ldd	r22, Y+7	; 0x07
    320c:	78 85       	ldd	r23, Y+8	; 0x08
    320e:	89 85       	ldd	r24, Y+9	; 0x09
    3210:	9a 85       	ldd	r25, Y+10	; 0x0a
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	3f ef       	ldi	r19, 0xFF	; 255
    3216:	4f e7       	ldi	r20, 0x7F	; 127
    3218:	57 e4       	ldi	r21, 0x47	; 71
    321a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    321e:	18 16       	cp	r1, r24
    3220:	4c f5       	brge	.+82     	; 0x3274 <LCD_writeString+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3222:	6b 85       	ldd	r22, Y+11	; 0x0b
    3224:	7c 85       	ldd	r23, Y+12	; 0x0c
    3226:	8d 85       	ldd	r24, Y+13	; 0x0d
    3228:	9e 85       	ldd	r25, Y+14	; 0x0e
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e2       	ldi	r20, 0x20	; 32
    3230:	51 e4       	ldi	r21, 0x41	; 65
    3232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	bc 01       	movw	r22, r24
    323c:	cd 01       	movw	r24, r26
    323e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	9e 83       	std	Y+6, r25	; 0x06
    3248:	8d 83       	std	Y+5, r24	; 0x05
    324a:	0f c0       	rjmp	.+30     	; 0x326a <LCD_writeString+0xf8>
    324c:	88 ec       	ldi	r24, 0xC8	; 200
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	9c 83       	std	Y+4, r25	; 0x04
    3252:	8b 83       	std	Y+3, r24	; 0x03
    3254:	8b 81       	ldd	r24, Y+3	; 0x03
    3256:	9c 81       	ldd	r25, Y+4	; 0x04
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	f1 f7       	brne	.-4      	; 0x3258 <LCD_writeString+0xe6>
    325c:	9c 83       	std	Y+4, r25	; 0x04
    325e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3260:	8d 81       	ldd	r24, Y+5	; 0x05
    3262:	9e 81       	ldd	r25, Y+6	; 0x06
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	9e 83       	std	Y+6, r25	; 0x06
    3268:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326a:	8d 81       	ldd	r24, Y+5	; 0x05
    326c:	9e 81       	ldd	r25, Y+6	; 0x06
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	69 f7       	brne	.-38     	; 0x324c <LCD_writeString+0xda>
    3272:	14 c0       	rjmp	.+40     	; 0x329c <LCD_writeString+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3274:	6f 81       	ldd	r22, Y+7	; 0x07
    3276:	78 85       	ldd	r23, Y+8	; 0x08
    3278:	89 85       	ldd	r24, Y+9	; 0x09
    327a:	9a 85       	ldd	r25, Y+10	; 0x0a
    327c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	9e 83       	std	Y+6, r25	; 0x06
    3286:	8d 83       	std	Y+5, r24	; 0x05
    3288:	8d 81       	ldd	r24, Y+5	; 0x05
    328a:	9e 81       	ldd	r25, Y+6	; 0x06
    328c:	9a 83       	std	Y+2, r25	; 0x02
    328e:	89 83       	std	Y+1, r24	; 0x01
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	9a 81       	ldd	r25, Y+2	; 0x02
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <LCD_writeString+0x122>
    3298:	9a 83       	std	Y+2, r25	; 0x02
    329a:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * write the required string on the screen with delay effect
 */
void LCD_writeString(const uint8 * strConst, const uint16 a_writeDelay_ms){
	uint8 i=0;
	for(i=0;strConst[i] != '\0';i++){
    329c:	8f 85       	ldd	r24, Y+15	; 0x0f
    329e:	8f 5f       	subi	r24, 0xFF	; 255
    32a0:	8f 87       	std	Y+15, r24	; 0x0f
    32a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a4:	28 2f       	mov	r18, r24
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	88 89       	ldd	r24, Y+16	; 0x10
    32aa:	99 89       	ldd	r25, Y+17	; 0x11
    32ac:	fc 01       	movw	r30, r24
    32ae:	e2 0f       	add	r30, r18
    32b0:	f3 1f       	adc	r31, r19
    32b2:	80 81       	ld	r24, Z
    32b4:	88 23       	and	r24, r24
    32b6:	09 f0       	breq	.+2      	; 0x32ba <LCD_writeString+0x148>
    32b8:	6d cf       	rjmp	.-294    	; 0x3194 <LCD_writeString+0x22>
		LCD_displayCharacter(strConst[i]);
		_delay_ms(a_writeDelay_ms);
	}
}
    32ba:	63 96       	adiw	r28, 0x13	; 19
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col){
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <LCD_moveCursor+0x6>
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <LCD_moveCursor+0x8>
    32d4:	0f 92       	push	r0
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	8a 83       	std	Y+2, r24	; 0x02
    32dc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_location_address;

	/* Get the required address in the LCD DDRAM */
	switch(row){
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	28 2f       	mov	r18, r24
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	3d 83       	std	Y+5, r19	; 0x05
    32e6:	2c 83       	std	Y+4, r18	; 0x04
    32e8:	8c 81       	ldd	r24, Y+4	; 0x04
    32ea:	9d 81       	ldd	r25, Y+5	; 0x05
    32ec:	81 30       	cpi	r24, 0x01	; 1
    32ee:	91 05       	cpc	r25, r1
    32f0:	c1 f0       	breq	.+48     	; 0x3322 <LCD_moveCursor+0x56>
    32f2:	2c 81       	ldd	r18, Y+4	; 0x04
    32f4:	3d 81       	ldd	r19, Y+5	; 0x05
    32f6:	22 30       	cpi	r18, 0x02	; 2
    32f8:	31 05       	cpc	r19, r1
    32fa:	2c f4       	brge	.+10     	; 0x3306 <LCD_moveCursor+0x3a>
    32fc:	8c 81       	ldd	r24, Y+4	; 0x04
    32fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3300:	00 97       	sbiw	r24, 0x00	; 0
    3302:	61 f0       	breq	.+24     	; 0x331c <LCD_moveCursor+0x50>
    3304:	19 c0       	rjmp	.+50     	; 0x3338 <LCD_moveCursor+0x6c>
    3306:	2c 81       	ldd	r18, Y+4	; 0x04
    3308:	3d 81       	ldd	r19, Y+5	; 0x05
    330a:	22 30       	cpi	r18, 0x02	; 2
    330c:	31 05       	cpc	r19, r1
    330e:	69 f0       	breq	.+26     	; 0x332a <LCD_moveCursor+0x5e>
    3310:	8c 81       	ldd	r24, Y+4	; 0x04
    3312:	9d 81       	ldd	r25, Y+5	; 0x05
    3314:	83 30       	cpi	r24, 0x03	; 3
    3316:	91 05       	cpc	r25, r1
    3318:	61 f0       	breq	.+24     	; 0x3332 <LCD_moveCursor+0x66>
    331a:	0e c0       	rjmp	.+28     	; 0x3338 <LCD_moveCursor+0x6c>
	case 0:
		lcd_location_address = col + FIRST_ROW_START_ADDRESS;
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	89 83       	std	Y+1, r24	; 0x01
    3320:	0b c0       	rjmp	.+22     	; 0x3338 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_location_address = col + SECOND_ROW_START_ADDRESS;
    3322:	8b 81       	ldd	r24, Y+3	; 0x03
    3324:	80 5c       	subi	r24, 0xC0	; 192
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	07 c0       	rjmp	.+14     	; 0x3338 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_location_address = col + THIRD_ROW_START_ADDRESS;
    332a:	8b 81       	ldd	r24, Y+3	; 0x03
    332c:	80 5f       	subi	r24, 0xF0	; 240
    332e:	89 83       	std	Y+1, r24	; 0x01
    3330:	03 c0       	rjmp	.+6      	; 0x3338 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_location_address = col + FOURTH_ROW_START_ADDRESS;
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	80 5b       	subi	r24, 0xB0	; 176
    3336:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_SET_CURSOR_LOCATION | lcd_location_address);
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	80 68       	ori	r24, 0x80	; 128
    333c:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>

	/*change cursor position*/
	g_rowNum = row;
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	80 93 e6 02 	sts	0x02E6, r24
	g_colNum = col;
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	80 93 e7 02 	sts	0x02E7, r24

}
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	0f 90       	pop	r0
    3354:	0f 90       	pop	r0
    3356:	cf 91       	pop	r28
    3358:	df 91       	pop	r29
    335a:	08 95       	ret

0000335c <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display a given string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const uint8 * str){
    335c:	df 93       	push	r29
    335e:	cf 93       	push	r28
    3360:	00 d0       	rcall	.+0      	; 0x3362 <LCD_displayStringRowColumn+0x6>
    3362:	00 d0       	rcall	.+0      	; 0x3364 <LCD_displayStringRowColumn+0x8>
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
    3368:	89 83       	std	Y+1, r24	; 0x01
    336a:	6a 83       	std	Y+2, r22	; 0x02
    336c:	5c 83       	std	Y+4, r21	; 0x04
    336e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	6a 81       	ldd	r22, Y+2	; 0x02
    3374:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_moveCursor>
	LCD_displayString(str);
    3378:	8b 81       	ldd	r24, Y+3	; 0x03
    337a:	9c 81       	ldd	r25, Y+4	; 0x04
    337c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_displayString>
}
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	08 95       	ret

0000338e <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data){
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
    3396:	62 97       	sbiw	r28, 0x12	; 18
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	9a 8b       	std	Y+18, r25	; 0x12
    33a4:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16];					/* String to hold the ascii result */
	itoa(data, buffer, DECIMAL_RADIX); 	/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    33a6:	89 89       	ldd	r24, Y+17	; 0x11
    33a8:	9a 89       	ldd	r25, Y+18	; 0x12
    33aa:	9e 01       	movw	r18, r28
    33ac:	2f 5f       	subi	r18, 0xFF	; 255
    33ae:	3f 4f       	sbci	r19, 0xFF	; 255
    33b0:	b9 01       	movw	r22, r18
    33b2:	4a e0       	ldi	r20, 0x0A	; 10
    33b4:	50 e0       	ldi	r21, 0x00	; 0
    33b6:	0e 94 ab 20 	call	0x4156	; 0x4156 <itoa>
	LCD_displayString(buffer);
    33ba:	ce 01       	movw	r24, r28
    33bc:	01 96       	adiw	r24, 0x01	; 1
    33be:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_displayString>
}
    33c2:	62 96       	adiw	r28, 0x12	; 18
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	cd bf       	out	0x3d, r28	; 61
    33ce:	cf 91       	pop	r28
    33d0:	df 91       	pop	r29
    33d2:	08 95       	ret

000033d4 <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void){
    33d4:	df 93       	push	r29
    33d6:	cf 93       	push	r28
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY); /*send clear display command*/
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>
}
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	08 95       	ret

000033e8 <LCD_shiftDisplay>:
/*
 * Description :
 * Shift the display in the specified direction each time delay time is elapsed
 * delay time is given in milliseconds
 */
void LCD_shiftDisplay(LCD_ShiftDirection direction, uint16 delay_time_ms){
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
    33f0:	61 97       	sbiw	r28, 0x11	; 17
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	de bf       	out	0x3e, r29	; 62
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	cd bf       	out	0x3d, r28	; 61
    33fc:	8f 87       	std	Y+15, r24	; 0x0f
    33fe:	79 8b       	std	Y+17, r23	; 0x11
    3400:	68 8b       	std	Y+16, r22	; 0x10
	static volatile uint8 var =0;
	_delay_ms(delay_time_ms);
    3402:	88 89       	ldd	r24, Y+16	; 0x10
    3404:	99 89       	ldd	r25, Y+17	; 0x11
    3406:	cc 01       	movw	r24, r24
    3408:	a0 e0       	ldi	r26, 0x00	; 0
    340a:	b0 e0       	ldi	r27, 0x00	; 0
    340c:	bc 01       	movw	r22, r24
    340e:	cd 01       	movw	r24, r26
    3410:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	8b 87       	std	Y+11, r24	; 0x0b
    341a:	9c 87       	std	Y+12, r25	; 0x0c
    341c:	ad 87       	std	Y+13, r26	; 0x0d
    341e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3420:	6b 85       	ldd	r22, Y+11	; 0x0b
    3422:	7c 85       	ldd	r23, Y+12	; 0x0c
    3424:	8d 85       	ldd	r24, Y+13	; 0x0d
    3426:	9e 85       	ldd	r25, Y+14	; 0x0e
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	4a ef       	ldi	r20, 0xFA	; 250
    342e:	54 e4       	ldi	r21, 0x44	; 68
    3430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	8f 83       	std	Y+7, r24	; 0x07
    343a:	98 87       	std	Y+8, r25	; 0x08
    343c:	a9 87       	std	Y+9, r26	; 0x09
    343e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3440:	6f 81       	ldd	r22, Y+7	; 0x07
    3442:	78 85       	ldd	r23, Y+8	; 0x08
    3444:	89 85       	ldd	r24, Y+9	; 0x09
    3446:	9a 85       	ldd	r25, Y+10	; 0x0a
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e8       	ldi	r20, 0x80	; 128
    344e:	5f e3       	ldi	r21, 0x3F	; 63
    3450:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3454:	88 23       	and	r24, r24
    3456:	2c f4       	brge	.+10     	; 0x3462 <LCD_shiftDisplay+0x7a>
		__ticks = 1;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	9e 83       	std	Y+6, r25	; 0x06
    345e:	8d 83       	std	Y+5, r24	; 0x05
    3460:	3f c0       	rjmp	.+126    	; 0x34e0 <LCD_shiftDisplay+0xf8>
	else if (__tmp > 65535)
    3462:	6f 81       	ldd	r22, Y+7	; 0x07
    3464:	78 85       	ldd	r23, Y+8	; 0x08
    3466:	89 85       	ldd	r24, Y+9	; 0x09
    3468:	9a 85       	ldd	r25, Y+10	; 0x0a
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	3f ef       	ldi	r19, 0xFF	; 255
    346e:	4f e7       	ldi	r20, 0x7F	; 127
    3470:	57 e4       	ldi	r21, 0x47	; 71
    3472:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3476:	18 16       	cp	r1, r24
    3478:	4c f5       	brge	.+82     	; 0x34cc <LCD_shiftDisplay+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347a:	6b 85       	ldd	r22, Y+11	; 0x0b
    347c:	7c 85       	ldd	r23, Y+12	; 0x0c
    347e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3480:	9e 85       	ldd	r25, Y+14	; 0x0e
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e2       	ldi	r20, 0x20	; 32
    3488:	51 e4       	ldi	r21, 0x41	; 65
    348a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	9e 83       	std	Y+6, r25	; 0x06
    34a0:	8d 83       	std	Y+5, r24	; 0x05
    34a2:	0f c0       	rjmp	.+30     	; 0x34c2 <LCD_shiftDisplay+0xda>
    34a4:	88 ec       	ldi	r24, 0xC8	; 200
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	9c 83       	std	Y+4, r25	; 0x04
    34aa:	8b 83       	std	Y+3, r24	; 0x03
    34ac:	8b 81       	ldd	r24, Y+3	; 0x03
    34ae:	9c 81       	ldd	r25, Y+4	; 0x04
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <LCD_shiftDisplay+0xc8>
    34b4:	9c 83       	std	Y+4, r25	; 0x04
    34b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ba:	9e 81       	ldd	r25, Y+6	; 0x06
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	9e 83       	std	Y+6, r25	; 0x06
    34c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c2:	8d 81       	ldd	r24, Y+5	; 0x05
    34c4:	9e 81       	ldd	r25, Y+6	; 0x06
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	69 f7       	brne	.-38     	; 0x34a4 <LCD_shiftDisplay+0xbc>
    34ca:	14 c0       	rjmp	.+40     	; 0x34f4 <LCD_shiftDisplay+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34cc:	6f 81       	ldd	r22, Y+7	; 0x07
    34ce:	78 85       	ldd	r23, Y+8	; 0x08
    34d0:	89 85       	ldd	r24, Y+9	; 0x09
    34d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	9e 83       	std	Y+6, r25	; 0x06
    34de:	8d 83       	std	Y+5, r24	; 0x05
    34e0:	8d 81       	ldd	r24, Y+5	; 0x05
    34e2:	9e 81       	ldd	r25, Y+6	; 0x06
    34e4:	9a 83       	std	Y+2, r25	; 0x02
    34e6:	89 83       	std	Y+1, r24	; 0x01
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	9a 81       	ldd	r25, Y+2	; 0x02
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <LCD_shiftDisplay+0x104>
    34f0:	9a 83       	std	Y+2, r25	; 0x02
    34f2:	89 83       	std	Y+1, r24	; 0x01

	/*check if the maximum left shift is reached*/
	if(var == MAX_SHIFT_LEFT_AMOUNT){
    34f4:	80 91 e8 02 	lds	r24, 0x02E8
    34f8:	88 31       	cpi	r24, 0x18	; 24
    34fa:	31 f4       	brne	.+12     	; 0x3508 <LCD_shiftDisplay+0x120>
		var =0;
    34fc:	10 92 e8 02 	sts	0x02E8, r1
		LCD_sendCommand(LCD_CURSOR_GO_HOME); /*send cursor back to row 0 col 0*/
    3500:	82 e0       	ldi	r24, 0x02	; 2
    3502:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>
    3506:	12 c0       	rjmp	.+36     	; 0x352c <LCD_shiftDisplay+0x144>
		return;
	}
	if(direction == RIGHT){
    3508:	8f 85       	ldd	r24, Y+15	; 0x0f
    350a:	81 30       	cpi	r24, 0x01	; 1
    350c:	21 f4       	brne	.+8      	; 0x3516 <LCD_shiftDisplay+0x12e>
		LCD_sendCommand(LCD_SHIFT_DISPLAY_RIGHT);
    350e:	8c e1       	ldi	r24, 0x1C	; 28
    3510:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>
    3514:	0b c0       	rjmp	.+22     	; 0x352c <LCD_shiftDisplay+0x144>
	}
	else if(direction == LEFT){
    3516:	8f 85       	ldd	r24, Y+15	; 0x0f
    3518:	88 23       	and	r24, r24
    351a:	41 f4       	brne	.+16     	; 0x352c <LCD_shiftDisplay+0x144>
		LCD_sendCommand(LCD_SHIFT_DISPLAY_LEFT);
    351c:	88 e1       	ldi	r24, 0x18	; 24
    351e:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>
		var++;
    3522:	80 91 e8 02 	lds	r24, 0x02E8
    3526:	8f 5f       	subi	r24, 0xFF	; 255
    3528:	80 93 e8 02 	sts	0x02E8, r24

	}
}
    352c:	61 96       	adiw	r28, 0x11	; 17
    352e:	0f b6       	in	r0, 0x3f	; 63
    3530:	f8 94       	cli
    3532:	de bf       	out	0x3e, r29	; 62
    3534:	0f be       	out	0x3f, r0	; 63
    3536:	cd bf       	out	0x3d, r28	; 61
    3538:	cf 91       	pop	r28
    353a:	df 91       	pop	r29
    353c:	08 95       	ret

0000353e <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    353e:	df 93       	push	r29
    3540:	cf 93       	push	r28
    3542:	00 d0       	rcall	.+0      	; 0x3544 <KEYPAD_getPressedKey+0x6>
    3544:	0f 92       	push	r0
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    354a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    354c:	1b 82       	std	Y+3, r1	; 0x03
    354e:	43 c0       	rjmp	.+134    	; 0x35d6 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	60 e0       	ldi	r22, 0x00	; 0
    3554:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    3558:	8b 81       	ldd	r24, Y+3	; 0x03
    355a:	98 2f       	mov	r25, r24
    355c:	9c 5f       	subi	r25, 0xFC	; 252
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	69 2f       	mov	r22, r25
    3562:	41 e0       	ldi	r20, 0x01	; 1
    3564:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    3568:	8b 81       	ldd	r24, Y+3	; 0x03
    356a:	88 2f       	mov	r24, r24
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	9c 01       	movw	r18, r24
    3570:	2c 5f       	subi	r18, 0xFC	; 252
    3572:	3f 4f       	sbci	r19, 0xFF	; 255
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	02 c0       	rjmp	.+4      	; 0x357e <KEYPAD_getPressedKey+0x40>
    357a:	88 0f       	add	r24, r24
    357c:	99 1f       	adc	r25, r25
    357e:	2a 95       	dec	r18
    3580:	e2 f7       	brpl	.-8      	; 0x357a <KEYPAD_getPressedKey+0x3c>
    3582:	80 95       	com	r24
    3584:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	69 81       	ldd	r22, Y+1	; 0x01
    358a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    358e:	1a 82       	std	Y+2, r1	; 0x02
    3590:	1c c0       	rjmp	.+56     	; 0x35ca <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	6a 81       	ldd	r22, Y+2	; 0x02
    3596:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <GPIO_readPin>
    359a:	88 23       	and	r24, r24
    359c:	99 f4       	brne	.+38     	; 0x35c4 <KEYPAD_getPressedKey+0x86>
				{

					return getButtonChar((row*KEYPAD_NUM_COLS)+col+1);
    359e:	8a 81       	ldd	r24, Y+2	; 0x02
    35a0:	88 2f       	mov	r24, r24
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	88 0f       	add	r24, r24
    35a6:	99 1f       	adc	r25, r25
    35a8:	88 0f       	add	r24, r24
    35aa:	99 1f       	adc	r25, r25
    35ac:	98 2f       	mov	r25, r24
    35ae:	8b 81       	ldd	r24, Y+3	; 0x03
    35b0:	89 0f       	add	r24, r25
    35b2:	8f 5f       	subi	r24, 0xFF	; 255
    35b4:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <getButtonChar>
				}
			}
		}
	}
}
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	cf 91       	pop	r28
    35c0:	df 91       	pop	r29
    35c2:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    35c4:	8a 81       	ldd	r24, Y+2	; 0x02
    35c6:	8f 5f       	subi	r24, 0xFF	; 255
    35c8:	8a 83       	std	Y+2, r24	; 0x02
    35ca:	8a 81       	ldd	r24, Y+2	; 0x02
    35cc:	84 30       	cpi	r24, 0x04	; 4
    35ce:	08 f3       	brcs	.-62     	; 0x3592 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    35d0:	8b 81       	ldd	r24, Y+3	; 0x03
    35d2:	8f 5f       	subi	r24, 0xFF	; 255
    35d4:	8b 83       	std	Y+3, r24	; 0x03
    35d6:	8b 81       	ldd	r24, Y+3	; 0x03
    35d8:	84 30       	cpi	r24, 0x04	; 4
    35da:	08 f4       	brcc	.+2      	; 0x35de <KEYPAD_getPressedKey+0xa0>
    35dc:	b9 cf       	rjmp	.-142    	; 0x3550 <KEYPAD_getPressedKey+0x12>
    35de:	b6 cf       	rjmp	.-148    	; 0x354c <KEYPAD_getPressedKey+0xe>

000035e0 <getButtonChar>:

/*
 * Description :
 * Get the keypad pressed button value according to the selected configuration.
 */
static uint8 getButtonChar(uint8 button_number){
    35e0:	df 93       	push	r29
    35e2:	cf 93       	push	r28
    35e4:	00 d0       	rcall	.+0      	; 0x35e6 <getButtonChar+0x6>
    35e6:	00 d0       	rcall	.+0      	; 0x35e8 <getButtonChar+0x8>
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
    35ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 button_character;
	switch(button_number){
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	28 2f       	mov	r18, r24
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	3c 83       	std	Y+4, r19	; 0x04
    35f6:	2b 83       	std	Y+3, r18	; 0x03
    35f8:	8b 81       	ldd	r24, Y+3	; 0x03
    35fa:	9c 81       	ldd	r25, Y+4	; 0x04
    35fc:	88 30       	cpi	r24, 0x08	; 8
    35fe:	91 05       	cpc	r25, r1
    3600:	09 f4       	brne	.+2      	; 0x3604 <getButtonChar+0x24>
    3602:	70 c0       	rjmp	.+224    	; 0x36e4 <getButtonChar+0x104>
    3604:	2b 81       	ldd	r18, Y+3	; 0x03
    3606:	3c 81       	ldd	r19, Y+4	; 0x04
    3608:	29 30       	cpi	r18, 0x09	; 9
    360a:	31 05       	cpc	r19, r1
    360c:	5c f5       	brge	.+86     	; 0x3664 <getButtonChar+0x84>
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	9c 81       	ldd	r25, Y+4	; 0x04
    3612:	84 30       	cpi	r24, 0x04	; 4
    3614:	91 05       	cpc	r25, r1
    3616:	09 f4       	brne	.+2      	; 0x361a <getButtonChar+0x3a>
    3618:	59 c0       	rjmp	.+178    	; 0x36cc <getButtonChar+0xec>
    361a:	2b 81       	ldd	r18, Y+3	; 0x03
    361c:	3c 81       	ldd	r19, Y+4	; 0x04
    361e:	25 30       	cpi	r18, 0x05	; 5
    3620:	31 05       	cpc	r19, r1
    3622:	9c f4       	brge	.+38     	; 0x364a <getButtonChar+0x6a>
    3624:	8b 81       	ldd	r24, Y+3	; 0x03
    3626:	9c 81       	ldd	r25, Y+4	; 0x04
    3628:	82 30       	cpi	r24, 0x02	; 2
    362a:	91 05       	cpc	r25, r1
    362c:	09 f4       	brne	.+2      	; 0x3630 <getButtonChar+0x50>
    362e:	48 c0       	rjmp	.+144    	; 0x36c0 <getButtonChar+0xe0>
    3630:	2b 81       	ldd	r18, Y+3	; 0x03
    3632:	3c 81       	ldd	r19, Y+4	; 0x04
    3634:	23 30       	cpi	r18, 0x03	; 3
    3636:	31 05       	cpc	r19, r1
    3638:	0c f0       	brlt	.+2      	; 0x363c <getButtonChar+0x5c>
    363a:	45 c0       	rjmp	.+138    	; 0x36c6 <getButtonChar+0xe6>
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	9c 81       	ldd	r25, Y+4	; 0x04
    3640:	81 30       	cpi	r24, 0x01	; 1
    3642:	91 05       	cpc	r25, r1
    3644:	09 f4       	brne	.+2      	; 0x3648 <getButtonChar+0x68>
    3646:	39 c0       	rjmp	.+114    	; 0x36ba <getButtonChar+0xda>
    3648:	67 c0       	rjmp	.+206    	; 0x3718 <getButtonChar+0x138>
    364a:	2b 81       	ldd	r18, Y+3	; 0x03
    364c:	3c 81       	ldd	r19, Y+4	; 0x04
    364e:	26 30       	cpi	r18, 0x06	; 6
    3650:	31 05       	cpc	r19, r1
    3652:	09 f4       	brne	.+2      	; 0x3656 <getButtonChar+0x76>
    3654:	41 c0       	rjmp	.+130    	; 0x36d8 <getButtonChar+0xf8>
    3656:	8b 81       	ldd	r24, Y+3	; 0x03
    3658:	9c 81       	ldd	r25, Y+4	; 0x04
    365a:	87 30       	cpi	r24, 0x07	; 7
    365c:	91 05       	cpc	r25, r1
    365e:	0c f0       	brlt	.+2      	; 0x3662 <getButtonChar+0x82>
    3660:	3e c0       	rjmp	.+124    	; 0x36de <getButtonChar+0xfe>
    3662:	37 c0       	rjmp	.+110    	; 0x36d2 <getButtonChar+0xf2>
    3664:	2b 81       	ldd	r18, Y+3	; 0x03
    3666:	3c 81       	ldd	r19, Y+4	; 0x04
    3668:	2c 30       	cpi	r18, 0x0C	; 12
    366a:	31 05       	cpc	r19, r1
    366c:	09 f4       	brne	.+2      	; 0x3670 <getButtonChar+0x90>
    366e:	46 c0       	rjmp	.+140    	; 0x36fc <getButtonChar+0x11c>
    3670:	8b 81       	ldd	r24, Y+3	; 0x03
    3672:	9c 81       	ldd	r25, Y+4	; 0x04
    3674:	8d 30       	cpi	r24, 0x0D	; 13
    3676:	91 05       	cpc	r25, r1
    3678:	5c f4       	brge	.+22     	; 0x3690 <getButtonChar+0xb0>
    367a:	2b 81       	ldd	r18, Y+3	; 0x03
    367c:	3c 81       	ldd	r19, Y+4	; 0x04
    367e:	2a 30       	cpi	r18, 0x0A	; 10
    3680:	31 05       	cpc	r19, r1
    3682:	b1 f1       	breq	.+108    	; 0x36f0 <getButtonChar+0x110>
    3684:	8b 81       	ldd	r24, Y+3	; 0x03
    3686:	9c 81       	ldd	r25, Y+4	; 0x04
    3688:	8b 30       	cpi	r24, 0x0B	; 11
    368a:	91 05       	cpc	r25, r1
    368c:	a4 f5       	brge	.+104    	; 0x36f6 <getButtonChar+0x116>
    368e:	2d c0       	rjmp	.+90     	; 0x36ea <getButtonChar+0x10a>
    3690:	2b 81       	ldd	r18, Y+3	; 0x03
    3692:	3c 81       	ldd	r19, Y+4	; 0x04
    3694:	2e 30       	cpi	r18, 0x0E	; 14
    3696:	31 05       	cpc	r19, r1
    3698:	b9 f1       	breq	.+110    	; 0x3708 <getButtonChar+0x128>
    369a:	8b 81       	ldd	r24, Y+3	; 0x03
    369c:	9c 81       	ldd	r25, Y+4	; 0x04
    369e:	8e 30       	cpi	r24, 0x0E	; 14
    36a0:	91 05       	cpc	r25, r1
    36a2:	7c f1       	brlt	.+94     	; 0x3702 <getButtonChar+0x122>
    36a4:	2b 81       	ldd	r18, Y+3	; 0x03
    36a6:	3c 81       	ldd	r19, Y+4	; 0x04
    36a8:	2f 30       	cpi	r18, 0x0F	; 15
    36aa:	31 05       	cpc	r19, r1
    36ac:	79 f1       	breq	.+94     	; 0x370c <getButtonChar+0x12c>
    36ae:	8b 81       	ldd	r24, Y+3	; 0x03
    36b0:	9c 81       	ldd	r25, Y+4	; 0x04
    36b2:	80 31       	cpi	r24, 0x10	; 16
    36b4:	91 05       	cpc	r25, r1
    36b6:	69 f1       	breq	.+90     	; 0x3712 <getButtonChar+0x132>
    36b8:	2f c0       	rjmp	.+94     	; 0x3718 <getButtonChar+0x138>
	case 1:
		button_character = KEYPAD_BUTTON_1;
    36ba:	87 e0       	ldi	r24, 0x07	; 7
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	2e c0       	rjmp	.+92     	; 0x371c <getButtonChar+0x13c>
		break;
	case 2:
		button_character = KEYPAD_BUTTON_2;
    36c0:	88 e0       	ldi	r24, 0x08	; 8
    36c2:	89 83       	std	Y+1, r24	; 0x01
    36c4:	2b c0       	rjmp	.+86     	; 0x371c <getButtonChar+0x13c>
		break;
	case 3:
		button_character = KEYPAD_BUTTON_3;
    36c6:	89 e0       	ldi	r24, 0x09	; 9
    36c8:	89 83       	std	Y+1, r24	; 0x01
    36ca:	28 c0       	rjmp	.+80     	; 0x371c <getButtonChar+0x13c>
		break;
	case 4:
		button_character = KEYPAD_BUTTON_4;
    36cc:	8f e2       	ldi	r24, 0x2F	; 47
    36ce:	89 83       	std	Y+1, r24	; 0x01
    36d0:	25 c0       	rjmp	.+74     	; 0x371c <getButtonChar+0x13c>
		break;
	case 5:
		button_character = KEYPAD_BUTTON_5;
    36d2:	84 e0       	ldi	r24, 0x04	; 4
    36d4:	89 83       	std	Y+1, r24	; 0x01
    36d6:	22 c0       	rjmp	.+68     	; 0x371c <getButtonChar+0x13c>
		break;
	case 6:
		button_character = KEYPAD_BUTTON_6;
    36d8:	85 e0       	ldi	r24, 0x05	; 5
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	1f c0       	rjmp	.+62     	; 0x371c <getButtonChar+0x13c>
		break;
	case 7:
		button_character = KEYPAD_BUTTON_7;
    36de:	86 e0       	ldi	r24, 0x06	; 6
    36e0:	89 83       	std	Y+1, r24	; 0x01
    36e2:	1c c0       	rjmp	.+56     	; 0x371c <getButtonChar+0x13c>
		break;
	case 8:
		button_character = KEYPAD_BUTTON_8;
    36e4:	8a e2       	ldi	r24, 0x2A	; 42
    36e6:	89 83       	std	Y+1, r24	; 0x01
    36e8:	19 c0       	rjmp	.+50     	; 0x371c <getButtonChar+0x13c>
		break;
	case 9:
		button_character = KEYPAD_BUTTON_9;
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	89 83       	std	Y+1, r24	; 0x01
    36ee:	16 c0       	rjmp	.+44     	; 0x371c <getButtonChar+0x13c>
		break;
	case 10:
		button_character = KEYPAD_BUTTON_10;
    36f0:	82 e0       	ldi	r24, 0x02	; 2
    36f2:	89 83       	std	Y+1, r24	; 0x01
    36f4:	13 c0       	rjmp	.+38     	; 0x371c <getButtonChar+0x13c>
		break;
	case 11:
		button_character = KEYPAD_BUTTON_11;
    36f6:	83 e0       	ldi	r24, 0x03	; 3
    36f8:	89 83       	std	Y+1, r24	; 0x01
    36fa:	10 c0       	rjmp	.+32     	; 0x371c <getButtonChar+0x13c>
		break;
	case 12:
		button_character = KEYPAD_BUTTON_12;
    36fc:	8d e2       	ldi	r24, 0x2D	; 45
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	0d c0       	rjmp	.+26     	; 0x371c <getButtonChar+0x13c>
		break;
#if (KEYPAD_NUM_COLS == 4)
	case 13:
		button_character = KEYPAD_BUTTON_13;
    3702:	8d e0       	ldi	r24, 0x0D	; 13
    3704:	89 83       	std	Y+1, r24	; 0x01
    3706:	0a c0       	rjmp	.+20     	; 0x371c <getButtonChar+0x13c>
		break;
	case 14:
		button_character = KEYPAD_BUTTON_14;
    3708:	19 82       	std	Y+1, r1	; 0x01
    370a:	08 c0       	rjmp	.+16     	; 0x371c <getButtonChar+0x13c>
		break;
	case 15:
		button_character = KEYPAD_BUTTON_15;
    370c:	8d e3       	ldi	r24, 0x3D	; 61
    370e:	89 83       	std	Y+1, r24	; 0x01
    3710:	05 c0       	rjmp	.+10     	; 0x371c <getButtonChar+0x13c>
		break;
	case 16:
		button_character = KEYPAD_BUTTON_16;
    3712:	8b e2       	ldi	r24, 0x2B	; 43
    3714:	89 83       	std	Y+1, r24	; 0x01
    3716:	02 c0       	rjmp	.+4      	; 0x371c <getButtonChar+0x13c>
		break;
#endif
	default:
		button_character = button_number;
    3718:	8a 81       	ldd	r24, Y+2	; 0x02
    371a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return button_character;
    371c:	89 81       	ldd	r24, Y+1	; 0x01
}
    371e:	0f 90       	pop	r0
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <APP_getPassword>:
 * Description:
 * prompts the user a given instruction on the LCD.
 * get the input from the keypad and store it.
*/
static void APP_getPassword(const uint8 const * a_user_prompt)
{
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
    3734:	62 97       	sbiw	r28, 0x12	; 18
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	cd bf       	out	0x3d, r28	; 61
    3740:	9a 8b       	std	Y+18, r25	; 0x12
    3742:	89 8b       	std	Y+17, r24	; 0x11
	uint8 key , i = 0;
    3744:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_displayStringRowColumn(0,0,a_user_prompt);
    3746:	29 89       	ldd	r18, Y+17	; 0x11
    3748:	3a 89       	ldd	r19, Y+18	; 0x12
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	a9 01       	movw	r20, r18
    3750:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_displayStringRowColumn>

	LCD_moveCursor(1,13); /* Move the cursor to the second row */
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	6d e0       	ldi	r22, 0x0D	; 13
    3758:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_moveCursor>
	LCD_sendCommand(LCD_CURSOR_BLINK);
    375c:	8f e0       	ldi	r24, 0x0F	; 15
    375e:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>
    3762:	92 c0       	rjmp	.+292    	; 0x3888 <APP_getPassword+0x15c>

	/*keep getting input until 5 digits are entered.
	 * eventually, only exit when equal (=) key is pressed on keypad)*/
	while(i<PASSWORD_LENGTH || key != PASSWORD_ENTER_KEY){
		key = KEYPAD_getPressedKey();
    3764:	0e 94 9f 1a 	call	0x353e	; 0x353e <KEYPAD_getPressedKey>
    3768:	88 8b       	std	Y+16, r24	; 0x10

		/*accept numeric inputs only*/
		if((key <= 9) && (key >= 0) && i<PASSWORD_LENGTH)
    376a:	88 89       	ldd	r24, Y+16	; 0x10
    376c:	8a 30       	cpi	r24, 0x0A	; 10
    376e:	a0 f4       	brcc	.+40     	; 0x3798 <APP_getPassword+0x6c>
    3770:	8f 85       	ldd	r24, Y+15	; 0x0f
    3772:	85 30       	cpi	r24, 0x05	; 5
    3774:	88 f4       	brcc	.+34     	; 0x3798 <APP_getPassword+0x6c>
		{
			/*store the ascii-code of each number in a global variable*/
			g_passwordInput[i] = ZERO_ASCII_CODE + key;
    3776:	8f 85       	ldd	r24, Y+15	; 0x0f
    3778:	28 2f       	mov	r18, r24
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	88 89       	ldd	r24, Y+16	; 0x10
    377e:	80 5d       	subi	r24, 0xD0	; 208
    3780:	f9 01       	movw	r30, r18
    3782:	e7 51       	subi	r30, 0x17	; 23
    3784:	fd 4f       	sbci	r31, 0xFD	; 253
    3786:	80 83       	st	Z, r24
			LCD_characterFade(key + ZERO_ASCII_CODE, PASSWORD_CHARACHER); /* display an asterisk (*) for each digit entered */
    3788:	88 89       	ldd	r24, Y+16	; 0x10
    378a:	80 5d       	subi	r24, 0xD0	; 208
    378c:	6a e2       	ldi	r22, 0x2A	; 42
    378e:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_characterFade>
			i++;
    3792:	8f 85       	ldd	r24, Y+15	; 0x0f
    3794:	8f 5f       	subi	r24, 0xFF	; 255
    3796:	8f 87       	std	Y+15, r24	; 0x0f
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	a6 e1       	ldi	r26, 0x16	; 22
    379e:	b3 e4       	ldi	r27, 0x43	; 67
    37a0:	8b 87       	std	Y+11, r24	; 0x0b
    37a2:	9c 87       	std	Y+12, r25	; 0x0c
    37a4:	ad 87       	std	Y+13, r26	; 0x0d
    37a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    37aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	4a ef       	ldi	r20, 0xFA	; 250
    37b6:	54 e4       	ldi	r21, 0x44	; 68
    37b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	8f 83       	std	Y+7, r24	; 0x07
    37c2:	98 87       	std	Y+8, r25	; 0x08
    37c4:	a9 87       	std	Y+9, r26	; 0x09
    37c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37c8:	6f 81       	ldd	r22, Y+7	; 0x07
    37ca:	78 85       	ldd	r23, Y+8	; 0x08
    37cc:	89 85       	ldd	r24, Y+9	; 0x09
    37ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	40 e8       	ldi	r20, 0x80	; 128
    37d6:	5f e3       	ldi	r21, 0x3F	; 63
    37d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37dc:	88 23       	and	r24, r24
    37de:	2c f4       	brge	.+10     	; 0x37ea <APP_getPassword+0xbe>
		__ticks = 1;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	9e 83       	std	Y+6, r25	; 0x06
    37e6:	8d 83       	std	Y+5, r24	; 0x05
    37e8:	3f c0       	rjmp	.+126    	; 0x3868 <APP_getPassword+0x13c>
	else if (__tmp > 65535)
    37ea:	6f 81       	ldd	r22, Y+7	; 0x07
    37ec:	78 85       	ldd	r23, Y+8	; 0x08
    37ee:	89 85       	ldd	r24, Y+9	; 0x09
    37f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	3f ef       	ldi	r19, 0xFF	; 255
    37f6:	4f e7       	ldi	r20, 0x7F	; 127
    37f8:	57 e4       	ldi	r21, 0x47	; 71
    37fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37fe:	18 16       	cp	r1, r24
    3800:	4c f5       	brge	.+82     	; 0x3854 <APP_getPassword+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3802:	6b 85       	ldd	r22, Y+11	; 0x0b
    3804:	7c 85       	ldd	r23, Y+12	; 0x0c
    3806:	8d 85       	ldd	r24, Y+13	; 0x0d
    3808:	9e 85       	ldd	r25, Y+14	; 0x0e
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	40 e2       	ldi	r20, 0x20	; 32
    3810:	51 e4       	ldi	r21, 0x41	; 65
    3812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	bc 01       	movw	r22, r24
    381c:	cd 01       	movw	r24, r26
    381e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	9e 83       	std	Y+6, r25	; 0x06
    3828:	8d 83       	std	Y+5, r24	; 0x05
    382a:	0f c0       	rjmp	.+30     	; 0x384a <APP_getPassword+0x11e>
    382c:	88 ec       	ldi	r24, 0xC8	; 200
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	9c 83       	std	Y+4, r25	; 0x04
    3832:	8b 83       	std	Y+3, r24	; 0x03
    3834:	8b 81       	ldd	r24, Y+3	; 0x03
    3836:	9c 81       	ldd	r25, Y+4	; 0x04
    3838:	01 97       	sbiw	r24, 0x01	; 1
    383a:	f1 f7       	brne	.-4      	; 0x3838 <APP_getPassword+0x10c>
    383c:	9c 83       	std	Y+4, r25	; 0x04
    383e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3840:	8d 81       	ldd	r24, Y+5	; 0x05
    3842:	9e 81       	ldd	r25, Y+6	; 0x06
    3844:	01 97       	sbiw	r24, 0x01	; 1
    3846:	9e 83       	std	Y+6, r25	; 0x06
    3848:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    384a:	8d 81       	ldd	r24, Y+5	; 0x05
    384c:	9e 81       	ldd	r25, Y+6	; 0x06
    384e:	00 97       	sbiw	r24, 0x00	; 0
    3850:	69 f7       	brne	.-38     	; 0x382c <APP_getPassword+0x100>
    3852:	14 c0       	rjmp	.+40     	; 0x387c <APP_getPassword+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3854:	6f 81       	ldd	r22, Y+7	; 0x07
    3856:	78 85       	ldd	r23, Y+8	; 0x08
    3858:	89 85       	ldd	r24, Y+9	; 0x09
    385a:	9a 85       	ldd	r25, Y+10	; 0x0a
    385c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	9e 83       	std	Y+6, r25	; 0x06
    3866:	8d 83       	std	Y+5, r24	; 0x05
    3868:	8d 81       	ldd	r24, Y+5	; 0x05
    386a:	9e 81       	ldd	r25, Y+6	; 0x06
    386c:	9a 83       	std	Y+2, r25	; 0x02
    386e:	89 83       	std	Y+1, r24	; 0x01
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	9a 81       	ldd	r25, Y+2	; 0x02
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	f1 f7       	brne	.-4      	; 0x3874 <APP_getPassword+0x148>
    3878:	9a 83       	std	Y+2, r25	; 0x02
    387a:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(PRESS_TIME); /*delay for button press*/

		/*Turn off the cursor when 5 characters are entered*/
		if(i==PASSWORD_LENGTH)
    387c:	8f 85       	ldd	r24, Y+15	; 0x0f
    387e:	85 30       	cpi	r24, 0x05	; 5
    3880:	19 f4       	brne	.+6      	; 0x3888 <APP_getPassword+0x15c>
		{
			LCD_sendCommand(LCD_CURSOR_OFF);
    3882:	8c e0       	ldi	r24, 0x0C	; 12
    3884:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>
	LCD_moveCursor(1,13); /* Move the cursor to the second row */
	LCD_sendCommand(LCD_CURSOR_BLINK);

	/*keep getting input until 5 digits are entered.
	 * eventually, only exit when equal (=) key is pressed on keypad)*/
	while(i<PASSWORD_LENGTH || key != PASSWORD_ENTER_KEY){
    3888:	8f 85       	ldd	r24, Y+15	; 0x0f
    388a:	85 30       	cpi	r24, 0x05	; 5
    388c:	08 f4       	brcc	.+2      	; 0x3890 <APP_getPassword+0x164>
    388e:	6a cf       	rjmp	.-300    	; 0x3764 <APP_getPassword+0x38>
    3890:	88 89       	ldd	r24, Y+16	; 0x10
    3892:	8d 33       	cpi	r24, 0x3D	; 61
    3894:	09 f0       	breq	.+2      	; 0x3898 <APP_getPassword+0x16c>
    3896:	66 cf       	rjmp	.-308    	; 0x3764 <APP_getPassword+0x38>
		{
			LCD_sendCommand(LCD_CURSOR_OFF);
		}
	}

	g_passwordInput[5] = USART_TERMINATOR_CHARACTER;  /*A special character denoting the end of a string for UART_send*/
    3898:	83 e2       	ldi	r24, 0x23	; 35
    389a:	80 93 ee 02 	sts	0x02EE, r24

	LCD_clearScreen(); /*clear the LCD*/
    389e:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <LCD_clearScreen>
}
    38a2:	62 96       	adiw	r28, 0x12	; 18
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	cd bf       	out	0x3d, r28	; 61
    38ae:	cf 91       	pop	r28
    38b0:	df 91       	pop	r29
    38b2:	08 95       	ret

000038b4 <APP_sendPassword>:
 * Description:
 * prompts the user to enter the new password and re-enter it to confirm.
 * send both passwords to the CONTROL ECU to be compared and saved.
*/
static void APP_sendPassword(void)
{
    38b4:	df 93       	push	r29
    38b6:	cf 93       	push	r28
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
	/*Acknowledge that sender (HMI ECU) is ready to send password value */
	USART_sendByte(USART_SENDER_READY_BYTE);
    38bc:	86 e6       	ldi	r24, 0x66	; 102
    38be:	0e 94 ff 06 	call	0xdfe	; 0xdfe <USART_sendByte>

	while( USART_receiveByte() != USART_RECEIVER_READY_BYTE)
    38c2:	0e 94 16 07 	call	0xe2c	; 0xe2c <USART_receiveByte>
    38c6:	86 36       	cpi	r24, 0x66	; 102
    38c8:	e1 f7       	brne	.-8      	; 0x38c2 <APP_sendPassword+0xe>
	{
		; /*wait until the receiver (CONTROL ECU) is ready to receive*/
	}

	USART_sendString(g_passwordInput); /*send the password to receiver (CONTROL ECU)*/
    38ca:	89 ee       	ldi	r24, 0xE9	; 233
    38cc:	92 e0       	ldi	r25, 0x02	; 2
    38ce:	0e 94 25 07 	call	0xe4a	; 0xe4a <USART_sendString>
}
    38d2:	cf 91       	pop	r28
    38d4:	df 91       	pop	r29
    38d6:	08 95       	ret

000038d8 <APP_passwordEnquire>:
 * A generic function that confirms whether the entered password matches:
 * 1- the re-entered password in case of password change/initialization
 * 2- the actual password stored in the EEPROM in case of a door access or password change.
*/
static APP_PasswordStatus APP_passwordEnquire(void)
{
    38d8:	df 93       	push	r29
    38da:	cf 93       	push	r28
    38dc:	cd b7       	in	r28, 0x3d	; 61
    38de:	de b7       	in	r29, 0x3e	; 62
    38e0:	60 97       	sbiw	r28, 0x10	; 16
    38e2:	0f b6       	in	r0, 0x3f	; 63
    38e4:	f8 94       	cli
    38e6:	de bf       	out	0x3e, r29	; 62
    38e8:	0f be       	out	0x3f, r0	; 63
    38ea:	cd bf       	out	0x3d, r28	; 61
	/*variable to store the received password_status from uart*/
	uint8 received_compare_result;
	/*Acknowledge that receiver (HMI ECU) is ready to receive password compare_result */
	USART_sendByte(USART_RECEIVER_READY_BYTE);
    38ec:	86 e6       	ldi	r24, 0x66	; 102
    38ee:	0e 94 ff 06 	call	0xdfe	; 0xdfe <USART_sendByte>

	while( USART_receiveByte() != USART_SENDER_READY_BYTE)
    38f2:	0e 94 16 07 	call	0xe2c	; 0xe2c <USART_receiveByte>
    38f6:	86 36       	cpi	r24, 0x66	; 102
    38f8:	e1 f7       	brne	.-8      	; 0x38f2 <APP_passwordEnquire+0x1a>
	{
		; /*wait until the sender (CONTROL) is ready to send password compare_result  */
	}

	/*get the received status from UART*/
	received_compare_result = USART_receiveByte();
    38fa:	0e 94 16 07 	call	0xe2c	; 0xe2c <USART_receiveByte>
    38fe:	8f 87       	std	Y+15, r24	; 0x0f

	/*if the two entered passwords are matching*/
	if(received_compare_result == MATCHING_PASSWORD_BYTE)
    3900:	8f 85       	ldd	r24, Y+15	; 0x0f
    3902:	8f 3f       	cpi	r24, 0xFF	; 255
    3904:	11 f4       	brne	.+4      	; 0x390a <APP_passwordEnquire+0x32>
	{
		return MATCHING_PASSWORDS;
    3906:	18 8a       	std	Y+16, r1	; 0x10
    3908:	90 c0       	rjmp	.+288    	; 0x3a2a <APP_passwordEnquire+0x152>
	}
	/*if the two entered passwords are not matching, prompt to the user*/
	else if (received_compare_result == UNMATCHING_PASSWORD_BYTE && g_wrong_passwords !=3)
    390a:	8f 85       	ldd	r24, Y+15	; 0x0f
    390c:	88 23       	and	r24, r24
    390e:	09 f0       	breq	.+2      	; 0x3912 <APP_passwordEnquire+0x3a>
    3910:	8a c0       	rjmp	.+276    	; 0x3a26 <APP_passwordEnquire+0x14e>
    3912:	80 91 ef 02 	lds	r24, 0x02EF
    3916:	83 30       	cpi	r24, 0x03	; 3
    3918:	09 f4       	brne	.+2      	; 0x391c <APP_passwordEnquire+0x44>
    391a:	85 c0       	rjmp	.+266    	; 0x3a26 <APP_passwordEnquire+0x14e>
	{
		LCD_displayStringRowColumn(0,0,"ERROR: Password Does Not Match.");
    391c:	20 e6       	ldi	r18, 0x60	; 96
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	60 e0       	ldi	r22, 0x00	; 0
    3924:	a9 01       	movw	r20, r18
    3926:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"Please Try Again !");
    392a:	20 e8       	ldi	r18, 0x80	; 128
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	60 e0       	ldi	r22, 0x00	; 0
    3932:	a9 01       	movw	r20, r18
    3934:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_displayStringRowColumn>
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	aa e7       	ldi	r26, 0x7A	; 122
    393e:	b4 e4       	ldi	r27, 0x44	; 68
    3940:	8b 87       	std	Y+11, r24	; 0x0b
    3942:	9c 87       	std	Y+12, r25	; 0x0c
    3944:	ad 87       	std	Y+13, r26	; 0x0d
    3946:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3948:	6b 85       	ldd	r22, Y+11	; 0x0b
    394a:	7c 85       	ldd	r23, Y+12	; 0x0c
    394c:	8d 85       	ldd	r24, Y+13	; 0x0d
    394e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	4a ef       	ldi	r20, 0xFA	; 250
    3956:	54 e4       	ldi	r21, 0x44	; 68
    3958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	8f 83       	std	Y+7, r24	; 0x07
    3962:	98 87       	std	Y+8, r25	; 0x08
    3964:	a9 87       	std	Y+9, r26	; 0x09
    3966:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3968:	6f 81       	ldd	r22, Y+7	; 0x07
    396a:	78 85       	ldd	r23, Y+8	; 0x08
    396c:	89 85       	ldd	r24, Y+9	; 0x09
    396e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	40 e8       	ldi	r20, 0x80	; 128
    3976:	5f e3       	ldi	r21, 0x3F	; 63
    3978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    397c:	88 23       	and	r24, r24
    397e:	2c f4       	brge	.+10     	; 0x398a <APP_passwordEnquire+0xb2>
		__ticks = 1;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	9e 83       	std	Y+6, r25	; 0x06
    3986:	8d 83       	std	Y+5, r24	; 0x05
    3988:	3f c0       	rjmp	.+126    	; 0x3a08 <APP_passwordEnquire+0x130>
	else if (__tmp > 65535)
    398a:	6f 81       	ldd	r22, Y+7	; 0x07
    398c:	78 85       	ldd	r23, Y+8	; 0x08
    398e:	89 85       	ldd	r24, Y+9	; 0x09
    3990:	9a 85       	ldd	r25, Y+10	; 0x0a
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	3f ef       	ldi	r19, 0xFF	; 255
    3996:	4f e7       	ldi	r20, 0x7F	; 127
    3998:	57 e4       	ldi	r21, 0x47	; 71
    399a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    399e:	18 16       	cp	r1, r24
    39a0:	4c f5       	brge	.+82     	; 0x39f4 <APP_passwordEnquire+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e2       	ldi	r20, 0x20	; 32
    39b0:	51 e4       	ldi	r21, 0x41	; 65
    39b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	bc 01       	movw	r22, r24
    39bc:	cd 01       	movw	r24, r26
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	9e 83       	std	Y+6, r25	; 0x06
    39c8:	8d 83       	std	Y+5, r24	; 0x05
    39ca:	0f c0       	rjmp	.+30     	; 0x39ea <APP_passwordEnquire+0x112>
    39cc:	88 ec       	ldi	r24, 0xC8	; 200
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	9c 83       	std	Y+4, r25	; 0x04
    39d2:	8b 83       	std	Y+3, r24	; 0x03
    39d4:	8b 81       	ldd	r24, Y+3	; 0x03
    39d6:	9c 81       	ldd	r25, Y+4	; 0x04
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	f1 f7       	brne	.-4      	; 0x39d8 <APP_passwordEnquire+0x100>
    39dc:	9c 83       	std	Y+4, r25	; 0x04
    39de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e0:	8d 81       	ldd	r24, Y+5	; 0x05
    39e2:	9e 81       	ldd	r25, Y+6	; 0x06
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	9e 83       	std	Y+6, r25	; 0x06
    39e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ea:	8d 81       	ldd	r24, Y+5	; 0x05
    39ec:	9e 81       	ldd	r25, Y+6	; 0x06
    39ee:	00 97       	sbiw	r24, 0x00	; 0
    39f0:	69 f7       	brne	.-38     	; 0x39cc <APP_passwordEnquire+0xf4>
    39f2:	14 c0       	rjmp	.+40     	; 0x3a1c <APP_passwordEnquire+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f4:	6f 81       	ldd	r22, Y+7	; 0x07
    39f6:	78 85       	ldd	r23, Y+8	; 0x08
    39f8:	89 85       	ldd	r24, Y+9	; 0x09
    39fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	9e 83       	std	Y+6, r25	; 0x06
    3a06:	8d 83       	std	Y+5, r24	; 0x05
    3a08:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0c:	9a 83       	std	Y+2, r25	; 0x02
    3a0e:	89 83       	std	Y+1, r24	; 0x01
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
    3a12:	9a 81       	ldd	r25, Y+2	; 0x02
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	f1 f7       	brne	.-4      	; 0x3a14 <APP_passwordEnquire+0x13c>
    3a18:	9a 83       	std	Y+2, r25	; 0x02
    3a1a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    3a1c:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <LCD_clearScreen>
		return UNMATCHING_PASSWORDS;
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	88 8b       	std	Y+16, r24	; 0x10
    3a24:	02 c0       	rjmp	.+4      	; 0x3a2a <APP_passwordEnquire+0x152>
	}
	else
		return UNMATCHING_PASSWORDS;
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	88 8b       	std	Y+16, r24	; 0x10
    3a2a:	88 89       	ldd	r24, Y+16	; 0x10
}
    3a2c:	60 96       	adiw	r28, 0x10	; 16
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	f8 94       	cli
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	cd bf       	out	0x3d, r28	; 61
    3a38:	cf 91       	pop	r28
    3a3a:	df 91       	pop	r29
    3a3c:	08 95       	ret

00003a3e <APP_sendCommand>:

/*
 * Description:
 * Function that sends a given command to CONTROL ECU
*/
static void APP_sendCommand(uint8 a_command){
    3a3e:	df 93       	push	r29
    3a40:	cf 93       	push	r28
    3a42:	0f 92       	push	r0
    3a44:	cd b7       	in	r28, 0x3d	; 61
    3a46:	de b7       	in	r29, 0x3e	; 62
    3a48:	89 83       	std	Y+1, r24	; 0x01
	/*Acknowledge that sender (HMI ECU) is ready to send COMMAND*/
	USART_sendByte(USART_SENDER_READY_BYTE);
    3a4a:	86 e6       	ldi	r24, 0x66	; 102
    3a4c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <USART_sendByte>

	while( USART_receiveByte() != USART_RECEIVER_READY_BYTE){
    3a50:	0e 94 16 07 	call	0xe2c	; 0xe2c <USART_receiveByte>
    3a54:	86 36       	cpi	r24, 0x66	; 102
    3a56:	e1 f7       	brne	.-8      	; 0x3a50 <APP_sendCommand+0x12>
		; /*wait until the receiver (CONTROL ECU) is ready to receive the COMMAND*/
	}

	USART_sendByte(a_command); /*send a command to signal the door unlocking sequence*/
    3a58:	89 81       	ldd	r24, Y+1	; 0x01
    3a5a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <USART_sendByte>
}
    3a5e:	0f 90       	pop	r0
    3a60:	cf 91       	pop	r28
    3a62:	df 91       	pop	r29
    3a64:	08 95       	ret

00003a66 <APP_welcomeScreen>:
/*
 * Description:
 * Display welcome message at program start.
 * */
void APP_welcomeScreen(void)
{
    3a66:	df 93       	push	r29
    3a68:	cf 93       	push	r28
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
    3a6e:	6c 97       	sbiw	r28, 0x1c	; 28
    3a70:	0f b6       	in	r0, 0x3f	; 63
    3a72:	f8 94       	cli
    3a74:	de bf       	out	0x3e, r29	; 62
    3a76:	0f be       	out	0x3f, r0	; 63
    3a78:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_CURSOR_BLINK);
    3a7a:	8f e0       	ldi	r24, 0x0F	; 15
    3a7c:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>
	LCD_moveCursor(0, 3);
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	63 e0       	ldi	r22, 0x03	; 3
    3a84:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_moveCursor>
	LCD_writeString("DOOR LOCK SECURITY SYSTEM", SCREEN_WRITE_DELAY);
    3a88:	83 e9       	ldi	r24, 0x93	; 147
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	68 e2       	ldi	r22, 0x28	; 40
    3a8e:	70 e0       	ldi	r23, 0x00	; 0
    3a90:	0e 94 b9 18 	call	0x3172	; 0x3172 <LCD_writeString>
	LCD_moveCursor(1, 10);
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	6a e0       	ldi	r22, 0x0A	; 10
    3a98:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_moveCursor>
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	90 e8       	ldi	r25, 0x80	; 128
    3aa0:	ab e3       	ldi	r26, 0x3B	; 59
    3aa2:	b4 e4       	ldi	r27, 0x44	; 68
    3aa4:	89 8f       	std	Y+25, r24	; 0x19
    3aa6:	9a 8f       	std	Y+26, r25	; 0x1a
    3aa8:	ab 8f       	std	Y+27, r26	; 0x1b
    3aaa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aac:	69 8d       	ldd	r22, Y+25	; 0x19
    3aae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ab0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ab2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	4a ef       	ldi	r20, 0xFA	; 250
    3aba:	54 e4       	ldi	r21, 0x44	; 68
    3abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	8d 8b       	std	Y+21, r24	; 0x15
    3ac6:	9e 8b       	std	Y+22, r25	; 0x16
    3ac8:	af 8b       	std	Y+23, r26	; 0x17
    3aca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3acc:	6d 89       	ldd	r22, Y+21	; 0x15
    3ace:	7e 89       	ldd	r23, Y+22	; 0x16
    3ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ad2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	40 e8       	ldi	r20, 0x80	; 128
    3ada:	5f e3       	ldi	r21, 0x3F	; 63
    3adc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ae0:	88 23       	and	r24, r24
    3ae2:	2c f4       	brge	.+10     	; 0x3aee <APP_welcomeScreen+0x88>
		__ticks = 1;
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	9c 8b       	std	Y+20, r25	; 0x14
    3aea:	8b 8b       	std	Y+19, r24	; 0x13
    3aec:	3f c0       	rjmp	.+126    	; 0x3b6c <APP_welcomeScreen+0x106>
	else if (__tmp > 65535)
    3aee:	6d 89       	ldd	r22, Y+21	; 0x15
    3af0:	7e 89       	ldd	r23, Y+22	; 0x16
    3af2:	8f 89       	ldd	r24, Y+23	; 0x17
    3af4:	98 8d       	ldd	r25, Y+24	; 0x18
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	3f ef       	ldi	r19, 0xFF	; 255
    3afa:	4f e7       	ldi	r20, 0x7F	; 127
    3afc:	57 e4       	ldi	r21, 0x47	; 71
    3afe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b02:	18 16       	cp	r1, r24
    3b04:	4c f5       	brge	.+82     	; 0x3b58 <APP_welcomeScreen+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b06:	69 8d       	ldd	r22, Y+25	; 0x19
    3b08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	40 e2       	ldi	r20, 0x20	; 32
    3b14:	51 e4       	ldi	r21, 0x41	; 65
    3b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	bc 01       	movw	r22, r24
    3b20:	cd 01       	movw	r24, r26
    3b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	9c 8b       	std	Y+20, r25	; 0x14
    3b2c:	8b 8b       	std	Y+19, r24	; 0x13
    3b2e:	0f c0       	rjmp	.+30     	; 0x3b4e <APP_welcomeScreen+0xe8>
    3b30:	88 ec       	ldi	r24, 0xC8	; 200
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	9a 8b       	std	Y+18, r25	; 0x12
    3b36:	89 8b       	std	Y+17, r24	; 0x11
    3b38:	89 89       	ldd	r24, Y+17	; 0x11
    3b3a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b3c:	01 97       	sbiw	r24, 0x01	; 1
    3b3e:	f1 f7       	brne	.-4      	; 0x3b3c <APP_welcomeScreen+0xd6>
    3b40:	9a 8b       	std	Y+18, r25	; 0x12
    3b42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b44:	8b 89       	ldd	r24, Y+19	; 0x13
    3b46:	9c 89       	ldd	r25, Y+20	; 0x14
    3b48:	01 97       	sbiw	r24, 0x01	; 1
    3b4a:	9c 8b       	std	Y+20, r25	; 0x14
    3b4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b50:	9c 89       	ldd	r25, Y+20	; 0x14
    3b52:	00 97       	sbiw	r24, 0x00	; 0
    3b54:	69 f7       	brne	.-38     	; 0x3b30 <APP_welcomeScreen+0xca>
    3b56:	14 c0       	rjmp	.+40     	; 0x3b80 <APP_welcomeScreen+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b58:	6d 89       	ldd	r22, Y+21	; 0x15
    3b5a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b5c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b5e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	9c 8b       	std	Y+20, r25	; 0x14
    3b6a:	8b 8b       	std	Y+19, r24	; 0x13
    3b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b70:	98 8b       	std	Y+16, r25	; 0x10
    3b72:	8f 87       	std	Y+15, r24	; 0x0f
    3b74:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b76:	98 89       	ldd	r25, Y+16	; 0x10
    3b78:	01 97       	sbiw	r24, 0x01	; 1
    3b7a:	f1 f7       	brne	.-4      	; 0x3b78 <APP_welcomeScreen+0x112>
    3b7c:	98 8b       	std	Y+16, r25	; 0x10
    3b7e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(750);
	LCD_writeString("By: Marwan", SCREEN_WRITE_DELAY);
    3b80:	8d ea       	ldi	r24, 0xAD	; 173
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	68 e2       	ldi	r22, 0x28	; 40
    3b86:	70 e0       	ldi	r23, 0x00	; 0
    3b88:	0e 94 b9 18 	call	0x3172	; 0x3172 <LCD_writeString>
	LCD_sendCommand(LCD_CURSOR_OFF);
    3b8c:	8c e0       	ldi	r24, 0x0C	; 12
    3b8e:	0e 94 13 14 	call	0x2826	; 0x2826 <LCD_sendCommand>
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	90 e4       	ldi	r25, 0x40	; 64
    3b96:	ac e9       	ldi	r26, 0x9C	; 156
    3b98:	b4 e4       	ldi	r27, 0x44	; 68
    3b9a:	8b 87       	std	Y+11, r24	; 0x0b
    3b9c:	9c 87       	std	Y+12, r25	; 0x0c
    3b9e:	ad 87       	std	Y+13, r26	; 0x0d
    3ba0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	4a ef       	ldi	r20, 0xFA	; 250
    3bb0:	54 e4       	ldi	r21, 0x44	; 68
    3bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	8f 83       	std	Y+7, r24	; 0x07
    3bbc:	98 87       	std	Y+8, r25	; 0x08
    3bbe:	a9 87       	std	Y+9, r26	; 0x09
    3bc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc4:	78 85       	ldd	r23, Y+8	; 0x08
    3bc6:	89 85       	ldd	r24, Y+9	; 0x09
    3bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e8       	ldi	r20, 0x80	; 128
    3bd0:	5f e3       	ldi	r21, 0x3F	; 63
    3bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bd6:	88 23       	and	r24, r24
    3bd8:	2c f4       	brge	.+10     	; 0x3be4 <APP_welcomeScreen+0x17e>
		__ticks = 1;
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	9e 83       	std	Y+6, r25	; 0x06
    3be0:	8d 83       	std	Y+5, r24	; 0x05
    3be2:	3f c0       	rjmp	.+126    	; 0x3c62 <APP_welcomeScreen+0x1fc>
	else if (__tmp > 65535)
    3be4:	6f 81       	ldd	r22, Y+7	; 0x07
    3be6:	78 85       	ldd	r23, Y+8	; 0x08
    3be8:	89 85       	ldd	r24, Y+9	; 0x09
    3bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	3f ef       	ldi	r19, 0xFF	; 255
    3bf0:	4f e7       	ldi	r20, 0x7F	; 127
    3bf2:	57 e4       	ldi	r21, 0x47	; 71
    3bf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bf8:	18 16       	cp	r1, r24
    3bfa:	4c f5       	brge	.+82     	; 0x3c4e <APP_welcomeScreen+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	40 e2       	ldi	r20, 0x20	; 32
    3c0a:	51 e4       	ldi	r21, 0x41	; 65
    3c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	bc 01       	movw	r22, r24
    3c16:	cd 01       	movw	r24, r26
    3c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	9e 83       	std	Y+6, r25	; 0x06
    3c22:	8d 83       	std	Y+5, r24	; 0x05
    3c24:	0f c0       	rjmp	.+30     	; 0x3c44 <APP_welcomeScreen+0x1de>
    3c26:	88 ec       	ldi	r24, 0xC8	; 200
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	9c 83       	std	Y+4, r25	; 0x04
    3c2c:	8b 83       	std	Y+3, r24	; 0x03
    3c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c30:	9c 81       	ldd	r25, Y+4	; 0x04
    3c32:	01 97       	sbiw	r24, 0x01	; 1
    3c34:	f1 f7       	brne	.-4      	; 0x3c32 <APP_welcomeScreen+0x1cc>
    3c36:	9c 83       	std	Y+4, r25	; 0x04
    3c38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c3e:	01 97       	sbiw	r24, 0x01	; 1
    3c40:	9e 83       	std	Y+6, r25	; 0x06
    3c42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c44:	8d 81       	ldd	r24, Y+5	; 0x05
    3c46:	9e 81       	ldd	r25, Y+6	; 0x06
    3c48:	00 97       	sbiw	r24, 0x00	; 0
    3c4a:	69 f7       	brne	.-38     	; 0x3c26 <APP_welcomeScreen+0x1c0>
    3c4c:	14 c0       	rjmp	.+40     	; 0x3c76 <APP_welcomeScreen+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c50:	78 85       	ldd	r23, Y+8	; 0x08
    3c52:	89 85       	ldd	r24, Y+9	; 0x09
    3c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	9e 83       	std	Y+6, r25	; 0x06
    3c60:	8d 83       	std	Y+5, r24	; 0x05
    3c62:	8d 81       	ldd	r24, Y+5	; 0x05
    3c64:	9e 81       	ldd	r25, Y+6	; 0x06
    3c66:	9a 83       	std	Y+2, r25	; 0x02
    3c68:	89 83       	std	Y+1, r24	; 0x01
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
    3c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6e:	01 97       	sbiw	r24, 0x01	; 1
    3c70:	f1 f7       	brne	.-4      	; 0x3c6e <APP_welcomeScreen+0x208>
    3c72:	9a 83       	std	Y+2, r25	; 0x02
    3c74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1250);
	LCD_clearScreen();
    3c76:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <LCD_clearScreen>
}
    3c7a:	6c 96       	adiw	r28, 0x1c	; 28
    3c7c:	0f b6       	in	r0, 0x3f	; 63
    3c7e:	f8 94       	cli
    3c80:	de bf       	out	0x3e, r29	; 62
    3c82:	0f be       	out	0x3f, r0	; 63
    3c84:	cd bf       	out	0x3d, r28	; 61
    3c86:	cf 91       	pop	r28
    3c88:	df 91       	pop	r29
    3c8a:	08 95       	ret

00003c8c <APP_setNewPassword>:
 * 2- Sends the  two passwords to the CONTROL ECU
 * 3- It inquires the status of these password.
 * The function is executed in case of a New password or changing an existing one.
*/
void APP_setNewPassword(void)
{
    3c8c:	df 93       	push	r29
    3c8e:	cf 93       	push	r28
    3c90:	cd b7       	in	r28, 0x3d	; 61
    3c92:	de b7       	in	r29, 0x3e	; 62
	/*ask the user to initialize a password until the two entered passwords matches*/
	do
	{
		/*the new password*/
		APP_getPassword("Please Enter A New Password:"); 	/*get the password input from user*/
    3c94:	88 eb       	ldi	r24, 0xB8	; 184
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	0e 94 96 1b 	call	0x372c	; 0x372c <APP_getPassword>
		APP_sendPassword();
    3c9c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <APP_sendPassword>

		/*confirm the new password*/
		APP_getPassword("Please Re-enter The Password:"); 	/*get the password input from user*/
    3ca0:	85 ed       	ldi	r24, 0xD5	; 213
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	0e 94 96 1b 	call	0x372c	; 0x372c <APP_getPassword>
		APP_sendPassword();
    3ca8:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <APP_sendPassword>
	}
	while(APP_passwordEnquire() == UNMATCHING_PASSWORDS);
    3cac:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <APP_passwordEnquire>
    3cb0:	81 30       	cpi	r24, 0x01	; 1
    3cb2:	81 f3       	breq	.-32     	; 0x3c94 <APP_setNewPassword+0x8>
}
    3cb4:	cf 91       	pop	r28
    3cb6:	df 91       	pop	r29
    3cb8:	08 95       	ret

00003cba <APP_mainMenu>:
 * Displays the main menu: prompts the user to make a choice.
 * Checks whether the password entered by user is correct or not.
 * returns the choice made by the user.
*/
APP_MainMenuData APP_mainMenu(void)
{
    3cba:	df 93       	push	r29
    3cbc:	cf 93       	push	r28
    3cbe:	00 d0       	rcall	.+0      	; 0x3cc0 <APP_mainMenu+0x6>
    3cc0:	cd b7       	in	r28, 0x3d	; 61
    3cc2:	de b7       	in	r29, 0x3e	; 62
	uint8 key;
	LCD_displayStringRowColumn(0, 0, "(+): Open The Door.");
    3cc4:	23 ef       	ldi	r18, 0xF3	; 243
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	60 e0       	ldi	r22, 0x00	; 0
    3ccc:	a9 01       	movw	r20, r18
    3cce:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "(-): Change The Password.");
    3cd2:	27 e0       	ldi	r18, 0x07	; 7
    3cd4:	31 e0       	ldi	r19, 0x01	; 1
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	60 e0       	ldi	r22, 0x00	; 0
    3cda:	a9 01       	movw	r20, r18
    3cdc:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_displayStringRowColumn>

	/*wait for user to choose whether to open the door or change the password*/
	do
	{
		key = KEYPAD_getPressedKey();
    3ce0:	0e 94 9f 1a 	call	0x353e	; 0x353e <KEYPAD_getPressedKey>
    3ce4:	89 83       	std	Y+1, r24	; 0x01
	}
	while(key != '+' && key != '-');
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	8b 32       	cpi	r24, 0x2B	; 43
    3cea:	19 f0       	breq	.+6      	; 0x3cf2 <APP_mainMenu+0x38>
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
    3cee:	8d 32       	cpi	r24, 0x2D	; 45
    3cf0:	b9 f7       	brne	.-18     	; 0x3ce0 <APP_mainMenu+0x26>

	LCD_clearScreen();
    3cf2:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <LCD_clearScreen>

	do
	{
		g_wrong_passwords++;
    3cf6:	80 91 ef 02 	lds	r24, 0x02EF
    3cfa:	8f 5f       	subi	r24, 0xFF	; 255
    3cfc:	80 93 ef 02 	sts	0x02EF, r24
		if(g_wrong_passwords > MAX_WRONG_PASSWORDS) /*the user has up to 3 trails*/
    3d00:	80 91 ef 02 	lds	r24, 0x02EF
    3d04:	84 30       	cpi	r24, 0x04	; 4
    3d06:	18 f0       	brcs	.+6      	; 0x3d0e <APP_mainMenu+0x54>
		{
			return ALARM;
    3d08:	82 e0       	ldi	r24, 0x02	; 2
    3d0a:	8a 83       	std	Y+2, r24	; 0x02
    3d0c:	13 c0       	rjmp	.+38     	; 0x3d34 <APP_mainMenu+0x7a>
		}
		APP_getPassword("Please Enter The Password:");		/*ask the user to enter a password*/
    3d0e:	81 e2       	ldi	r24, 0x21	; 33
    3d10:	91 e0       	ldi	r25, 0x01	; 1
    3d12:	0e 94 96 1b 	call	0x372c	; 0x372c <APP_getPassword>
		APP_sendPassword();								/*send it to CONTROL ECU to be checked*/
    3d16:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <APP_sendPassword>
		}
	while(APP_passwordEnquire() == UNMATCHING_PASSWORDS);
    3d1a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <APP_passwordEnquire>
    3d1e:	81 30       	cpi	r24, 0x01	; 1
    3d20:	51 f3       	breq	.-44     	; 0x3cf6 <APP_mainMenu+0x3c>

	/*reset the counter if a correct password is entered*/
	g_wrong_passwords = 0;
    3d22:	10 92 ef 02 	sts	0x02EF, r1

	if (key == '-')
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
    3d28:	8d 32       	cpi	r24, 0x2D	; 45
    3d2a:	11 f4       	brne	.+4      	; 0x3d30 <APP_mainMenu+0x76>
	{
		return CHANGE_PASS;
    3d2c:	1a 82       	std	Y+2, r1	; 0x02
    3d2e:	02 c0       	rjmp	.+4      	; 0x3d34 <APP_mainMenu+0x7a>

	}
	else
	{
		return DOOR_OPEN;
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	8a 83       	std	Y+2, r24	; 0x02
    3d34:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    3d36:	0f 90       	pop	r0
    3d38:	0f 90       	pop	r0
    3d3a:	cf 91       	pop	r28
    3d3c:	df 91       	pop	r29
    3d3e:	08 95       	ret

00003d40 <APP_timerTickIncrement>:
/*
 * Description :
 * Callback function  that increments a global variable g_timer1_tick
 */
void APP_timerTickIncrement(void)
{
    3d40:	df 93       	push	r29
    3d42:	cf 93       	push	r28
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
	g_timer1_tick++;
    3d48:	80 91 f0 02 	lds	r24, 0x02F0
    3d4c:	8f 5f       	subi	r24, 0xFF	; 255
    3d4e:	80 93 f0 02 	sts	0x02F0, r24
}
    3d52:	cf 91       	pop	r28
    3d54:	df 91       	pop	r29
    3d56:	08 95       	ret

00003d58 <APP_doorOpenSequence>:
 * Sequence of steps that HMI_ECU does when opening the door:
 * 1- Send the door open command command to CONTROL ECU.
 * 2- Display the door status on LCD.
*/
void APP_doorOpenSequence(TIMER_ConfigType * const a_timer1_config)
{
    3d58:	df 93       	push	r29
    3d5a:	cf 93       	push	r28
    3d5c:	00 d0       	rcall	.+0      	; 0x3d5e <APP_doorOpenSequence+0x6>
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	9a 83       	std	Y+2, r25	; 0x02
    3d64:	89 83       	std	Y+1, r24	; 0x01
	APP_sendCommand(OPEN_DOOR_COMMAND);
    3d66:	80 e1       	ldi	r24, 0x10	; 16
    3d68:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <APP_sendCommand>

	/*Display the door status on LCD*/
	/*Display the door opening string for 15 seconds*/
	LCD_displayStringRowColumn(0, 0, "The Door is Opening...");
    3d6c:	2c e3       	ldi	r18, 0x3C	; 60
    3d6e:	31 e0       	ldi	r19, 0x01	; 1
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	60 e0       	ldi	r22, 0x00	; 0
    3d74:	a9 01       	movw	r20, r18
    3d76:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_displayStringRowColumn>
	a_timer1_config->timer_mode_data.ctc_compare_value = TIMER1_COMPARE_VALUE_7SEC;
    3d7a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d7c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d7e:	82 ee       	ldi	r24, 0xE2	; 226
    3d80:	94 ee       	ldi	r25, 0xE4	; 228
    3d82:	91 83       	std	Z+1, r25	; 0x01
    3d84:	80 83       	st	Z, r24
	TIMER_init(a_timer1_config);
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8a:	0e 94 c0 08 	call	0x1180	; 0x1180 <TIMER_init>
	while(g_timer1_tick < 2);
    3d8e:	80 91 f0 02 	lds	r24, 0x02F0
    3d92:	82 30       	cpi	r24, 0x02	; 2
    3d94:	e0 f3       	brcs	.-8      	; 0x3d8e <APP_doorOpenSequence+0x36>

	/*Display the door is opened for 3 seconds*/
	LCD_displayStringRowColumn(0, 0, "The Door is Opened !  ");
    3d96:	23 e5       	ldi	r18, 0x53	; 83
    3d98:	31 e0       	ldi	r19, 0x01	; 1
    3d9a:	80 e0       	ldi	r24, 0x00	; 0
    3d9c:	60 e0       	ldi	r22, 0x00	; 0
    3d9e:	a9 01       	movw	r20, r18
    3da0:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_displayStringRowColumn>
	TIMER_changeCompareValue(TIMER1_ID, TIMER1_COMPARE_VALUE_3SEC);
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	6e e8       	ldi	r22, 0x8E	; 142
    3da8:	7b e5       	ldi	r23, 0x5B	; 91
    3daa:	0e 94 53 09 	call	0x12a6	; 0x12a6 <TIMER_changeCompareValue>
	while(g_timer1_tick < 3);
    3dae:	80 91 f0 02 	lds	r24, 0x02F0
    3db2:	83 30       	cpi	r24, 0x03	; 3
    3db4:	e0 f3       	brcs	.-8      	; 0x3dae <APP_doorOpenSequence+0x56>

	/*Display the door closing string for 15 seconds*/
	LCD_displayStringRowColumn(0, 0, "The Door is Closing...");
    3db6:	2a e6       	ldi	r18, 0x6A	; 106
    3db8:	31 e0       	ldi	r19, 0x01	; 1
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	a9 01       	movw	r20, r18
    3dc0:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_displayStringRowColumn>
	TIMER_changeCompareValue(TIMER1_ID, TIMER1_COMPARE_VALUE_7SEC);
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	62 ee       	ldi	r22, 0xE2	; 226
    3dc8:	74 ee       	ldi	r23, 0xE4	; 228
    3dca:	0e 94 53 09 	call	0x12a6	; 0x12a6 <TIMER_changeCompareValue>
	while(g_timer1_tick < 5);
    3dce:	80 91 f0 02 	lds	r24, 0x02F0
    3dd2:	85 30       	cpi	r24, 0x05	; 5
    3dd4:	e0 f3       	brcs	.-8      	; 0x3dce <APP_doorOpenSequence+0x76>
	TIMER_deInit(TIMER1_ID);
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <TIMER_deInit>
	g_timer1_tick = 0;
    3ddc:	10 92 f0 02 	sts	0x02F0, r1
}
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	cf 91       	pop	r28
    3de6:	df 91       	pop	r29
    3de8:	08 95       	ret

00003dea <APP_changePasswordSequence>:
 * Description:
 * It sends command to CONTROL ECU to change the password.
 * It then gets the password and its confirmation from the user.
*/
void APP_changePasswordSequence()
{
    3dea:	df 93       	push	r29
    3dec:	cf 93       	push	r28
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	2e 97       	sbiw	r28, 0x0e	; 14
    3df4:	0f b6       	in	r0, 0x3f	; 63
    3df6:	f8 94       	cli
    3df8:	de bf       	out	0x3e, r29	; 62
    3dfa:	0f be       	out	0x3f, r0	; 63
    3dfc:	cd bf       	out	0x3d, r28	; 61
	APP_sendCommand(CHANGE_PASSWORD_COMMAND); /*send command to CONTROL ECU*/
    3dfe:	81 e1       	ldi	r24, 0x11	; 17
    3e00:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <APP_sendCommand>
	APP_setNewPassword(); /*get password and confirmation*/
    3e04:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <APP_setNewPassword>
	LCD_displayStringRowColumn(0, 0, "The New Password Is Now Active:)");
    3e08:	21 e8       	ldi	r18, 0x81	; 129
    3e0a:	31 e0       	ldi	r19, 0x01	; 1
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	60 e0       	ldi	r22, 0x00	; 0
    3e10:	a9 01       	movw	r20, r18
    3e12:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_displayStringRowColumn>
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	90 e8       	ldi	r25, 0x80	; 128
    3e1a:	ab eb       	ldi	r26, 0xBB	; 187
    3e1c:	b4 e4       	ldi	r27, 0x44	; 68
    3e1e:	8b 87       	std	Y+11, r24	; 0x0b
    3e20:	9c 87       	std	Y+12, r25	; 0x0c
    3e22:	ad 87       	std	Y+13, r26	; 0x0d
    3e24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	4a ef       	ldi	r20, 0xFA	; 250
    3e34:	54 e4       	ldi	r21, 0x44	; 68
    3e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3a:	dc 01       	movw	r26, r24
    3e3c:	cb 01       	movw	r24, r22
    3e3e:	8f 83       	std	Y+7, r24	; 0x07
    3e40:	98 87       	std	Y+8, r25	; 0x08
    3e42:	a9 87       	std	Y+9, r26	; 0x09
    3e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e46:	6f 81       	ldd	r22, Y+7	; 0x07
    3e48:	78 85       	ldd	r23, Y+8	; 0x08
    3e4a:	89 85       	ldd	r24, Y+9	; 0x09
    3e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	40 e8       	ldi	r20, 0x80	; 128
    3e54:	5f e3       	ldi	r21, 0x3F	; 63
    3e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e5a:	88 23       	and	r24, r24
    3e5c:	2c f4       	brge	.+10     	; 0x3e68 <APP_changePasswordSequence+0x7e>
		__ticks = 1;
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	9e 83       	std	Y+6, r25	; 0x06
    3e64:	8d 83       	std	Y+5, r24	; 0x05
    3e66:	3f c0       	rjmp	.+126    	; 0x3ee6 <APP_changePasswordSequence+0xfc>
	else if (__tmp > 65535)
    3e68:	6f 81       	ldd	r22, Y+7	; 0x07
    3e6a:	78 85       	ldd	r23, Y+8	; 0x08
    3e6c:	89 85       	ldd	r24, Y+9	; 0x09
    3e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e70:	20 e0       	ldi	r18, 0x00	; 0
    3e72:	3f ef       	ldi	r19, 0xFF	; 255
    3e74:	4f e7       	ldi	r20, 0x7F	; 127
    3e76:	57 e4       	ldi	r21, 0x47	; 71
    3e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e7c:	18 16       	cp	r1, r24
    3e7e:	4c f5       	brge	.+82     	; 0x3ed2 <APP_changePasswordSequence+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	40 e2       	ldi	r20, 0x20	; 32
    3e8e:	51 e4       	ldi	r21, 0x41	; 65
    3e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	bc 01       	movw	r22, r24
    3e9a:	cd 01       	movw	r24, r26
    3e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	9e 83       	std	Y+6, r25	; 0x06
    3ea6:	8d 83       	std	Y+5, r24	; 0x05
    3ea8:	0f c0       	rjmp	.+30     	; 0x3ec8 <APP_changePasswordSequence+0xde>
    3eaa:	88 ec       	ldi	r24, 0xC8	; 200
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	9c 83       	std	Y+4, r25	; 0x04
    3eb0:	8b 83       	std	Y+3, r24	; 0x03
    3eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	f1 f7       	brne	.-4      	; 0x3eb6 <APP_changePasswordSequence+0xcc>
    3eba:	9c 83       	std	Y+4, r25	; 0x04
    3ebc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec2:	01 97       	sbiw	r24, 0x01	; 1
    3ec4:	9e 83       	std	Y+6, r25	; 0x06
    3ec6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eca:	9e 81       	ldd	r25, Y+6	; 0x06
    3ecc:	00 97       	sbiw	r24, 0x00	; 0
    3ece:	69 f7       	brne	.-38     	; 0x3eaa <APP_changePasswordSequence+0xc0>
    3ed0:	14 c0       	rjmp	.+40     	; 0x3efa <APP_changePasswordSequence+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed4:	78 85       	ldd	r23, Y+8	; 0x08
    3ed6:	89 85       	ldd	r24, Y+9	; 0x09
    3ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	9e 83       	std	Y+6, r25	; 0x06
    3ee4:	8d 83       	std	Y+5, r24	; 0x05
    3ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eea:	9a 83       	std	Y+2, r25	; 0x02
    3eec:	89 83       	std	Y+1, r24	; 0x01
    3eee:	89 81       	ldd	r24, Y+1	; 0x01
    3ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	f1 f7       	brne	.-4      	; 0x3ef2 <APP_changePasswordSequence+0x108>
    3ef6:	9a 83       	std	Y+2, r25	; 0x02
    3ef8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	LCD_clearScreen();
    3efa:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <LCD_clearScreen>
}
    3efe:	2e 96       	adiw	r28, 0x0e	; 14
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	cf 91       	pop	r28
    3f0c:	df 91       	pop	r29
    3f0e:	08 95       	ret

00003f10 <APP_alarmSequence>:
 * Description:
 * Sequence of steps that HMI_ECU does when an alarm is triggered.
 * It's executed when the global wrong password counter is 3.
*/
void APP_alarmSequence(TIMER_ConfigType * const a_timer1_config)
{
    3f10:	df 93       	push	r29
    3f12:	cf 93       	push	r28
    3f14:	00 d0       	rcall	.+0      	; 0x3f16 <APP_alarmSequence+0x6>
    3f16:	cd b7       	in	r28, 0x3d	; 61
    3f18:	de b7       	in	r29, 0x3e	; 62
    3f1a:	9a 83       	std	Y+2, r25	; 0x02
    3f1c:	89 83       	std	Y+1, r24	; 0x01
	g_wrong_passwords = 0;/*reset wrong passwords global counter*/
    3f1e:	10 92 ef 02 	sts	0x02EF, r1

	/*display error message on LCD screen*/
	LCD_clearScreen();
    3f22:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "ERROR: TOO MANY ATTEMPTS !");
    3f26:	22 ea       	ldi	r18, 0xA2	; 162
    3f28:	31 e0       	ldi	r19, 0x01	; 1
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	60 e0       	ldi	r22, 0x00	; 0
    3f2e:	a9 01       	movw	r20, r18
    3f30:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "DOOR IS LOCKED FOR 1 MIN..");
    3f34:	2d eb       	ldi	r18, 0xBD	; 189
    3f36:	31 e0       	ldi	r19, 0x01	; 1
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	60 e0       	ldi	r22, 0x00	; 0
    3f3c:	a9 01       	movw	r20, r18
    3f3e:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_displayStringRowColumn>

	/*display the message for 1 minute via timer 1*/
	a_timer1_config->timer_mode_data.ctc_compare_value = TIMER1_COMPARE_VALUE_7SEC;
    3f42:	e9 81       	ldd	r30, Y+1	; 0x01
    3f44:	fa 81       	ldd	r31, Y+2	; 0x02
    3f46:	82 ee       	ldi	r24, 0xE2	; 226
    3f48:	94 ee       	ldi	r25, 0xE4	; 228
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	80 83       	st	Z, r24
	TIMER_init(a_timer1_config);
    3f4e:	89 81       	ldd	r24, Y+1	; 0x01
    3f50:	9a 81       	ldd	r25, Y+2	; 0x02
    3f52:	0e 94 c0 08 	call	0x1180	; 0x1180 <TIMER_init>
	while(g_timer1_tick < 8);
    3f56:	80 91 f0 02 	lds	r24, 0x02F0
    3f5a:	88 30       	cpi	r24, 0x08	; 8
    3f5c:	e0 f3       	brcs	.-8      	; 0x3f56 <APP_alarmSequence+0x46>

	LCD_clearScreen(); /*clear the screen*/
    3f5e:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <LCD_clearScreen>
	/*de-initialize timer 1*/
	g_timer1_tick = 0;
    3f62:	10 92 f0 02 	sts	0x02F0, r1
	TIMER_deInit(TIMER1_ID);
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <TIMER_deInit>
}
    3f6c:	0f 90       	pop	r0
    3f6e:	0f 90       	pop	r0
    3f70:	cf 91       	pop	r28
    3f72:	df 91       	pop	r29
    3f74:	08 95       	ret

00003f76 <main>:
 *******************************************************************************/

#include "APP/app.h"

int main(void)
{
    3f76:	df 93       	push	r29
    3f78:	cf 93       	push	r28
    3f7a:	cd b7       	in	r28, 0x3d	; 61
    3f7c:	de b7       	in	r29, 0x3e	; 62
    3f7e:	63 97       	sbiw	r28, 0x13	; 19
    3f80:	0f b6       	in	r0, 0x3f	; 63
    3f82:	f8 94       	cli
    3f84:	de bf       	out	0x3e, r29	; 62
    3f86:	0f be       	out	0x3f, r0	; 63
    3f88:	cd bf       	out	0x3d, r28	; 61
	/*variable to store the user choice */
	uint8 choice = 0;
    3f8a:	19 82       	std	Y+1, r1	; 0x01
			.usart_baud_rate = 9600,
			.usart_bit_mode = DATA_BITS_8,
			.usart_stop_bits = ONE_BIT,
			.usart_mode = ASYNCHRONOUS,
			.usart_parity = PARITY_DISABLED
	};
    3f8c:	89 e0       	ldi	r24, 0x09	; 9
    3f8e:	fe 01       	movw	r30, r28
    3f90:	32 96       	adiw	r30, 0x02	; 2
    3f92:	df 01       	movw	r26, r30
    3f94:	28 2f       	mov	r18, r24
    3f96:	1d 92       	st	X+, r1
    3f98:	2a 95       	dec	r18
    3f9a:	e9 f7       	brne	.-6      	; 0x3f96 <main+0x20>
    3f9c:	80 e8       	ldi	r24, 0x80	; 128
    3f9e:	95 e2       	ldi	r25, 0x25	; 37
    3fa0:	a0 e0       	ldi	r26, 0x00	; 0
    3fa2:	b0 e0       	ldi	r27, 0x00	; 0
    3fa4:	8a 83       	std	Y+2, r24	; 0x02
    3fa6:	9b 83       	std	Y+3, r25	; 0x03
    3fa8:	ac 83       	std	Y+4, r26	; 0x04
    3faa:	bd 83       	std	Y+5, r27	; 0x05
    3fac:	83 e0       	ldi	r24, 0x03	; 3
    3fae:	8e 83       	std	Y+6, r24	; 0x06
			.timer_id = TIMER1_ID,
			.timer_mode = COMPARE_MODE,
			.timer_mode_data.ctc_compare_value = TIMER1_COMPARE_VALUE_7SEC,
			.timer_prescaler.timer1 = TIMER1_F_CPU_1024,
			.timer_ocx_pin_behavior = DISCONNECT_OCX,
	};
    3fb0:	87 e0       	ldi	r24, 0x07	; 7
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	3b 96       	adiw	r30, 0x0b	; 11
    3fb6:	df 01       	movw	r26, r30
    3fb8:	28 2f       	mov	r18, r24
    3fba:	1d 92       	st	X+, r1
    3fbc:	2a 95       	dec	r18
    3fbe:	e9 f7       	brne	.-6      	; 0x3fba <main+0x44>
    3fc0:	82 ee       	ldi	r24, 0xE2	; 226
    3fc2:	94 ee       	ldi	r25, 0xE4	; 228
    3fc4:	9c 87       	std	Y+12, r25	; 0x0c
    3fc6:	8b 87       	std	Y+11, r24	; 0x0b
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	8d 87       	std	Y+13, r24	; 0x0d
    3fcc:	82 e0       	ldi	r24, 0x02	; 2
    3fce:	8e 87       	std	Y+14, r24	; 0x0e
    3fd0:	85 e0       	ldi	r24, 0x05	; 5
    3fd2:	8f 87       	std	Y+15, r24	; 0x0f

	TIMER_setCallBackFunc(TIMER1_ID, APP_timerTickIncrement);	/*set timer1 call back function*/
    3fd4:	20 ea       	ldi	r18, 0xA0	; 160
    3fd6:	3e e1       	ldi	r19, 0x1E	; 30
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	b9 01       	movw	r22, r18
    3fdc:	0e 94 1a 09 	call	0x1234	; 0x1234 <TIMER_setCallBackFunc>

	sei(); 		/*enable global interrupt bit (I-bit)*/
    3fe0:	78 94       	sei

	/*Peripherals & Modules Initialization*/
	USART_init(&uart_config);
    3fe2:	ce 01       	movw	r24, r28
    3fe4:	02 96       	adiw	r24, 0x02	; 2
    3fe6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <USART_init>
	LCD_init();
    3fea:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_init>

	/*Display welcome message at program start.*/
	APP_welcomeScreen();
    3fee:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <APP_welcomeScreen>
	/*Set a new password at the beginning of the program*/
	APP_setNewPassword();
    3ff2:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <APP_setNewPassword>

	while(1)
	{
		/*Get user choice*/
		choice = APP_mainMenu();
    3ff6:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <APP_mainMenu>
    3ffa:	89 83       	std	Y+1, r24	; 0x01

		switch (choice)
    3ffc:	89 81       	ldd	r24, Y+1	; 0x01
    3ffe:	a8 2f       	mov	r26, r24
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	bb 8b       	std	Y+19, r27	; 0x13
    4004:	aa 8b       	std	Y+18, r26	; 0x12
    4006:	2a 89       	ldd	r18, Y+18	; 0x12
    4008:	3b 89       	ldd	r19, Y+19	; 0x13
    400a:	21 30       	cpi	r18, 0x01	; 1
    400c:	31 05       	cpc	r19, r1
    400e:	51 f0       	breq	.+20     	; 0x4024 <main+0xae>
    4010:	8a 89       	ldd	r24, Y+18	; 0x12
    4012:	9b 89       	ldd	r25, Y+19	; 0x13
    4014:	82 30       	cpi	r24, 0x02	; 2
    4016:	91 05       	cpc	r25, r1
    4018:	69 f0       	breq	.+26     	; 0x4034 <main+0xbe>
    401a:	aa 89       	ldd	r26, Y+18	; 0x12
    401c:	bb 89       	ldd	r27, Y+19	; 0x13
    401e:	10 97       	sbiw	r26, 0x00	; 0
    4020:	31 f0       	breq	.+12     	; 0x402e <main+0xb8>
    4022:	e9 cf       	rjmp	.-46     	; 0x3ff6 <main+0x80>
		{
		case DOOR_OPEN:
			APP_doorOpenSequence(&timer1_config);
    4024:	ce 01       	movw	r24, r28
    4026:	0b 96       	adiw	r24, 0x0b	; 11
    4028:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <APP_doorOpenSequence>
    402c:	e4 cf       	rjmp	.-56     	; 0x3ff6 <main+0x80>
			break;
		case CHANGE_PASS:
			APP_changePasswordSequence();
    402e:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <APP_changePasswordSequence>
    4032:	e1 cf       	rjmp	.-62     	; 0x3ff6 <main+0x80>
			break;
		case ALARM :
			APP_alarmSequence(&timer1_config);
    4034:	ce 01       	movw	r24, r28
    4036:	0b 96       	adiw	r24, 0x0b	; 11
    4038:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <APP_alarmSequence>
    403c:	dc cf       	rjmp	.-72     	; 0x3ff6 <main+0x80>

0000403e <__mulsi3>:
    403e:	62 9f       	mul	r22, r18
    4040:	d0 01       	movw	r26, r0
    4042:	73 9f       	mul	r23, r19
    4044:	f0 01       	movw	r30, r0
    4046:	82 9f       	mul	r24, r18
    4048:	e0 0d       	add	r30, r0
    404a:	f1 1d       	adc	r31, r1
    404c:	64 9f       	mul	r22, r20
    404e:	e0 0d       	add	r30, r0
    4050:	f1 1d       	adc	r31, r1
    4052:	92 9f       	mul	r25, r18
    4054:	f0 0d       	add	r31, r0
    4056:	83 9f       	mul	r24, r19
    4058:	f0 0d       	add	r31, r0
    405a:	74 9f       	mul	r23, r20
    405c:	f0 0d       	add	r31, r0
    405e:	65 9f       	mul	r22, r21
    4060:	f0 0d       	add	r31, r0
    4062:	99 27       	eor	r25, r25
    4064:	72 9f       	mul	r23, r18
    4066:	b0 0d       	add	r27, r0
    4068:	e1 1d       	adc	r30, r1
    406a:	f9 1f       	adc	r31, r25
    406c:	63 9f       	mul	r22, r19
    406e:	b0 0d       	add	r27, r0
    4070:	e1 1d       	adc	r30, r1
    4072:	f9 1f       	adc	r31, r25
    4074:	bd 01       	movw	r22, r26
    4076:	cf 01       	movw	r24, r30
    4078:	11 24       	eor	r1, r1
    407a:	08 95       	ret

0000407c <__udivmodhi4>:
    407c:	aa 1b       	sub	r26, r26
    407e:	bb 1b       	sub	r27, r27
    4080:	51 e1       	ldi	r21, 0x11	; 17
    4082:	07 c0       	rjmp	.+14     	; 0x4092 <__udivmodhi4_ep>

00004084 <__udivmodhi4_loop>:
    4084:	aa 1f       	adc	r26, r26
    4086:	bb 1f       	adc	r27, r27
    4088:	a6 17       	cp	r26, r22
    408a:	b7 07       	cpc	r27, r23
    408c:	10 f0       	brcs	.+4      	; 0x4092 <__udivmodhi4_ep>
    408e:	a6 1b       	sub	r26, r22
    4090:	b7 0b       	sbc	r27, r23

00004092 <__udivmodhi4_ep>:
    4092:	88 1f       	adc	r24, r24
    4094:	99 1f       	adc	r25, r25
    4096:	5a 95       	dec	r21
    4098:	a9 f7       	brne	.-22     	; 0x4084 <__udivmodhi4_loop>
    409a:	80 95       	com	r24
    409c:	90 95       	com	r25
    409e:	bc 01       	movw	r22, r24
    40a0:	cd 01       	movw	r24, r26
    40a2:	08 95       	ret

000040a4 <__udivmodsi4>:
    40a4:	a1 e2       	ldi	r26, 0x21	; 33
    40a6:	1a 2e       	mov	r1, r26
    40a8:	aa 1b       	sub	r26, r26
    40aa:	bb 1b       	sub	r27, r27
    40ac:	fd 01       	movw	r30, r26
    40ae:	0d c0       	rjmp	.+26     	; 0x40ca <__udivmodsi4_ep>

000040b0 <__udivmodsi4_loop>:
    40b0:	aa 1f       	adc	r26, r26
    40b2:	bb 1f       	adc	r27, r27
    40b4:	ee 1f       	adc	r30, r30
    40b6:	ff 1f       	adc	r31, r31
    40b8:	a2 17       	cp	r26, r18
    40ba:	b3 07       	cpc	r27, r19
    40bc:	e4 07       	cpc	r30, r20
    40be:	f5 07       	cpc	r31, r21
    40c0:	20 f0       	brcs	.+8      	; 0x40ca <__udivmodsi4_ep>
    40c2:	a2 1b       	sub	r26, r18
    40c4:	b3 0b       	sbc	r27, r19
    40c6:	e4 0b       	sbc	r30, r20
    40c8:	f5 0b       	sbc	r31, r21

000040ca <__udivmodsi4_ep>:
    40ca:	66 1f       	adc	r22, r22
    40cc:	77 1f       	adc	r23, r23
    40ce:	88 1f       	adc	r24, r24
    40d0:	99 1f       	adc	r25, r25
    40d2:	1a 94       	dec	r1
    40d4:	69 f7       	brne	.-38     	; 0x40b0 <__udivmodsi4_loop>
    40d6:	60 95       	com	r22
    40d8:	70 95       	com	r23
    40da:	80 95       	com	r24
    40dc:	90 95       	com	r25
    40de:	9b 01       	movw	r18, r22
    40e0:	ac 01       	movw	r20, r24
    40e2:	bd 01       	movw	r22, r26
    40e4:	cf 01       	movw	r24, r30
    40e6:	08 95       	ret

000040e8 <__prologue_saves__>:
    40e8:	2f 92       	push	r2
    40ea:	3f 92       	push	r3
    40ec:	4f 92       	push	r4
    40ee:	5f 92       	push	r5
    40f0:	6f 92       	push	r6
    40f2:	7f 92       	push	r7
    40f4:	8f 92       	push	r8
    40f6:	9f 92       	push	r9
    40f8:	af 92       	push	r10
    40fa:	bf 92       	push	r11
    40fc:	cf 92       	push	r12
    40fe:	df 92       	push	r13
    4100:	ef 92       	push	r14
    4102:	ff 92       	push	r15
    4104:	0f 93       	push	r16
    4106:	1f 93       	push	r17
    4108:	cf 93       	push	r28
    410a:	df 93       	push	r29
    410c:	cd b7       	in	r28, 0x3d	; 61
    410e:	de b7       	in	r29, 0x3e	; 62
    4110:	ca 1b       	sub	r28, r26
    4112:	db 0b       	sbc	r29, r27
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	09 94       	ijmp

00004120 <__epilogue_restores__>:
    4120:	2a 88       	ldd	r2, Y+18	; 0x12
    4122:	39 88       	ldd	r3, Y+17	; 0x11
    4124:	48 88       	ldd	r4, Y+16	; 0x10
    4126:	5f 84       	ldd	r5, Y+15	; 0x0f
    4128:	6e 84       	ldd	r6, Y+14	; 0x0e
    412a:	7d 84       	ldd	r7, Y+13	; 0x0d
    412c:	8c 84       	ldd	r8, Y+12	; 0x0c
    412e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4130:	aa 84       	ldd	r10, Y+10	; 0x0a
    4132:	b9 84       	ldd	r11, Y+9	; 0x09
    4134:	c8 84       	ldd	r12, Y+8	; 0x08
    4136:	df 80       	ldd	r13, Y+7	; 0x07
    4138:	ee 80       	ldd	r14, Y+6	; 0x06
    413a:	fd 80       	ldd	r15, Y+5	; 0x05
    413c:	0c 81       	ldd	r16, Y+4	; 0x04
    413e:	1b 81       	ldd	r17, Y+3	; 0x03
    4140:	aa 81       	ldd	r26, Y+2	; 0x02
    4142:	b9 81       	ldd	r27, Y+1	; 0x01
    4144:	ce 0f       	add	r28, r30
    4146:	d1 1d       	adc	r29, r1
    4148:	0f b6       	in	r0, 0x3f	; 63
    414a:	f8 94       	cli
    414c:	de bf       	out	0x3e, r29	; 62
    414e:	0f be       	out	0x3f, r0	; 63
    4150:	cd bf       	out	0x3d, r28	; 61
    4152:	ed 01       	movw	r28, r26
    4154:	08 95       	ret

00004156 <itoa>:
    4156:	fb 01       	movw	r30, r22
    4158:	9f 01       	movw	r18, r30
    415a:	e8 94       	clt
    415c:	42 30       	cpi	r20, 0x02	; 2
    415e:	c4 f0       	brlt	.+48     	; 0x4190 <itoa+0x3a>
    4160:	45 32       	cpi	r20, 0x25	; 37
    4162:	b4 f4       	brge	.+44     	; 0x4190 <itoa+0x3a>
    4164:	4a 30       	cpi	r20, 0x0A	; 10
    4166:	29 f4       	brne	.+10     	; 0x4172 <itoa+0x1c>
    4168:	97 fb       	bst	r25, 7
    416a:	1e f4       	brtc	.+6      	; 0x4172 <itoa+0x1c>
    416c:	90 95       	com	r25
    416e:	81 95       	neg	r24
    4170:	9f 4f       	sbci	r25, 0xFF	; 255
    4172:	64 2f       	mov	r22, r20
    4174:	77 27       	eor	r23, r23
    4176:	0e 94 3e 20 	call	0x407c	; 0x407c <__udivmodhi4>
    417a:	80 5d       	subi	r24, 0xD0	; 208
    417c:	8a 33       	cpi	r24, 0x3A	; 58
    417e:	0c f0       	brlt	.+2      	; 0x4182 <itoa+0x2c>
    4180:	89 5d       	subi	r24, 0xD9	; 217
    4182:	81 93       	st	Z+, r24
    4184:	cb 01       	movw	r24, r22
    4186:	00 97       	sbiw	r24, 0x00	; 0
    4188:	a1 f7       	brne	.-24     	; 0x4172 <itoa+0x1c>
    418a:	16 f4       	brtc	.+4      	; 0x4190 <itoa+0x3a>
    418c:	5d e2       	ldi	r21, 0x2D	; 45
    418e:	51 93       	st	Z+, r21
    4190:	10 82       	st	Z, r1
    4192:	c9 01       	movw	r24, r18
    4194:	0c 94 cc 20 	jmp	0x4198	; 0x4198 <strrev>

00004198 <strrev>:
    4198:	dc 01       	movw	r26, r24
    419a:	fc 01       	movw	r30, r24
    419c:	67 2f       	mov	r22, r23
    419e:	71 91       	ld	r23, Z+
    41a0:	77 23       	and	r23, r23
    41a2:	e1 f7       	brne	.-8      	; 0x419c <strrev+0x4>
    41a4:	32 97       	sbiw	r30, 0x02	; 2
    41a6:	04 c0       	rjmp	.+8      	; 0x41b0 <strrev+0x18>
    41a8:	7c 91       	ld	r23, X
    41aa:	6d 93       	st	X+, r22
    41ac:	70 83       	st	Z, r23
    41ae:	62 91       	ld	r22, -Z
    41b0:	ae 17       	cp	r26, r30
    41b2:	bf 07       	cpc	r27, r31
    41b4:	c8 f3       	brcs	.-14     	; 0x41a8 <strrev+0x10>
    41b6:	08 95       	ret

000041b8 <_exit>:
    41b8:	f8 94       	cli

000041ba <__stop_program>:
    41ba:	ff cf       	rjmp	.-2      	; 0x41ba <__stop_program>
